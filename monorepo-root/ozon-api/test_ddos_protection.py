#!/usr/bin/env python3
"""
–¢–µ—Å—Ç DDoS –∑–∞—â–∏—Ç—ã –≤ Ozon API
"""
import asyncio
import grpc
import sys
import os
import time
import requests

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

import raw_product_pb2
import raw_product_pb2_grpc


async def test_ddos_protection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DDoS –∑–∞—â–∏—Ç—ã"""
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É
    channel = grpc.aio.insecure_channel('localhost:3002')
    stub = raw_product_pb2_grpc.RawProductServiceStub(channel)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_token = "marketvision_secret_token_2024"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DDoS –∑–∞—â–∏—Ç—ã...")
    
    # –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏)
    print("\n1. –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:")
    try:
        request = raw_product_pb2.GetRawProductsRequest(
            query="RTX 5070",
            category="videocards",
            auth_token=test_token
        )
        response = await stub.GetRawProducts(request)
        print(f"‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª: {response.total_count} —Ç–æ–≤–∞—Ä–æ–≤")
    except grpc.RpcError as e:
        print(f"‚ùå –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à–µ–ª: {e.details()}")
    
    # –¢–µ—Å—Ç 2: Burst –∞—Ç–∞–∫–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞)
    print("\n2. –¢–µ—Å—Ç burst –∞—Ç–∞–∫–∏ (10 –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥):")
    blocked_count = 0
    for i in range(10):
        try:
            request = raw_product_pb2.GetRawProductsRequest(
                query=f"RTX 5070 {i}",
                category="videocards",
                auth_token=test_token
            )
            response = await stub.GetRawProducts(request)
            print(f"   –ó–∞–ø—Ä–æ—Å {i+1}: –ø—Ä–æ—à–µ–ª")
        except grpc.RpcError as e:
            if "DDoS protection" in e.details():
                blocked_count += 1
                print(f"   –ó–∞–ø—Ä–æ—Å {i+1}: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - {e.details()}")
            else:
                print(f"   –ó–∞–ø—Ä–æ—Å {i+1}: –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - {e.details()}")
    
    print(f"‚úÖ Burst –∞—Ç–∞–∫–∞: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ {blocked_count}/10 –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    # –¢–µ—Å—Ç 3: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã)
    print("\n3. –¢–µ—Å—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:")
    try:
        for i in range(60):  # –ú–Ω–æ–≥–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            request = raw_product_pb2.GetRawProductsRequest(
                query="SUSPICIOUS_QUERY",  # –û–¥–∏–Ω–∞–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                category="videocards",
                auth_token=test_token
            )
            response = await stub.GetRawProducts(request)
            if i % 10 == 0:
                print(f"   –ó–∞–ø—Ä–æ—Å {i+1}: –ø—Ä–æ—à–µ–ª")
    except grpc.RpcError as e:
        if "DDoS protection" in e.details():
            print(f"‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: {e.details()}")
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e.details()}")
    
    # –¢–µ—Å—Ç 4: –ù–µ—É—Å–ø–µ—à–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    print("\n4. –¢–µ—Å—Ç –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
    failed_auth_count = 0
    for i in range(15):  # –ë–æ–ª—å—à–µ —á–µ–º –ª–∏–º–∏—Ç
        try:
            request = raw_product_pb2.GetRawProductsRequest(
                query="RTX 5070",
                category="videocards",
                auth_token="wrong_token"  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
            )
            response = await stub.GetRawProducts(request)
            print(f"   –ü–æ–ø—ã—Ç–∫–∞ {i+1}: –ø—Ä–æ—à–ª–∞ (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ)")
        except grpc.RpcError as e:
            if e.code() == grpc.StatusCode.UNAUTHENTICATED:
                failed_auth_count += 1
                print(f"   –ü–æ–ø—ã—Ç–∫–∞ {i+1}: –Ω–µ—É—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
            elif "DDoS protection" in e.details():
                print(f"   –ü–æ–ø—ã—Ç–∫–∞ {i+1}: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ DDoS –∑–∞—â–∏—Ç–æ–π - {e.details()}")
                break
            else:
                print(f"   –ü–æ–ø—ã—Ç–∫–∞ {i+1}: –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - {e.details()}")
    
    print(f"‚úÖ –ù–µ—É—Å–ø–µ—à–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {failed_auth_count}")
    
    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ DDoS –∑–∞—â–∏—Ç—ã
    print("\n5. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ DDoS –∑–∞—â–∏—Ç—ã:")
    try:
        headers = {
            'Authorization': f'Bearer {test_token}',
            'Accept': 'application/json'
        }
        response = requests.get('http://localhost:3005/ddos-stats', headers=headers)
        if response.status_code == 200:
            stats = response.json()
            print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ DDoS –∑–∞—â–∏—Ç—ã:")
            print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('total_requests', 0)}")
            print(f"   –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('blocked_requests', 0)}")
            print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {stats.get('block_rate', 0):.2f}%")
            print(f"   IP –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ: {stats.get('blacklisted_ips', 0)}")
            print(f"   –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ IP: {stats.get('suspicious_ips', 0)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    await channel.close()
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DDoS –∑–∞—â–∏—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(test_ddos_protection()) 