#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Ozon API
"""
import asyncio
import grpc
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

import raw_product_pb2
import raw_product_pb2_grpc


async def test_request_validation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É
    channel = grpc.aio.insecure_channel('localhost:3002')
    stub = raw_product_pb2_grpc.RawProductServiceStub(channel)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_token = os.getenv("OZON_API_TOKEN", "test_token")
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤...")
    
    # –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏)
    print("\n1. –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:")
    try:
        request = raw_product_pb2.GetRawProductsRequest(
            query="RTX 5070",
            category="videocards",
            auth_token=test_token
        )
        response = await stub.GetRawProducts(request)
        print(f"‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª: {response.total_count} —Ç–æ–≤–∞—Ä–æ–≤")
    except grpc.RpcError as e:
        print(f"‚ùå –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à–µ–ª: {e.details()}")
    
    # –¢–µ—Å—Ç 2: –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π query (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω)
    print("\n2. –¢–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ query:")
    try:
        long_query = "A" * 101  # 101 —Å–∏–º–≤–æ–ª
        request = raw_product_pb2.GetRawProductsRequest(
            query=long_query,
            category="videocards",
            auth_token=test_token
        )
        response = await stub.GetRawProducts(request)
        print(f"‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π query –ø—Ä–æ—à–µ–ª (–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª): {response.total_count} —Ç–æ–≤–∞—Ä–æ–≤")
    except grpc.RpcError as e:
        if e.code() == grpc.StatusCode.INVALID_ARGUMENT:
            print(f"‚úÖ –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π query –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {e.details()}")
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e.code()} - {e.details()}")
    
    # –¢–µ—Å—Ç 3: –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è category (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞)
    print("\n3. –¢–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π category:")
    try:
        long_category = "B" * 101  # 101 —Å–∏–º–≤–æ–ª
        request = raw_product_pb2.GetRawProductsRequest(
            query="RTX 5070",
            category=long_category,
            auth_token=test_token
        )
        response = await stub.GetRawProducts(request)
        print(f"‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è category –ø—Ä–æ—à–ª–∞ (–Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞): {response.total_count} —Ç–æ–≤–∞—Ä–æ–≤")
    except grpc.RpcError as e:
        if e.code() == grpc.StatusCode.INVALID_ARGUMENT:
            print(f"‚úÖ –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è category –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {e.details()}")
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e.code()} - {e.details()}")
    
    # –¢–µ—Å—Ç 4: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ (–¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏)
    print("\n4. –¢–µ—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –¥–ª–∏–Ω—ã:")
    try:
        max_query = "C" * 100  # —Ä–æ–≤–Ω–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
        max_category = "D" * 100  # —Ä–æ–≤–Ω–æ 100 —Å–∏–º–≤–æ–ª–æ–≤
        request = raw_product_pb2.GetRawProductsRequest(
            query=max_query,
            category=max_category,
            auth_token=test_token
        )
        response = await stub.GetRawProducts(request)
        print(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–æ—à–ª–∞: {response.total_count} —Ç–æ–≤–∞—Ä–æ–≤")
    except grpc.RpcError as e:
        print(f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–µ –ø—Ä–æ—à–ª–∞: {e.details()}")
    
    await channel.close()
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(test_request_validation()) 