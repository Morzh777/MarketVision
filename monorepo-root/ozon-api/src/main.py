#!/usr/bin/env python3
"""
Ozon API gRPC —Å–µ—Ä–≤–µ—Ä
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
"""
import asyncio
import os
import signal
import sys
from typing import NoReturn
from aiohttp import web
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è gRPC —Å–µ—Ä–≤–µ—Ä–∞
from infrastructure.grpc.ozon_grpc_service import serve


async def health_handler(request):
    """HTTP health check handler"""
    return web.json_response({
        'status': 'ok',
        'timestamp': asyncio.get_event_loop().time(),
        'service': 'ozon-api',
        'type': 'gRPC'
    })


async def start_http_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health checks"""
    app = web.Application()
    app.router.add_get('/health', health_handler)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 3005)
    await site.start()
    print("üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ 0.0.0.0:3005 (–¥–ª—è health checks)")


async def shutdown_handler() -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ graceful shutdown"""
    print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    sys.exit(0)


def setup_signal_handlers() -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    if sys.platform != "win32":
        # Unix-–ø–æ–¥–æ–±–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
        loop = asyncio.get_event_loop()
        for sig in (signal.SIGTERM, signal.SIGINT):
            loop.add_signal_handler(
                sig, lambda: asyncio.create_task(shutdown_handler())
            )
    else:
        # Windows
        signal.signal(
            signal.SIGINT, lambda s, f: asyncio.create_task(shutdown_handler())
        )


async def main() -> NoReturn:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    Raises:
        SystemExit: –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –¥–ª—è Docker
    import sys
    sys.stdout.flush()
    sys.stderr.flush()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Ozon API —Å–µ—Ä–≤–µ—Ä–∞...")
    print(f"üîë OZON_API_TOKEN –∏–∑ env: {os.getenv('OZON_API_TOKEN', '–ù–ï –ù–ê–ô–î–ï–ù')}")
    sys.stdout.flush()

    try:
        setup_signal_handlers()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks
        await start_http_server()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º gRPC —Å–µ—Ä–≤–µ—Ä
        await serve()
    except KeyboardInterrupt:
        print("üõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ Ctrl+C")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        print("‚úÖ Ozon API —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
        sys.exit(0)
