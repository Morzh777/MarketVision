#!/usr/bin/env python3
"""
Ozon API gRPC —Å–µ—Ä–≤–µ—Ä
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
"""
import asyncio
import os
import signal
import sys
from typing import NoReturn
from aiohttp import web
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è gRPC —Å–µ—Ä–≤–µ—Ä–∞
from infrastructure.grpc.ozon_grpc_service import serve

# –ò–º–ø–æ—Ä—Ç DDoS –∑–∞—â–∏—Ç—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
try:
    from utils.ddos_protection import ddos_protection
    DDOS_AVAILABLE = True
except ImportError:
    DDOS_AVAILABLE = False
    print("‚ö†Ô∏è DDoS –∑–∞—â–∏—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (utils.ddos_protection –Ω–µ –Ω–∞–π–¥–µ–Ω)")


async def health_handler(request):
    """HTTP health check handler —Å CORS –∑–∞—â–∏—Ç–æ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Origin header –¥–ª—è CORS –∑–∞—â–∏—Ç—ã
    origin = request.headers.get('Origin')
    allowed_origins = [
        'http://localhost:3000',
        'http://localhost:3001', 
        'http://localhost:8080',
        'https://marketvision.local',
        'https://marketvision.com'
    ]
    
    # –ï—Å–ª–∏ Origin –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω, –æ—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    if origin and origin not in allowed_origins:
        return web.json_response(
            {'error': 'CORS policy violation'}, 
            status=403
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º User-Agent –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
    user_agent = request.headers.get('User-Agent', '')
    allowed_user_agents = ['curl', 'fetch', 'node', 'python', 'health', 'check']
    if not user_agent or not any(agent in user_agent.lower() for agent in allowed_user_agents):
        # –†–∞–∑—Ä–µ—à–∞–µ–º curl, fetch, node, python –∏ health check –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        return web.json_response(
            {'error': 'Unauthorized client'}, 
            status=403
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º CORS headers –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    headers = {
        'Access-Control-Allow-Origin': origin if origin in allowed_origins else '*',
        'Access-Control-Allow-Methods': 'GET, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Max-Age': '3600'
    }
    
    return web.json_response({
        'status': 'ok',
        'timestamp': asyncio.get_event_loop().time(),
        'service': 'ozon-api',
        'type': 'gRPC'
    }, headers=headers)


async def options_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS preflight"""
    origin = request.headers.get('Origin')
    allowed_origins = [
        'http://localhost:3000',
        'http://localhost:3001', 
        'http://localhost:8080',
        'https://marketvision.local',
        'https://marketvision.com'
    ]
    
    headers = {
        'Access-Control-Allow-Origin': origin if origin in allowed_origins else '*',
        'Access-Control-Allow-Methods': 'GET, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Max-Age': '3600'
    }
    
    return web.Response(headers=headers)


async def ddos_stats_handler(request):
    """HTTP handler –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ DDoS –∑–∞—â–∏—Ç—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    auth_header = request.headers.get('Authorization', '')
    expected_token = os.getenv("OZON_API_TOKEN", "")
    
    if not auth_header.startswith('Bearer ') or auth_header[7:] != expected_token:
        return web.json_response(
            {'error': 'Unauthorized'}, 
            status=401
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å DDoS –∑–∞—â–∏—Ç—ã
    if not DDOS_AVAILABLE:
        return web.json_response(
            {'error': 'DDoS protection not available'}, 
            status=503
        )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = ddos_protection.get_statistics()
    
    # –î–æ–±–∞–≤–ª—è–µ–º CORS headers
    headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        'Access-Control-Max-Age': '3600'
    }
    
    return web.json_response(stats, headers=headers)


async def start_http_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health checks —Å CORS –∑–∞—â–∏—Ç–æ–π"""
    app = web.Application()
    
    # –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
    @web.middleware
    async def cors_middleware(request, handler):
        """CORS middleware –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        response = await handler(request)
        
        # –î–æ–±–∞–≤–ª—è–µ–º security headers
        response.headers['X-Content-Type-Options'] = 'nosniff'
        response.headers['X-Frame-Options'] = 'DENY'
        response.headers['X-XSS-Protection'] = '1; mode=block'
        response.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'
        
        return response
    
    app.middlewares.append(cors_middleware)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç—ã
    app.router.add_get('/health', health_handler)
    app.router.add_options('/health', options_handler)
    app.router.add_get('/ddos-stats', ddos_stats_handler)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 3005)
    await site.start()
    print("üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ 0.0.0.0:3005 (–¥–ª—è health checks —Å CORS –∑–∞—â–∏—Ç–æ–π)")


async def shutdown_handler() -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ graceful shutdown"""
    print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    sys.exit(0)


def setup_signal_handlers() -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    if sys.platform != "win32":
        # Unix-–ø–æ–¥–æ–±–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
        loop = asyncio.get_event_loop()
        for sig in (signal.SIGTERM, signal.SIGINT):
            loop.add_signal_handler(
                sig, lambda: asyncio.create_task(shutdown_handler())
            )
    else:
        # Windows
        signal.signal(
            signal.SIGINT, lambda s, f: asyncio.create_task(shutdown_handler())
        )


async def main() -> NoReturn:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    Raises:
        SystemExit: –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –¥–ª—è Docker
    import sys
    sys.stdout.flush()
    sys.stderr.flush()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Ozon API —Å–µ—Ä–≤–µ—Ä–∞...")
    print(f"üîë OZON_API_TOKEN –∏–∑ env: {os.getenv('OZON_API_TOKEN', '–ù–ï –ù–ê–ô–î–ï–ù')}")
    sys.stdout.flush()

    try:
        setup_signal_handlers()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks
        await start_http_server()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º gRPC —Å–µ—Ä–≤–µ—Ä
        await serve()
    except KeyboardInterrupt:
        print("üõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ Ctrl+C")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        print("‚úÖ Ozon API —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
        sys.exit(0)
