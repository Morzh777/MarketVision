import asyncio
import json
from typing import List, Dict, Any
from domain.services.parser_service import ParserService
from domain.entities.product import Product
from infrastructure.parsers.ozon_parser import OzonParser

class OzonParserService(ParserService):
    """–°–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ Ozon"""
    
    def __init__(self):
        self.parser = OzonParser()
        self._is_available = True
    
    async def parse_products(self, query: str, category_slug: str) -> List[Product]:
        """–ü–∞—Ä—Å–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã —Å Ozon"""
        try:
            print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ Ozon –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_slug}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
            products = await self.parser.get_products(query, category_slug)
            
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
            return products
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            self._is_available = False
            return []
    
    async def close_browser(self):
        """–ó–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            if self.parser:
                await self.parser.close()
                print("üîå –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    async def get_raw_data(self, query: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            products = await self.parser.get_products(query, "videokarty-15721")
            return {
                "status": "success",
                "data": [product.__dict__ for product in products],
                "query": query,
                "timestamp": "2024-01-01T12:00:00"
            }
        except Exception as e:
            return {
                "status": "error",
                "error": str(e),
                "query": query,
                "timestamp": "2024-01-01T12:00:00"
            }
    
    async def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–µ—Ä–∞"""
        return self._is_available 