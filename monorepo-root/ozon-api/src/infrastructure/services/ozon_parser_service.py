import asyncio
import json
from typing import List, Dict, Any, Optional
from domain.services.parser_service import ParserService
from domain.entities.product import Product
from infrastructure.parsers.ozon_parser import OzonParser

class OzonParserService(ParserService):
    """–°–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ Ozon —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    
    def __init__(self) -> None:
        self.parser = OzonParser()
        self._is_available = True
    
    async def parse_products(
        self, 
        query: str, 
        category_slug: str, 
        platform_id: Optional[str] = None,
        exactmodels: Optional[str] = None
    ) -> List[Product]:
        """
        –ü–∞—Ä—Å–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã —Å Ozon
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            category_slug: –°–ª–∞–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            platform_id: ID –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            exactmodels: ID –º–æ–¥–µ–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        
        Raises:
            ValueError: –ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            RuntimeError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞
        """
        if not query or not query.strip():
            raise ValueError("Query cannot be empty")
            
        if not category_slug or not category_slug.strip():
            raise ValueError("Category slug cannot be empty")
        
        try:
            print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ Ozon –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_slug}")
            
            if platform_id:
                print(f"üéÆ –ü–æ–ª—É—á–µ–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ—Ç Product-Filter-Service: {platform_id}")
            if exactmodels:
                print(f"üîé –ü–æ–ª—É—á–µ–Ω exactmodels –æ—Ç Product-Filter-Service: {exactmodels}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä
            products = await self.parser.get_products(query, category_slug, platform_id, exactmodels)
            
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
            return products
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            self._is_available = False
            raise RuntimeError(f"Parsing failed: {str(e)}") from e
    
    async def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç—å —Ä–µ—Å—É—Ä—Å—ã –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            if self.parser:
                await self.parser.close()
                print("üîå –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            raise
    
    async def get_raw_data(self, query: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        if not query or not query.strip():
            raise ValueError("Query cannot be empty")
            
        try:
            products = await self.parser.get_products(query, "videokarty-15721")
            return {
                "status": "success",
                "data": [product.to_dict() for product in products],
                "query": query,
                "total_count": len(products),
                "timestamp": "2024-01-01T12:00:00"
            }
        except Exception as e:
            return {
                "status": "error",
                "error": str(e),
                "query": query,
                "total_count": 0,
                "timestamp": "2024-01-01T12:00:00"
            }
    
    async def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–µ—Ä–∞"""
        return self._is_available 