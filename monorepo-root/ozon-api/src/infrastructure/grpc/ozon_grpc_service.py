import asyncio
from concurrent.futures import ThreadPoolExecutor
from typing import Any, Dict, Optional

import grpc

import raw_product_pb2
import raw_product_pb2_grpc
from infrastructure.services.ozon_parser_service import OzonParserService


class OzonRawProductService(raw_product_pb2_grpc.RawProductServiceServicer):
    """gRPC —Å–µ—Ä–≤–∏—Å –¥–ª—è Ozon API —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""

    def __init__(self) -> None:
        self.parser_service = OzonParserService()

    async def GetRawProducts(
        self,
        request: raw_product_pb2.GetRawProductsRequest,
        context: grpc.ServicerContext,
    ) -> raw_product_pb2.GetRawProductsResponse:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å Ozon

        Args:
            request: gRPC –∑–∞–ø—Ä–æ—Å —Å query, category –∏ platform_id
            context: gRPC context –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫

        Returns:
            GetRawProductsResponse —Å –º–∞—Å—Å–∏–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤

        Raises:
            grpc.RpcError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        query = request.query
        category = request.category
        platform_id: Optional[str] = getattr(request, "platform_id", None)
        if not platform_id:
            platform_id = None
        exactmodels: Optional[str] = getattr(request, "exactmodels", None)
        if not exactmodels:
            exactmodels = None

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not query or not query.strip():
            context.set_code(grpc.StatusCode.INVALID_ARGUMENT)
            context.set_details("Query cannot be empty")
            return raw_product_pb2.GetRawProductsResponse(
                products=[], total_count=0, source="ozon"
            )

        if not category or not category.strip():
            context.set_code(grpc.StatusCode.INVALID_ARGUMENT)
            context.set_details("Category cannot be empty")
            return raw_product_pb2.GetRawProductsResponse(
                products=[], total_count=0, source="ozon"
            )

        print(f"üîç gRPC GetRawProducts –∑–∞–ø—Ä–æ—Å: {query} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
        if platform_id:
            print(f"üéÆ –° –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π: {platform_id}")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–µ—Ä–∞
            if not await self.parser_service.is_available():
                context.set_code(grpc.StatusCode.UNAVAILABLE)
                context.set_details("Parser service is currently unavailable")
                return raw_product_pb2.GetRawProductsResponse(
                    products=[], total_count=0, source="ozon"
                )

            products = await self.parser_service.parse_products(
                query, category, platform_id, exactmodels
            )
            grpc_products = []

            for product in products:
                try:
                    grpc_product = raw_product_pb2.RawProduct(
                        id=product.id,
                        name=product.name,
                        price=int(product.price),
                        image_url=product.image_url or "",
                        product_url=product.product_url or "",
                        category=category,
                        source="ozon",
                        query=query,
                    )
                    grpc_products.append(grpc_product)
                except (ValueError, TypeError, OverflowError) as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ {product.id}: {e}")
                    continue

            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(grpc_products)} —Ç–æ–≤–∞—Ä–æ–≤")
            return raw_product_pb2.GetRawProductsResponse(
                products=grpc_products, total_count=len(grpc_products), source="ozon"
            )

        except grpc.RpcError:
            # –ü–µ—Ä–µ–±—Ä–æ—Å gRPC –æ—à–∏–±–æ–∫ –∫–∞–∫ –µ—Å—Ç—å
            raise
        except Exception as e:
            print(f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –≤ gRPC GetRawProducts: {e}")
            context.set_code(grpc.StatusCode.INTERNAL)
            context.set_details(f"Internal parser error: {str(e)}")
            return raw_product_pb2.GetRawProductsResponse(
                products=[], total_count=0, source="ozon"
            )


async def serve() -> None:
    """–ó–∞–ø—É—Å–∫ gRPC —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
    server = grpc.aio.server(ThreadPoolExecutor(max_workers=10))
    raw_product_pb2_grpc.add_RawProductServiceServicer_to_server(
        OzonRawProductService(), server
    )
    listen_addr = "[::]:3002"
    server.add_insecure_port(listen_addr)

    print(f"üöÄ Ozon API gRPC —Å–µ—Ä–≤–µ—Ä (raw-product.proto) –∑–∞–ø—É—â–µ–Ω –Ω–∞ {listen_addr}")

    try:
        await server.start()
        await server.wait_for_termination()
    except KeyboardInterrupt:
        print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
    finally:
        print("üîÑ Graceful shutdown...")
        await server.stop(grace=5)
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    asyncio.run(serve())
