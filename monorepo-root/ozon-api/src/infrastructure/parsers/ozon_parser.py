import asyncio
import json
import os
import time
import urllib.parse
from typing import Any, Dict, List, Optional

import undetected_chromedriver as uc
from selenium import webdriver
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait

from domain.entities.product import Product


class OzonParser:
    """–ü–∞—Ä—Å–µ—Ä Ozon —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º undetected-chromedriver"""

    def __init__(self):
        self.driver = None
        self.base_url = "https://www.ozon.ru"
        self._driver_initialized = False

    async def _init_driver(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ ChromeDriver"""
        # –ï—Å–ª–∏ –¥—Ä–∞–π–≤–µ—Ä —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º
        if self._driver_initialized and self.driver is not None:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥—Ä–∞–π–≤–µ—Ä –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                self.driver.current_url
                print("‚úÖ –î—Ä–∞–π–≤–µ—Ä —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return
            except Exception as e:
                print(f"‚ö†Ô∏è –î—Ä–∞–π–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º: {e}")
                self.driver = None
                self._driver_initialized = False
        
        if self.driver is None:
            print("üîß –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä Chrome...")
            options = uc.ChromeOptions()
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-dev-shm-usage")
            options.add_argument("--disable-blink-features=AutomationControlled")
            options.add_argument("--disable-extensions")
            options.add_argument("--disable-plugins")
            options.add_argument("--disable-images")
            options.add_argument("--disable-javascript")
            options.add_argument("--disable-gpu")
            options.add_argument("--disable-web-security")
            options.add_argument("--allow-running-insecure-content")
            options.add_argument("--ignore-ssl-errors")
            options.add_argument("--ignore-certificate-errors")
            options.add_argument("--no-first-run")
            options.add_argument("--no-default-browser-check")
            options.add_argument("--disable-background-timer-throttling")
            options.add_argument("--disable-backgrounding-occluded-windows")
            options.add_argument("--disable-renderer-backgrounding")
            options.add_argument("--disable-features=TranslateUI")
            options.add_argument("--disable-ipc-flooding-protection")
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å ARM64
            # options.add_experimental_option("excludeSwitches", ["enable-automation"])
            # options.add_experimental_option("useAutomationExtension", False)
            options.add_argument(
                "user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            )

            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ ChromeDriver –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
                chromedriver_paths = [
                    "chromedriver.exe",  # –í —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
                    "chromedriver",  # –í —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ (Linux)
                    os.path.join(os.path.dirname(__file__), "chromedriver.exe"),
                    os.path.join(os.path.dirname(__file__), "chromedriver"),
                    "C:\\chromedriver\\chromedriver.exe",  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–∞–ø–∫–∞ Windows
                    "/usr/local/bin/chromedriver",  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–∞–ø–∫–∞ Linux
                    "/usr/bin/chromedriver",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø–∞–ø–∫–∞ Linux
                ]

                chromedriver_found = None
                for path in chromedriver_paths:
                    if os.path.exists(path):
                        chromedriver_found = path
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω ChromeDriver: {path}")
                        break

                if chromedriver_found:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π ChromeDriver
                    print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π ChromeDriver: {chromedriver_found}")
                    self.driver = uc.Chrome(
                        driver_executable_path=chromedriver_found, options=options
                    )
                else:
                    # –ï—Å–ª–∏ ChromeDriver –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π Selenium
                    print("‚ö†Ô∏è ChromeDriver –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π Selenium...")
                    try:
                        self.driver = webdriver.Chrome(options=options)
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å –æ–±—ã—á–Ω—ã–º Selenium: {e}")
                        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –±–µ–∑ –æ–ø—Ü–∏–π
                        print("üîß –ü—Ä–æ–±—É–µ–º –±–µ–∑ –æ–ø—Ü–∏–π...")
                        self.driver = webdriver.Chrome()

                print("‚úÖ –î—Ä–∞–π–≤–µ—Ä Chrome —Å–æ–∑–¥–∞–Ω")
                print(f"üîß Chrome –≤–µ—Ä—Å–∏—è: {self.driver.capabilities.get('browserVersion', 'unknown')}")
                print(f"üîß ChromeDriver –≤–µ—Ä—Å–∏—è: {self.driver.capabilities.get('chrome', {}).get('chromedriverVersion', 'unknown')}")

                # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
                self.driver.execute_script(
                    "Object.defineProperty(navigator, 'webdriver', {get: () => undefined})"
                )
                self.driver.execute_script(
                    "Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]})"
                )
                self.driver.execute_script(
                    "Object.defineProperty(navigator, 'languages', {get: () => ['en-US', 'en']})"
                )
                
                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –¥—Ä–∞–π–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
                self._driver_initialized = True

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
                print(f"üîß –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                print(f"üîß –î–µ—Ç–∞–ª–∏: {str(e)}")
                raise

    def _build_api_url(
        self,
        query: str,
        category_slug: str,
        platform_id: str = None,
        exactmodels: str = None,
    ) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞"""
        # –ö–æ–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è URL
        encoded_query = query.replace(" ", "+")

        # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API Ozon
        base_url = "https://www.ozon.ru/api/entrypoint-api.bx/page/json/v2"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π category_slug 
        print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º slug –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_slug} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'")
        print(f"üéÆ –ü–æ–ª—É—á–µ–Ω platform_id: {platform_id} (—Ç–∏–ø: {type(platform_id)})")
        print(f"üîé –ü–æ–ª—É—á–µ–Ω exactmodels: {exactmodels}")

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–ø—Ä–∏–≤–µ–¥–µ–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ä–∞–±–æ—á–µ–π —Å—Å—ã–ª–∫–æ–π)
        url_param = f"/category/{category_slug}/?__rr=1&category_was_predicted=true&deny_category_prediction=true&from_global=true&page=1&sorting=price&text={encoded_query}"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if platform_id:
            url_param += f"&opened=platform&platform={platform_id}"
            print(f"üéÆ –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É: {platform_id}")
        else:
            print(f"‚ö†Ô∏è platform_id –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
        # –î–æ–±–∞–≤–ª—è–µ–º exactmodels –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if exactmodels:
            url_param += f"&exactmodels={exactmodels}"
            print(f"üîé –î–æ–±–∞–≤–ª—è–µ–º exactmodels: {exactmodels}")

        # –°—Ç—Ä–æ–∏–º URL (–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ url –ø–∞—Ä–∞–º–µ—Ç—Ä)
        full_url = f"{base_url}?url={urllib.parse.quote(url_param)}"
        print(f"[OZON-API] FINAL URL: {full_url}")
        return full_url

    async def get_products(
        self,
        query: str,
        category_slug: str,
        platform_id: str = None,
        exactmodels: str = None,
    ) -> List[Product]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        start_time = time.time()
        print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ Ozon –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_slug}")
        if platform_id:
            print(f"üéÆ –° –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π: {platform_id}")
        if exactmodels:
            print(f"üîé –° exactmodels: {exactmodels}")
        max_retries = 3
        for attempt in range(max_retries):
            try:
                print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_retries}")

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
                await self._init_driver()

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
                if self.driver is None:
                    raise Exception("–î—Ä–∞–π–≤–µ—Ä –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

                url = self._build_api_url(
                    query, category_slug, platform_id, exactmodels
                )
                print(f"üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ API endpoint –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
                print(f"üì° URL: {url}")

                # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                print("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                try:
                    self.driver.get(url)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                    # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                    if attempt < max_retries - 1:
                        print("üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –∑–∞–≥—Ä—É–∑–∫–∏...")
                        await asyncio.sleep(2)
                        continue
                    else:
                        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π URL
                current_url = self.driver.current_url
                print(f"üìç –¢–µ–∫—É—â–∏–π URL: {current_url}")

                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                print("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
                wait = WebDriverWait(self.driver, 10)

                try:
                    # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è JSON –¥–∞–Ω–Ω—ã—Ö
                    wait.until(EC.presence_of_element_located((By.TAG_NAME, "pre")))
                    print("‚úÖ JSON –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã")
                except TimeoutException:
                    print("‚ö†Ô∏è JSON –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º body...")
                    # –ï—Å–ª–∏ pre –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º body
                    body_text = self.driver.find_element(By.TAG_NAME, "body").text
                    if not body_text.strip():
                        print("‚ùå Body –ø—É—Å—Ç–æ–π, –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å")
                        if attempt < max_retries - 1:
                            print("üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É...")
                            continue
                        else:
                            raise Exception(
                                "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫"
                            )

                # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ
                print("üîç –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ...")
                json_data = self._extract_json_from_page()

                if json_data is None:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –¥–∞–Ω–Ω—ã–µ")
                    if attempt < max_retries - 1:
                        print("üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É...")
                        continue
                    else:
                        raise Exception(
                            "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫"
                        )

                # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–¥—É–∫—Ç—ã
                print("üîç –ü–∞—Ä—Å–∏–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ JSON...")
                products = self._parse_products_from_json(
                    json_data, query, category_slug
                )

                processing_time = int((time.time() - start_time) * 1000)
                print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time}ms")
                print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

                return products

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                if attempt < max_retries - 1:
                    print("üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É...")
                    await asyncio.sleep(2)
                else:
                    print("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                    raise

        return []

    def _extract_json_from_page(self) -> Optional[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥—Ä–∞–π–≤–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if self.driver is None:
                print("‚ùå –î—Ä–∞–π–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return None
                
            # –ò—â–µ–º pre —ç–ª–µ–º–µ–Ω—Ç —Å JSON
            pre_elements = self.driver.find_elements(By.TAG_NAME, "pre")

            for pre in pre_elements:
                try:
                    text = pre.text.strip()
                    if text and text.startswith("{"):
                        json_data = json.loads(text)
                        print("‚úÖ JSON –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ pre —ç–ª–µ–º–µ–Ω—Ç–∞")
                        return json_data
                except json.JSONDecodeError:
                    continue

            # –ï—Å–ª–∏ pre –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º body
            body_text = self.driver.find_element(By.TAG_NAME, "body").text.strip()
            if body_text and body_text.startswith("{"):
                try:
                    json_data = json.loads(body_text)
                    print("‚úÖ JSON –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ body")
                    return json_data
                except json.JSONDecodeError:
                    pass

            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã–π JSON –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON: {e}")
            return None

    def _parse_products_from_json(
        self, json_data: Dict[str, Any], query: str, category_slug: str
    ) -> List[Product]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ JSON –¥–∞–Ω–Ω—ã—Ö"""
        products = []

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON
            if "error" in json_data:
                print(f"‚ùå Ozon –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {json_data['error']}")
                return products

            # –ò—â–µ–º widgetStates
            if "widgetStates" not in json_data:
                print("‚ùå widgetStates –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JSON")
                return products

            # –ò—â–µ–º tileGridDesktop –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä—ã
            for widget_id, widget_data in json_data["widgetStates"].items():
                if "tileGridDesktop" in widget_id and isinstance(widget_data, str):
                    try:
                        widget_content = json.loads(widget_data)
                        if "items" in widget_content:
                            items = widget_content["items"]
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(items)}")

                            # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
                            for item in items:
                                product = self._parse_single_product(
                                    item, query, category_slug
                                )
                                if product:
                                    products.append(product)

                            break  # –ù–∞—à–ª–∏ —Ç–æ–≤–∞—Ä—ã, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–∂–µ—Ç–∞ {widget_id}: {e}")
                        continue

            print(f"üì¶ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ JSON")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")

        return products

    def _parse_single_product(
        self, item: Dict[str, Any], query: str, category_slug: str
    ) -> Optional[Product]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            product_id = str(item.get("sku", ""))
            if not product_id:
                return None

            name = ""
            price = 0
            image_url = ""
            product_url = ""

            # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
            if "action" in item and isinstance(item["action"], dict):
                product_url = "https://www.ozon.ru" + item["action"].get("link", "")

            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ mainState
            characteristics = {}

            if "mainState" in item:
                for state in item["mainState"]:
                    if state.get("type") == "textAtom" and state.get("id") == "name":
                        name = state.get("textAtom", {}).get("text", "")
                    elif state.get("type") == "priceV2":
                        price_data = state.get("priceV2", {})
                        prices = price_data.get("price", [])
                        for price_item in prices:
                            if price_item.get("textStyle") == "PRICE":
                                price_text = price_item.get("text", "0")
                                price = int("".join(filter(str.isdigit, price_text)))
                            elif price_item.get("textStyle") == "ORIGINAL_PRICE":
                                # –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞
                                old_price_text = price_item.get("text", "0")
                                old_price = int(
                                    "".join(filter(str.isdigit, old_price_text))
                                )
                                if old_price > 0:
                                    characteristics["old_price"] = str(old_price)

                        # –°–∫–∏–¥–∫–∞
                        discount_text = price_data.get("discount", "")
                        if discount_text:
                            characteristics["discount"] = discount_text

                    elif state.get("type") == "labelList":
                        # –ë—Ä–µ–Ω–¥ –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–∫–∏
                        labels = state.get("labelList", {}).get("items", [])
                        for label in labels:
                            title = label.get("title", "")
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±—Ä–µ–Ω–¥ –∏–∑ –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                            if "<b>" in title and "</b>" in title:
                                brand = (
                                    title.replace("<b>", "").replace("</b>", "").strip()
                                )
                                if brand and not any(
                                    word in brand.lower()
                                    for word in ["–æ—Ä–∏–≥–∏–Ω–∞–ª", "—Ä–µ–π—Ç–∏–Ω–≥"]
                                ):
                                    characteristics["brand"] = brand

            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if "tileImage" in item:
                images = []
                for img_item in item.get("tileImage", {}).get("items", []):
                    if img_item.get("type") == "image":
                        img_url = img_item.get("image", {}).get("link", "")
                        if img_url:
                            images.append(img_url)
                if images:
                    image_url = images[0]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if not name or price == 0:
                return None

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
            return Product(
                id=product_id,
                name=name,
                price=float(price),
                image_url=image_url,
                product_url=product_url,
                supplier="Ozon",
                characteristics=characteristics,
                category=category_slug,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π category_slug
            )

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
            return None

    async def extract_products(self, raw_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        products = []

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö
            widgets = raw_data.get("widgetStates", {})

            for widget_key, widget_data in widgets.items():
                if "items" in widget_data:
                    try:
                        widget_json = json.loads(widget_data)
                        items = widget_json.get("items", [])

                        for item in items:
                            product_data = self._extract_products_from_items([item])
                            products.extend(product_data)

                    except json.JSONDecodeError:
                        continue

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")

        return products

    def _extract_products_from_items(
        self, items: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ items"""
        products = []

        for item in items:
            try:
                product_data = {
                    "id": str(item.get("id", "")),
                    "name": item.get("title", ""),
                    "price": (
                        item.get("price", {}).get("price", "0")
                        if isinstance(item.get("price"), dict)
                        else str(item.get("price", "0"))
                    ),
                    "description": item.get("description", ""),
                    "image_url": "",
                    "product_url": item.get("url", ""),
                    "images": item.get("images", []),
                    "characteristics": {},
                    "category": item.get("category", ""),
                    "availability": item.get("availability", ""),
                    "query": "",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ
                }

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                images = item.get("images", [])
                if images and len(images) > 0:
                    product_data["image_url"] = images[0].get("url", "")
                    if product_data["image_url"] and not product_data[
                        "image_url"
                    ].startswith("http"):
                        product_data["image_url"] = (
                            f"https://{product_data['image_url']}"
                        )

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ URL
                if product_data["product_url"] and not product_data[
                    "product_url"
                ].startswith("http"):
                    product_data["product_url"] = (
                        f"https://www.ozon.ru{product_data['product_url']}"
                    )

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                specs = item.get("specs", [])
                if specs:
                    for spec in specs:
                        if (
                            isinstance(spec, dict)
                            and "name" in spec
                            and "value" in spec
                        ):
                            product_data["characteristics"][spec["name"]] = spec[
                                "value"
                            ]

                products.append(product_data)

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
                continue

        return products

    async def close(self, force: bool = False):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏)"""
        if not force:
            print("‚ÑπÔ∏è –î—Ä–∞–π–≤–µ—Ä –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
            return
            
        if self.driver:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥—Ä–∞–π–≤–µ—Ä –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                try:
                    self.driver.current_url
                except:
                    print("‚ö†Ô∏è –î—Ä–∞–π–≤–µ—Ä —É–∂–µ –∑–∞–∫—Ä—ã—Ç")
                    self.driver = None
                    self._driver_initialized = False
                    return
                
                self.driver.quit()
                print("üîå –î—Ä–∞–π–≤–µ—Ä Chrome –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            finally:
                self.driver = None
                self._driver_initialized = False
