#!/usr/bin/env python3
"""
–¢–µ—Å—Ç CORS –∑–∞—â–∏—Ç—ã health endpoint –≤ Ozon API
"""
import requests
import json


def test_cors_protection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS –∑–∞—â–∏—Ç—ã health endpoint"""
    
    base_url = "http://localhost:3005"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS –∑–∞—â–∏—Ç—ã health endpoint...")
    
    # –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å curl User-Agent (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏)
    print("\n1. –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å curl:")
    try:
        headers = {
            'User-Agent': 'curl/7.68.0',
            'Accept': 'application/json'
        }
        response = requests.get(f"{base_url}/health", headers=headers)
        print(f"‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª: {response.status_code}")
        print(f"   –û—Ç–≤–µ—Ç: {response.json()}")
    except Exception as e:
        print(f"‚ùå –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
    
    # –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å —Å –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º Origin (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω)
    print("\n2. –¢–µ—Å—Ç —Å –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º Origin:")
    try:
        headers = {
            'User-Agent': 'curl/7.68.0',
            'Origin': 'https://malicious-site.com',
            'Accept': 'application/json'
        }
        response = requests.get(f"{base_url}/health", headers=headers)
        if response.status_code == 403:
            print(f"‚úÖ –ó–∞–ø—Ä–æ—Å —Å –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º Origin –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.json()}")
        else:
            print(f"‚ùå –ó–∞–ø—Ä–æ—Å —Å –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º Origin –ø—Ä–æ—à–µ–ª (–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª): {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º Origin (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏)
    print("\n3. –¢–µ—Å—Ç —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º Origin:")
    try:
        headers = {
            'User-Agent': 'curl/7.68.0',
            'Origin': 'http://localhost:3000',
            'Accept': 'application/json'
        }
        response = requests.get(f"{base_url}/health", headers=headers)
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º Origin –ø—Ä–æ—à–µ–ª: {response.status_code}")
        print(f"   CORS headers: {dict(response.headers)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
    
    # –¢–µ—Å—Ç 4: –ó–∞–ø—Ä–æ—Å –±–µ–∑ User-Agent (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω)
    print("\n4. –¢–µ—Å—Ç –±–µ–∑ User-Agent:")
    try:
        headers = {
            'Accept': 'application/json'
        }
        response = requests.get(f"{base_url}/health", headers=headers)
        if response.status_code == 403:
            print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –±–µ–∑ User-Agent –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.json()}")
        else:
            print(f"‚ùå –ó–∞–ø—Ä–æ—Å –±–µ–∑ User-Agent –ø—Ä–æ—à–µ–ª (–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª): {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
    
    # –¢–µ—Å—Ç 5: OPTIONS –∑–∞–ø—Ä–æ—Å (CORS preflight)
    print("\n5. –¢–µ—Å—Ç OPTIONS –∑–∞–ø—Ä–æ—Å–∞:")
    try:
        headers = {
            'Origin': 'http://localhost:3000',
            'Access-Control-Request-Method': 'GET',
            'Access-Control-Request-Headers': 'Content-Type'
        }
        response = requests.options(f"{base_url}/health", headers=headers)
        print(f"‚úÖ OPTIONS –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª: {response.status_code}")
        print(f"   CORS headers: {dict(response.headers)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
    
    # –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ security headers
    print("\n6. –¢–µ—Å—Ç security headers:")
    try:
        headers = {
            'User-Agent': 'curl/7.68.0',
            'Accept': 'application/json'
        }
        response = requests.get(f"{base_url}/health", headers=headers)
        
        security_headers = {
            'X-Content-Type-Options': response.headers.get('X-Content-Type-Options'),
            'X-Frame-Options': response.headers.get('X-Frame-Options'),
            'X-XSS-Protection': response.headers.get('X-XSS-Protection'),
            'Strict-Transport-Security': response.headers.get('Strict-Transport-Security')
        }
        
        print(f"‚úÖ Security headers: {security_headers}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö security headers
        missing_headers = [k for k, v in security_headers.items() if not v]
        if missing_headers:
            print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç security headers: {missing_headers}")
        else:
            print("‚úÖ –í—Å–µ security headers –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS –∑–∞—â–∏—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    test_cors_protection() 