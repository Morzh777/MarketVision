#!/usr/bin/env python3
"""
–¢–µ—Å—Ç-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Ozon API gRPC —Å–µ—Ä–≤–µ—Ä–∞
–ò–º–∏—Ç–∏—Ä—É–µ—Ç Product-Filter-Service
"""

import asyncio
import grpc
import sys
import os
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ gRPC —Ñ–∞–π–ª—ã
import product_pb2
import product_pb2_grpc

class TestGrpcClient:
    """–¢–µ—Å—Ç-–∫–ª–∏–µ–Ω—Ç –¥–ª—è Ozon API"""
    
    def __init__(self, server_address: str = "localhost:3002"):
        self.server_address = server_address
        self.channel = None
        self.stub = None
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.server_address}...")
            connect_start = time.time()
            self.channel = grpc.aio.insecure_channel(self.server_address)
            self.stub = product_pb2_grpc.ProductFilterServiceStub(self.channel)
            connect_time = (time.time() - connect_start) * 1000
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ {round(connect_time, 2)}ms")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def test_filter_products(self, query: str = "rtx 5080"):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        try:
            print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤: '{query}'")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
            request = product_pb2.FilterProductsRequest(
                products=[],  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, Ozon API —Å–∞–º –ø–∞—Ä—Å–∏—Ç
                query=query,
                all_queries=[query],
                exclude_keywords=[],
                source="ozon",
                category="videocards"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            print("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º gRPC –∑–∞–ø—Ä–æ—Å...")
            start_time = time.time()
            response = await self.stub.FilterProducts(request)
            end_time = time.time()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            print(f"üìä –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:")
            print(f"   - –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {response.total_input}")
            print(f"   - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {response.total_filtered}")
            print(f"   - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {round((end_time - start_time) * 1000, 3)}ms")
            print(f"   - –¢–æ–≤–∞—Ä–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ: {len(response.products)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
            if response.products:
                print(f"\nüõçÔ∏è –ü–µ—Ä–≤—ã–µ —Ç–æ–≤–∞—Ä—ã:")
                for i, product in enumerate(response.products[:3], 1):
                    print(f"   {i}. {product.name}")
                    print(f"      –¶–µ–Ω–∞: {product.price} ‚ÇΩ")
                    print(f"      ID: {product.id}")
                    print(f"      URL: {product.product_url}")
                    print(f"      –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {product.image_url}")
                    print(f"      –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category}")
                    print(f"      –ù–∞–ª–∏—á–∏–µ: {product.availability}")
                    print(f"      –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {product.characteristics}")
                    print()
            else:
                print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            return response
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return None
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        if self.channel:
            await self.channel.close()
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç-–∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Ozon API gRPC —Å–µ—Ä–≤–µ—Ä–∞")
    print("=" * 60)
    
    client = TestGrpcClient()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        if not await client.connect():
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        queries = [
            "rtx 5080",      # –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
            "rtx 5090",      # –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã  
            "rtx 5070ti",    # –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
            "7800x3d",       # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
            "9800x3d",       # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
            "9950x"          # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
        ]
        total_start_time = time.time()
        response_times = []
        
        for i, query in enumerate(queries, 1):
            print(f"\n{'='*20} –ó–ê–ü–†–û–° {i}/{len(queries)} {'='*20}")
            query_start = time.time()
            
            response = await client.test_filter_products(query)
            
            query_time = (time.time() - query_start) * 1000
            response_times.append(query_time)
            
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ '{query}': {round(query_time, 2)}ms")
            
            if i < len(queries):
                print("‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...")
                await asyncio.sleep(2)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = (time.time() - total_start_time) * 1000
        avg_time = sum(response_times) / len(response_times)
        min_time = min(response_times)
        max_time = max(response_times)
        
        print(f"\n{'='*20} –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–†–ï–ú–ï–ù–ò {'='*20}")
        print(f"üìä –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {round(total_time, 2)}ms")
        print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {round(avg_time, 2)}ms")
        print(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {round(min_time, 2)}ms")
        print(f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {round(max_time, 2)}ms")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(queries)}")
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 100 –∑–∞–ø—Ä–æ—Å–æ–≤
        time_100_requests = avg_time * 100
        time_100_requests_seconds = time_100_requests / 1000
        
        print(f"\n{'='*20} –ü–†–û–ì–ù–û–ó –ù–ê 100 –ó–ê–ü–†–û–°–û–í {'='*20}")
        print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ 1 –∑–∞–ø—Ä–æ—Å: {round(avg_time, 2)}ms")
        print(f"üìä –í—Ä–µ–º—è –Ω–∞ 100 –∑–∞–ø—Ä–æ—Å–æ–≤: {round(time_100_requests, 2)}ms ({round(time_100_requests_seconds, 2)} —Å–µ–∫)")
        print(f"üìä –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {round(1000 / avg_time, 2)}")
        print(f"üìä –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É: {round(60000 / avg_time, 2)}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print(f"\n{'='*20} –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò {'='*20}")
        if avg_time < 5000:
            print("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥")
        elif avg_time < 10000:
            print("‚ö†Ô∏è –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ 5-10 —Å–µ–∫—É–Ω–¥")
        else:
            print("‚ùå –ú–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –±–æ–ª–µ–µ 10 —Å–µ–∫—É–Ω–¥")
        
        if time_100_requests_seconds < 300:  # 5 –º–∏–Ω—É—Ç
            print("‚úÖ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–π–º—É—Ç –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç")
        elif time_100_requests_seconds < 600:  # 10 –º–∏–Ω—É—Ç
            print("‚ö†Ô∏è 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–π–º—É—Ç 5-10 –º–∏–Ω—É—Ç")
        else:
            print("‚ùå 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–π–º—É—Ç –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç")
        
        print("\n" + "="*60)
        print("üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        print(f"üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(queries)}")
        print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {round(avg_time, 2)}ms")
        print(f"üìä –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {round(total_time, 2)}ms")
        print(f"üìä –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 100 –∑–∞–ø—Ä–æ—Å–æ–≤: {round(time_100_requests_seconds, 2)} —Å–µ–∫")
        print(f"üìä –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {round(1000 / avg_time, 2)} –∑–∞–ø—Ä/—Å–µ–∫")
        print("="*60)
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        await client.close()

if __name__ == "__main__":
    asyncio.run(main()) 