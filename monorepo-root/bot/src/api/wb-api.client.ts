import fetch from 'node-fetch';

export class WbApiClient {
  constructor(private apiUrl: string) {
    console.log(`üîó WB API Client –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Product-Filter-Service: ${this.apiUrl}`);
  }

  private async fetchCategory(category: string, categoryName: string): Promise<any[]> {
    const url = `${this.apiUrl}/${category}`;
    console.log(`üîç –ó–∞–ø—Ä–æ—Å ${categoryName}: GET ${url}`);
    
    try {
      const res = await fetch(url);
      console.log(`üì° –û—Ç–≤–µ—Ç: ${res.status} ${res.statusText}`);
      
      if (!res.ok) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ ${categoryName}: ${res.status} ${res.statusText}`);
        return [];
      }
      
      const data = await res.json();
      
      if (Array.isArray(data)) {
        console.log(`‚úÖ ${categoryName} –ø–æ–ª—É—á–µ–Ω–æ: ${data.length}`);
        return data;
      } else {
        console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${categoryName}:`, data);
        return [];
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ${categoryName}:`, error);
      return [];
    }
  }

  async getVideocards(): Promise<any[]> {
    return this.fetchCategory('videocards', '–≤–∏–¥–µ–æ–∫–∞—Ä—Ç');
  }

  async getProcessors(): Promise<any[]> {
    return this.fetchCategory('processors', '–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤');
  }

  async getMotherboards(): Promise<any[]> {
    return this.fetchCategory('motherboards', '–º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏—Ö –ø–ª–∞—Ç');
  }
} 