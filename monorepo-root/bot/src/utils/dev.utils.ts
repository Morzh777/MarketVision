// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è dev —Ä–µ–∂–∏–º–∞
export class DevUtils {
  private static isDevMode = process.env.NODE_ENV === 'development' || process.env.DEV_MODE === 'true';
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ dev —Ä–µ–∂–∏–º–∞
  static isDev(): boolean {
    return this.isDevMode;
  }
  
  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  static log(message: string, data?: any): void {
    if (this.isDev()) {
      const timestamp = new Date().toISOString();
      console.log(`üîç [DEV] ${timestamp} - ${message}`);
      if (data) {
        console.log('üìä Data:', JSON.stringify(data, null, 2));
      }
    }
  }
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
  static error(message: string, error?: any): void {
    if (this.isDev()) {
      const timestamp = new Date().toISOString();
      console.error(`‚ùå [DEV ERROR] ${timestamp} - ${message}`);
      if (error) {
        console.error('üö® Error details:', error);
      }
    }
  }
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤
  static logApiRequest(method: string, url: string, data?: any): void {
    if (this.isDev()) {
      console.log(`üåê [API REQUEST] ${method} ${url}`);
      if (data) {
        console.log('üì§ Request data:', JSON.stringify(data, null, 2));
      }
    }
  }
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –æ—Ç–≤–µ—Ç–æ–≤
  static logApiResponse(status: number, data?: any): void {
    if (this.isDev()) {
      const emoji = status >= 200 && status < 300 ? '‚úÖ' : '‚ùå';
      console.log(`${emoji} [API RESPONSE] ${status}`);
      if (data) {
        console.log('üì• Response data:', JSON.stringify(data, null, 2));
      }
    }
  }
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏–π
  static logTelegramMessage(chatId: number, message: string): void {
    if (this.isDev()) {
      console.log(`üì± [TELEGRAM] Chat ${chatId}: ${message.substring(0, 100)}${message.length > 100 ? '...' : ''}`);
    }
  }
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  static logPerformance(operation: string, startTime: number): void {
    if (this.isDev()) {
      const duration = Date.now() - startTime;
      console.log(`‚ö° [PERF] ${operation}: ${duration}ms`);
    }
  }
  
  // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  static getMockProducts(category: string): any[] {
    return [
      {
        id: 'mock-1',
        name: `Mock ${category} Product 1`,
        price: 50000,
        brand: 'MockBrand',
        supplier: 'MockSupplier',
        productUrl: 'https://example.com/1'
      },
      {
        id: 'mock-2', 
        name: `Mock ${category} Product 2`,
        price: 75000,
        brand: 'MockBrand',
        supplier: 'MockSupplier',
        productUrl: 'https://example.com/2'
      }
    ];
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
  static async checkServicesHealth(): Promise<void> {
    if (!this.isDev()) return;
    
    console.log('üè• [HEALTH CHECK] –ü—Ä–æ–≤–µ—Ä–∫–∞ Product-Filter-Service...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ Product-Filter-Service (–ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞)
      const response = await fetch('http://localhost:3001', { 
        method: 'HEAD'
      });
      
      if (response.ok || response.status === 404) {
        // 404 —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –∑–Ω–∞—á–∏—Ç —Å–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –Ω–µ—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
        console.log('‚úÖ Product-Filter-Service: OK');
      } else {
        console.log('‚ùå Product-Filter-Service: DOWN');
      }
    } catch (error) {
      console.log('‚ùå Product-Filter-Service: ERROR', error);
    }
  }
} 