import 'dotenv/config';
import TelegramBot from 'node-telegram-bot-api';
import fetch from 'node-fetch';

const TOKEN = "8055367223:AAFWLKg1wwRwwn81jSVzq9OuKMS1qxo0rtM";
// URL –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Next.js UI)
const WEB_APP_URL = "https://marketvision.loca.lt";
// –ü—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ Nginx –≤–Ω—É—Ç—Ä–∏ docker-—Å–µ—Ç–∏ (–ø–æ—Ä—Ç 8080 –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
const GATEWAY_URL = 'http://marketvision-nginx-proxy:8080';

if (!TOKEN) {
  console.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω TG_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

if (!WEB_APP_URL) {
  console.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω WEB_APP_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

console.log('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
console.log('üîó WEB_APP_URL:', WEB_APP_URL);

const bot = new TelegramBot(TOKEN, { polling: true });

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
bot.setMyCommands([
  { command: 'app', description: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å MarketVision' }
]);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –º–µ–Ω—é
bot.onText(/\/reset/, (msg) => {
  const chatId = msg.chat.id;
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é (—ç—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç —Å—Ç–∞—Ä–æ–µ)
  bot.setMyCommands([
    { command: 'app', description: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å MarketVision' }
  ]);
  
  bot.sendMessage(chatId, 'üîÑ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–∞ /app');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /app –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot.onText(/\/app/, (msg) => {
  const chatId = msg.chat.id;
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  if (msg.from) {
    console.log('üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', {
      telegram_id: msg.from.id,
      username: msg.from.username,
      first_name: msg.from.first_name,
      last_name: msg.from.last_name
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    saveTelegramUser(msg.from);
    
    // –°–æ–∑–¥–∞–µ–º URL –º–∏–Ω–∏–∞–ø–ø–∞ —Å telegram_id
    const miniAppUrl = `${WEB_APP_URL}?telegram_id=${msg.from.id}`;
    console.log('üîó –°–æ–∑–¥–∞–µ–º URL –º–∏–Ω–∏–∞–ø–ø–∞:', {
      WEB_APP_URL,
      telegram_id: msg.from.id,
      finalUrl: miniAppUrl
    });
    
    // –°–æ–∑–¥–∞–µ–º inline keyboard —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const keyboard = {
      inline_keyboard: [
        [{
          text: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å MarketVision',
          web_app: {
            url: miniAppUrl
          }
        }]
      ]
    };
    
    bot.sendMessage(chatId, 
      'üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å MarketVision:',
      { reply_markup: keyboard }
    );
  }
});

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function saveTelegramUser(from: TelegramBot.User) {
  try {
    const userData = {
      telegram_id: from.id.toString()
    };

    console.log('üíæ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ API:', userData);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Nginx (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–µ—Ç—å)
    const url = `${GATEWAY_URL.replace(/\/$/, '')}/api/auth/telegram`;
    console.log('üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      GATEWAY_URL,
      finalUrl: url,
      userData
    });
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(userData)
    });

    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω —á–µ—Ä–µ–∑ gateway:', result);
    } else {
      const errText = await response.text().catch(() => '');
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ gateway:', url, response.status, response.statusText, errText);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è web_app_data (–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É Mini App)
bot.on('web_app_data', (msg) => {
  const chatId = msg.chat.id;
  console.log('üì± –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini App:', msg.web_app_data);
  
  bot.sendMessage(chatId, 
    '‚úÖ Mini App –æ—Ç–∫—Ä—ã—Ç! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MarketVision.'
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
bot.on('callback_query', (callbackQuery) => {
  const chatId = callbackQuery.message?.chat.id;
  const data = callbackQuery.data;
  
  if (chatId) {
    console.log('üîò –ù–∞–∂–∞—Ç–∞ inline –∫–Ω–æ–ø–∫–∞:', data);
    
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    bot.answerCallbackQuery(callbackQuery.id);
    
    if (data === 'open_app') {
      bot.sendMessage(chatId, 'üöÄ –û—Ç–∫—Ä—ã–≤–∞—é MarketVision...');
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.error('‚ùå Polling error:', error);
});

bot.on('webhook_error', (error) => {
  console.error('‚ùå Webhook error:', error);
});

console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  bot.stopPolling();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  bot.stopPolling();
  process.exit(0);
}); 