import { PostQueueService, Post } from './post-queue.service';
import { VideocardsService } from './videocards.service';
import { ProcessorsService } from './processors.service';
import { MotherboardsService } from './motherboards.service';
import { TemplateImageGeneratorSharpService } from './template-image-generator-sharp.service';
import * as TelegramBot from 'node-telegram-bot-api';
import process from 'process';

export class SchedulerService {
  private isRunning = false;
  private isPaused = false; // üéØ –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—É–∑—ã
  private imageGenerator: TemplateImageGeneratorSharpService;

  constructor(
    private postQueue: PostQueueService,
    private videocardsService: VideocardsService,
    private processorsService: ProcessorsService,
    private motherboardsService: MotherboardsService,
    private bot: TelegramBot,
    private chatId: string
  ) {
    this.imageGenerator = new TemplateImageGeneratorSharpService();
    console.log('üóìÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–∑–¥–∞–Ω');
    // Product-Filter-Service —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –∏—Å—Ç–æ—Ä–∏–∏
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
  start() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    this.isRunning = true;
    console.log('üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω');

    // Keep-alive –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    setInterval(() => {
      this.keepAlive();
    }, 10 * 60 * 1000);

    // üöÄ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–π —á–∞—Å, –ø–æ—Å—Ç–∏–Ω–≥ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–¥–æ–∫
    this.scheduleContinuousParsing();
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
  stop() {
    this.isRunning = false;
    console.log('‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  // üéØ –ü–∞—É–∑–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞ (–¥–ª—è —Ä–µ–∫–ª–∞–º—ã)
  pause() {
    this.isPaused = true;
    console.log('‚è∏Ô∏è –ü–æ—Å—Ç–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  // üéØ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç–∏–Ω–≥
  resume() {
    this.isPaused = false;
    console.log('‚ñ∂Ô∏è –ü–æ—Å—Ç–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω');
  }

  // üéØ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—É–∑—ã
  isPostingPaused(): boolean {
    return this.isPaused;
  }

  // üöÄ –ù–û–í–´–ô –ú–ï–¢–û–î: –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–π —á–∞—Å
  private scheduleContinuousParsing() {
    console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–π —á–∞—Å');
    
    // –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª
    this.parseAllCategories();
    
    // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
    setInterval(() => {
      this.parseAllCategories();
    }, 60 * 60 * 1000); // 60 –º–∏–Ω—É—Ç
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  private async parseCategory(service: any, method: string, category: string, logName: string) {
    try {
      console.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ ${logName}...`);
      const results = await service[method]();
      let added = 0, urgent = 0, skipped = 0, priceIncreased = 0;
      const total = results.length, barLength = 20;
      for (let i = 0; i < results.length; i++) {
        const result = results[i];
        // Product-Filter-Service —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª —Ç–æ–≤–∞—Ä—ã –ø–æ –∏—Å—Ç–æ—Ä–∏–∏
        
        // üö´ –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Ä–æ—Å—Ç–æ–º —Ü–µ–Ω (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —ç—Ç–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ)
        if (result.previousPrice && result.previousPrice < result.price) {
          priceIncreased++;
          console.log(`üìà –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (—Ä–æ—Å—Ç —Ü–µ–Ω—ã): ${result.name} - –±—ã–ª–æ ${result.previousPrice}‚ÇΩ ‚Üí —Å—Ç–∞–ª–æ ${result.price}‚ÇΩ`);
          continue;
        }
        
        const post = this.postQueue.createPost(category, result, result.previousPrice, result.discount);
        if (post.priority === 'urgent') { this.postQueue.addUrgentPost(post); urgent++; added++; }
        else if (post.priority === 'normal') { this.postQueue.addToQueue(post); added++; }
        
        // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        const progress = Math.round(((i + 1) / total) * barLength);
        const bar = '[' + '#'.repeat(progress) + '-'.repeat(barLength - progress) + `] ${i + 1}/${total}`;
        process.stdout.write(`\r${bar}`);
      }
      process.stdout.write('\n');
      console.log(`‚úÖ ${logName}: –Ω–∞–π–¥–µ–Ω–æ ${total}, –¥–æ–±–∞–≤–ª–µ–Ω–æ ${added} (—Å—Ä–æ—á–Ω—ã—Ö: ${urgent}), –ø—Ä–æ–ø—É—â–µ–Ω–æ ${skipped}, —Ä–æ—Å—Ç —Ü–µ–Ω ${priceIncreased}`);
      
      // üöÄ –°–†–ê–ó–£ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (added > 0) {
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${added} –ø–æ—Å—Ç–æ–≤ –¥–ª—è ${logName}...`);
        await this.sendAllPosts();
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${logName}:`, error);
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
  private async parseAllCategories() {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    try {
      await this.parseCategory(this.videocardsService, 'getProducts', 'videocards', '–≤–∏–¥–µ–æ–∫–∞—Ä—Ç');
      await this.parseCategory(this.processorsService, 'getProducts', 'processors', '–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤');
      await this.parseCategory(this.motherboardsService, 'getProducts', 'motherboards', '–º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏—Ö –ø–ª–∞—Ç');
      console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
  private async sendAllPosts() {
    try {
      console.log('üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏...');
      
      let sentCount = 0;
      while (true) {
        // üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –ø–æ—Å—Ç–æ–º
        if (this.isPaused) {
          console.log('‚è∏Ô∏è –ü–æ—Å—Ç–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∂–¥–µ–º –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
          await new Promise(resolve => setTimeout(resolve, 30 * 1000)); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
          continue;
        }

        const post = this.postQueue.getNextPost();
        if (!post) {
          console.log('üì≠ –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤ –ø—É—Å—Ç–∞');
          break;
        }

        // Product-Filter-Service —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª –∏—Å—Ç–æ—Ä–∏—é

        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç: ${post.category} - ${post.title}`);
        
        const message = this.formatPostMessage(post);
        const options: any = { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üîÑ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', switch_inline_query: post.title }
              ],
              [
                { text: 'üõí –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä', url: post.productUrl }
              ]
            ]
          }
        };
        
        // üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        console.log(`üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ—Å—Ç–∞: ${post.title}`);
        console.log(`üì∑ PhotoUrl: ${post.photoUrl || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
        console.log(`üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${post.supplier || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        
        try {
          const imageBuffer = await this.imageGenerator.generateProductImage({
            title: post.title,
            brand: post.brand,
            supplier: post.supplier,
            price: post.price,
            previousPrice: post.previousPrice,
            discount: post.discount,
            imageUrl: post.photoUrl,
            category: post.category
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          options.caption = message;
          await this.bot.sendPhoto(this.chatId, imageBuffer, { 
            ...options,
            filename: 'product-image.png'
          });
          console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: ${post.title}`);
        } catch (imageError: any) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è ${post.title}:`, imageError.message);
          
          // Fallback: –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
          if (post.photoUrl) {
            try {
              options.caption = message;
              await this.bot.sendPhoto(this.chatId, post.photoUrl, options);
            } catch (photoError: any) {
              console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è ${post.title}:`, photoError.message);
              console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ`);
              // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ
              await this.bot.sendMessage(this.chatId, message, options);
            }
          } else {
            await this.bot.sendMessage(this.chatId, message, options);
          }
        }

        // Product-Filter-Service —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–π

        sentCount++;
        
        // üéØ –£–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        const interval = this.postQueue.getPostingInterval(post);
        const intervalMinutes = Math.round(interval / (60 * 1000));
        console.log(`‚è∞ –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ ${intervalMinutes} –º–∏–Ω—É—Ç (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${post.priority})`);
        await new Promise(resolve => setTimeout(resolve, interval));
      }

      console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: ${sentCount}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤:', error);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç (—Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç–∏–Ω–≥)
  private async sendNextPost() {
    try {
      const post = this.postQueue.getNextPost();
      if (!post) {
        console.log('üì≠ –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤ –ø—É—Å—Ç–∞');
        return;
      }

      // Product-Filter-Service —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª –∏—Å—Ç–æ—Ä–∏—é

      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç: ${post.category} - ${post.title}`);
      
      const message = this.formatPostMessage(post);
      const options: any = { 
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è', switch_inline_query: post.title }
            ],
            [
              { text: 'üõí –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä', url: post.productUrl }
            ]
          ]
        }
      };
      
      // üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      console.log(`üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ—Å—Ç–∞: ${post.title}`);
      console.log(`üì∑ PhotoUrl: ${post.photoUrl || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
      console.log(`üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫: ${post.supplier || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      
      try {
        const imageBuffer = await this.imageGenerator.generateProductImage({
          title: post.title,
          brand: post.brand,
          supplier: post.supplier,
          price: post.price,
          previousPrice: post.previousPrice,
          discount: post.discount,
          imageUrl: post.photoUrl,
          category: post.category
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        options.caption = message;
        await this.bot.sendPhoto(this.chatId, imageBuffer, { 
          ...options,
          filename: 'product-image.png'
        });
        console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: ${post.title}`);
      } catch (imageError: any) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è ${post.title}:`, imageError.message);
        
        // Fallback: –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (post.photoUrl) {
          try {
            options.caption = message;
            await this.bot.sendPhoto(this.chatId, post.photoUrl, options);
          } catch (photoError: any) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è ${post.title}:`, photoError.message);
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ`);
            // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ
            await this.bot.sendMessage(this.chatId, message, options);
          }
        } else {
          await this.bot.sendMessage(this.chatId, message, options);
        }
      }

      // Product-Filter-Service —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–π

      console.log(`‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${post.title}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞:', error);
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–∞
  private formatPostMessage(post: Post): string {
    const title = post.title;
    const brand = post.brand;
    const supplier = post.supplier;
    const channelUrl = process.env.CHANNEL_URL || 'https://t.me/your_channel_username';

    const categoryMap: Record<string, string> = {
      videocards: '–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞',
      processors: '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä',
      motherboards: '–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞',
      ram: '–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å',
    };
    const categoryName = categoryMap[post.category] || '–¢–æ–≤–∞—Ä';
    
    let priceString = '';
    const newPrice = `*${post.price.toLocaleString('ru-RU')} ‚ÇΩ*`;

    if (post.previousPrice && post.previousPrice > post.price) {
      const oldPrice = `~~${post.previousPrice.toLocaleString('ru-RU')} ‚ÇΩ~~`;
      const savings = post.previousPrice - post.price;
      const discountPercent = post.discount !== undefined && post.discount > 0 ? post.discount : 
        Math.round(((post.previousPrice - post.price) / post.previousPrice) * 100);
      
      // üî• –î–µ–ª–∞–µ–º —Å–∫–∏–¥–∫–∏ –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–º–∏ - –Ω–æ–≤—ã–π –ø—Ä–∞–π—Å –≤–ø–µ—Ä–µ–¥–∏, —Å—Ç–∞—Ä—ã–π –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Å–∑–∞–¥–∏
      if (discountPercent >= 10) {
        priceString = `üìâ ${newPrice} ‚Üí ${oldPrice} (*-${discountPercent}%*, —ç–∫–æ–Ω–æ–º–∏—è *${savings.toLocaleString('ru-RU')} ‚ÇΩ*)`;
      } else if (discountPercent >= 5) {
        priceString = `üìâ ${newPrice} ‚Üí ${oldPrice} (*-${discountPercent}%*, —ç–∫–æ–Ω–æ–º–∏—è *${savings.toLocaleString('ru-RU')} ‚ÇΩ*)`;
      } else {
        priceString = `üìâ ${newPrice} ‚Üí ${oldPrice} (—ç–∫–æ–Ω–æ–º–∏—è *${savings.toLocaleString('ru-RU')} ‚ÇΩ*)`;
      }
    } else if (!post.previousPrice) {
      // –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä - —É–±–∏—Ä–∞–µ–º (–ù–æ–≤–∏–Ω–∫–∞)
      priceString = `${newPrice}`;
    } else {
      priceString = newPrice;
    }
    
    let message = `üî• *${title}*\n`;
    if (brand && brand.toLowerCase() !== 'unknown') {
      message += `*–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:* ${brand}\n\n`;
    }
    if (supplier && supplier.trim() !== '') {
      message += `üè™ *–ú–∞–≥–∞–∑–∏–Ω:* ${supplier}\n\n`;
    }
    message += `üí∞ *–¶–µ–Ω–∞:* ${priceString}\n\n`;
    message += `üì¢ [–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª](${channelUrl})`;
    
    return message;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  getStats() {
    const queueStats = this.postQueue.getQueueStats();
    return {
      isRunning: this.isRunning,
      queue: queueStats
    };
  }

  // Keep-alive —Ñ—É–Ω–∫—Ü–∏—è
  private keepAlive() {
    const now = new Date().toLocaleString('ru-RU');
    console.log(`üíì Keep-alive: ${now} - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç`);
  }
}