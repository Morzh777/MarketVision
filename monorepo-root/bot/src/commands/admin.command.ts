import TelegramBot from 'node-telegram-bot-api';
import { SchedulerService } from '../services/scheduler.service';

const ADMIN_ID = '69884361'; // ID –∞–¥–º–∏–Ω–∞

export class AdminCommand {
  constructor(
    private bot: TelegramBot,
    private createScheduler: (chatId: string) => SchedulerService
  ) {}

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
  private isAdmin(userId: string): boolean {
    return userId === ADMIN_ID;
  }

  // –ü–æ–ª—É—á–∏—Ç—å scheduler
  private getScheduler(chatId: string): SchedulerService {
    return this.createScheduler(chatId);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
  async handleCommand(msg: any) {
    const userId = msg.from.id.toString();
    const text = msg.text;
    
    // –ö–æ–º–∞–Ω–¥–∞ /app –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    if (text === '/app') {
      await this.openMiniApp(msg.chat.id);
      return;
    }
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if (!this.isAdmin(userId)) {
      await this.bot.sendMessage(msg.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      return;
    }

    if (text === '/admin') {
      await this.showAdminMenu(msg.chat.id);
    } else if (text === '/admin_start') {
      await this.startBot(msg.chat.id);
    } else if (text === '/admin_stop') {
      await this.stopBot(msg.chat.id);
    } else if (text === '/admin_pause') {
      await this.pausePosting(msg.chat.id);
    } else if (text === '/admin_resume') {
      await this.resumePosting(msg.chat.id);
    } else if (text === '/admin_status') {
      await this.showStatus(msg.chat.id);
    } else if (text === '/admin_test') {
      await this.testParsing(msg.chat.id);
    } else if (text === '/admin_clear') {
      await this.clearQueue(msg.chat.id);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
  async handleCallback(callbackQuery: any) {
    const userId = callbackQuery.from.id.toString();
    
    if (!this.isAdmin(userId)) {
      await this.bot.answerCallbackQuery(callbackQuery.id, { text: '‚ùå –ù–µ—Ç –ø—Ä–∞–≤' });
      return;
    }

    const data = callbackQuery.data;
    const chatId = callbackQuery.message.chat.id;

    try {
      switch (data) {
        case 'admin_start':
          await this.startBot(chatId);
          break;
        case 'admin_stop':
          await this.stopBot(chatId);
          break;
        case 'admin_pause':
          await this.pausePosting(chatId);
          break;
        case 'admin_resume':
          await this.resumePosting(chatId);
          break;
        case 'admin_status':
          await this.showStatus(chatId);
          break;
        case 'admin_test':
          await this.testParsing(chatId);
          break;
        case 'admin_clear':
          await this.clearQueue(chatId);
          break;
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram, —á—Ç–æ callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω
      await this.bot.answerCallbackQuery(callbackQuery.id);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
      await this.bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
  private async showAdminMenu(chatId: string) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å', callback_data: 'admin_start' },
          { text: '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_stop' }
        ],
        [
          { text: '‚è∏Ô∏è –ü–∞—É–∑–∞', callback_data: 'admin_pause' },
          { text: '‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_resume' }
        ],
        [
          { text: 'üìä –°—Ç–∞—Ç—É—Å', callback_data: 'admin_status' },
          { text: 'üß™ –¢–µ—Å—Ç', callback_data: 'admin_test' }
        ],
        [
          { text: 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å', callback_data: 'admin_clear' }
        ]
      ]
    };

    const message = `üîß *–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    await this.bot.sendMessage(chatId, message, { 
      parse_mode: 'Markdown',
      reply_markup: keyboard 
    });
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
  private async startBot(chatId: string) {
    const scheduler = this.getScheduler(chatId);
    if (!scheduler) {
      await this.bot.sendMessage(chatId, '‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }
    scheduler.start();
    await this.bot.sendMessage(chatId, 'üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
  private async stopBot(chatId: string) {
    const scheduler = this.getScheduler(chatId);
    if (!scheduler) {
      await this.bot.sendMessage(chatId, '‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }
    scheduler.stop();
    await this.bot.sendMessage(chatId, '‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  // –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç–∏–Ω–≥
  private async pausePosting(chatId: string) {
    const scheduler = this.getScheduler(chatId);
    if (!scheduler) {
      await this.bot.sendMessage(chatId, '‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }
    scheduler.pause();
    await this.bot.sendMessage(chatId, '‚è∏Ô∏è –ü–æ—Å—Ç–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–¥–ª—è —Ä–µ–∫–ª–∞–º—ã)');
  }

  // –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç–∏–Ω–≥
  private async resumePosting(chatId: string) {
    const scheduler = this.getScheduler(chatId);
    if (!scheduler) {
      await this.bot.sendMessage(chatId, '‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }
    scheduler.resume();
    await this.bot.sendMessage(chatId, '‚ñ∂Ô∏è –ü–æ—Å—Ç–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω');
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
  private async showStatus(chatId: string) {
    const scheduler = this.getScheduler(chatId);
    if (!scheduler) {
      await this.bot.sendMessage(chatId, '‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return;
    }
    
    const stats = scheduler.getStats();
    const status = `
üìä –°–¢–ê–¢–£–° –ë–û–¢–ê

–†–∞–±–æ—Ç–∞–µ—Ç: ${stats.isRunning ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}
–ü–∞—É–∑–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞: ${scheduler.isPostingPaused() ? '‚è∏Ô∏è –î–∞' : '‚ñ∂Ô∏è –ù–µ—Ç'}

–û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤:
‚Ä¢ –°—Ä–æ—á–Ω—ã—Ö: ${stats.queue.urgent}
‚Ä¢ –û–±—ã—á–Ω—ã—Ö: ${stats.queue.normal}
‚Ä¢ –í—Å–µ–≥–æ: ${stats.queue.total}
    `;
    
    await this.bot.sendMessage(chatId, status);
  }

  // –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
  private async testParsing(chatId: string) {
    await this.bot.sendMessage(chatId, 'üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥...');
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
  private async clearQueue(chatId: string) {
    // –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –≤ PostQueueService
    await this.bot.sendMessage(chatId, 'üóëÔ∏è –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞');
  }

  // –û—Ç–∫—Ä—ã—Ç—å Mini App
  private async openMiniApp(chatId: string) {
    const webAppUrl = 'https://a846814ae0190971759ab515816af559.serveo.net'; // –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    const keyboard = {
      inline_keyboard: [
        [{
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å MarketVision',
          web_app: { url: webAppUrl }
        }]
      ]
    };

    await this.bot.sendMessage(chatId, 
      'üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å MarketVision Mini App:', 
      { reply_markup: keyboard }
    );
  }
} 