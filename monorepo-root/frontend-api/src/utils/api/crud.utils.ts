import { API_ENDPOINTS, API_BASE_URL } from '@/constants/api'

export interface CrudResponse<T = unknown> {
  success: boolean
  data?: T
  error?: string
  message?: string
}

export interface CrudOptions {
  endpoint: string
  authToken: string
}

export interface CrudData {
  [key: string]: string | number | boolean | null | undefined
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
 */
export async function createRecord<T = unknown>(
  data: CrudData,
  options: CrudOptions
): Promise<CrudResponse<T>> {
  try {
    const url = `${API_BASE_URL}${API_ENDPOINTS.ADMIN}${options.endpoint}`
    console.log('üîÑ createRecord URL:', url)
    console.log('üîÑ createRecord data:', data)
    console.log('üîÑ createRecord authToken:', options.authToken ? 'present' : 'missing')
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${options.authToken}`,
      },
      body: JSON.stringify(data),
    })

    console.log('üì° createRecord response status:', response.status)
    console.log('üì° createRecord response headers:', Object.fromEntries(response.headers.entries()))
    
    const result = await response.json()
    console.log('üì° createRecord response result:', result)

    if (response.ok) {
      return {
        success: true,
        data: result,
        message: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞'
      }
    }

    return {
      success: false,
      error: result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏'
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
 */
export async function updateRecord<T = unknown>(
  id: string,
  data: CrudData,
  options: CrudOptions
): Promise<CrudResponse<T>> {
  try {
    const url = `${API_BASE_URL}${API_ENDPOINTS.ADMIN}${options.endpoint}/${id}`
    console.log('üîÑ updateRecord called:', { id, data, url })
    
    const response = await fetch(url, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${options.authToken}`,
      },
      body: JSON.stringify(data),
    })

    console.log('üì° updateRecord response:', { status: response.status, ok: response.ok })
    const result = await response.json()
    console.log('üìÑ updateRecord result:', result)

    if (response.ok) {
      return {
        success: true,
        data: result,
        message: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
      }
    }

    return {
      success: false,
      error: result.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏'
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
 */
export async function deleteRecord<T = unknown>(
  id: string,
  options: CrudOptions
): Promise<CrudResponse<T>> {
  try {
    const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.ADMIN}${options.endpoint}/${id}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${options.authToken}`,
      },
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result,
        message: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
      }
    }

    return {
      success: false,
      error: result.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏'
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
 */
export async function getRecords<T = unknown>(
  options: Omit<CrudOptions, 'authToken'>
): Promise<CrudResponse<T[]>> {
  try {
    const response = await fetch(`${API_BASE_URL}${API_ENDPOINTS.ADMIN}${options.endpoint}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result,
        message: '–ó–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã'
      }
    }

    return {
      success: false,
      error: result.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π'
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
export const categoryApi = {
  create: (data: CrudData, authToken: string) => 
    createRecord(data, { endpoint: '/categories', authToken }),
  
  update: (id: string, data: CrudData, authToken: string) => 
    updateRecord(id, data, { endpoint: '/categories', authToken }),
  
  delete: (id: string, authToken: string) => 
    deleteRecord(id, { endpoint: '/categories', authToken }),
  
  getAll: () => 
    getRecords({ endpoint: '/categories' })
}

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export const queryApi = {
  create: (data: CrudData, authToken: string) => 
    createRecord(data, { endpoint: '/queries', authToken }),
  
  update: (id: string, data: CrudData, authToken: string) => 
    updateRecord(id, data, { endpoint: '/queries', authToken }),
  
  delete: (id: string, authToken: string) => 
    deleteRecord(id, { endpoint: '/queries', authToken }),
  
  getAll: () => 
    getRecords({ endpoint: '/queries' })
}

// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∫–ª–∏–µ–Ω—Ç)
export async function getQueriesForCategory(categoryKey: string): Promise<unknown[]> {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π API —Ä–æ—É—Ç –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ nginx
    const url = `/api/queries/category/${categoryKey}`
    console.log('üîç getQueriesForCategory URL:', url)
    
    const response = await fetch(url)
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }
    
    const data = await response.json()
    // API —Ä–æ—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º queries
    return Array.isArray(data) ? data : []
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:', error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (SSR)
export async function getQueriesForCategoryServer(categoryKey: string): Promise<unknown[]> {
  try {
    // –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –æ–±—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–ø—Ä—è–º—É—é –∫ nginx
    const url = `http://marketvision-nginx-dev/api/admin/queries?categoryKey=${categoryKey}`
    console.log('üîç getQueriesForCategoryServer URL:', url)
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Å URL —Å—Ö–µ–º–∞–º–∏
      cache: 'no-store',
      next: { revalidate: 0 }
    })
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }
    
    const data = await response.json()
    // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º queries
    return Array.isArray(data) ? data : []
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ URL —Å—Ö–µ–º—ã, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –∏—Ö
    if (error instanceof Error && error.message.includes('Unknown url scheme')) {
      console.warn('‚ö†Ô∏è URL scheme error (ignored):', error.message)
      return [] // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
    }
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', error)
    throw error
  }
}
