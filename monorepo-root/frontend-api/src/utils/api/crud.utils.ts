import { API_ENDPOINTS, createApiUrl } from '@/constants/api'

export interface CrudResponse<T = unknown> {
  success: boolean
  data?: T
  error?: string
  message?: string
}

export interface CrudOptions {
  endpoint: string
  authToken: string
}

export interface CrudData {
  [key: string]: string | number | boolean | null | undefined
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
 */
export async function createRecord<T = unknown>(
  data: CrudData,
  options: CrudOptions
): Promise<CrudResponse<T>> {
  try {
    const url = createApiUrl(`${API_ENDPOINTS.ADMIN}${options.endpoint}`)
    console.log('üîÑ createRecord URL:', url)
    console.log('üîÑ createRecord data:', data)
    console.log('üîÑ createRecord authToken:', options.authToken ? 'present' : 'missing')
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${options.authToken}`,
      },
      body: JSON.stringify(data),
    })

    console.log('üì° createRecord response status:', response.status)
    console.log('üì° createRecord response headers:', Object.fromEntries(response.headers.entries()))
    
    const result = await response.json()
    console.log('üì° createRecord response result:', result)

    if (response.ok) {
      return {
        success: true,
        data: result,
        message: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞'
      }
    }

    return {
      success: false,
      error: result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏'
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
 */
export async function updateRecord<T = unknown>(
  id: string,
  data: CrudData,
  options: CrudOptions
): Promise<CrudResponse<T>> {
  try {
    const url = createApiUrl(`${API_ENDPOINTS.ADMIN}${options.endpoint}/${id}`)
    console.log('üîÑ updateRecord called:', { id, data, url })
    
    const response = await fetch(url, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${options.authToken}`,
      },
      body: JSON.stringify(data),
    })

    console.log('üì° updateRecord response:', { status: response.status, ok: response.ok })
    const result = await response.json()
    console.log('üìÑ updateRecord result:', result)

    if (response.ok) {
      return {
        success: true,
        data: result,
        message: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
      }
    }

    return {
      success: false,
      error: result.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏'
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
 */
export async function deleteRecord<T = unknown>(
  id: string,
  options: CrudOptions
): Promise<CrudResponse<T>> {
  try {
    const response = await fetch(createApiUrl(`${API_ENDPOINTS.ADMIN}${options.endpoint}/${id}`), {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${options.authToken}`,
      },
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result,
        message: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
      }
    }

    return {
      success: false,
      error: result.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏'
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
 */
export async function getRecords<T = unknown>(
  options: Omit<CrudOptions, 'authToken'>
): Promise<CrudResponse<T[]>> {
  try {
    const response = await fetch(createApiUrl(`${API_ENDPOINTS.ADMIN}${options.endpoint}`), {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    })

    const result = await response.json()

    if (response.ok) {
      return {
        success: true,
        data: result,
        message: '–ó–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã'
      }
    }

    return {
      success: false,
      error: result.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π'
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
 */
export const categoryApi = {
  create: (data: CrudData, authToken: string) => 
    createRecord(data, { endpoint: '/categories', authToken }),
  
  update: (id: string, data: CrudData, authToken: string) => 
    updateRecord(id, data, { endpoint: '/categories', authToken }),
  
  delete: (id: string, authToken: string) => 
    deleteRecord(id, { endpoint: '/categories', authToken }),
  
  getAll: () => 
    getRecords({ endpoint: '/categories' })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (SSR)
export async function getQueriesForCategoryServer(categoryKey: string): Promise<unknown[]> {
  try {
    // –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –æ–±—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–ø—Ä—è–º—É—é –∫ nginx
    const url = createApiUrl(`/api/admin/queries?categoryKey=${categoryKey}`)
    console.log('üîç getQueriesForCategoryServer URL:', url)
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Å URL —Å—Ö–µ–º–∞–º–∏
      cache: 'no-store',
      next: { revalidate: 0 }
    })
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }
    
    const data = await response.json()
    // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º queries
    return Array.isArray(data) ? data : []
  } catch (error) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ URL —Å—Ö–µ–º—ã, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –∏—Ö
    if (error instanceof Error && error.message.includes('Unknown url scheme')) {
      console.warn('‚ö†Ô∏è URL scheme error (ignored):', error.message)
      return [] // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
    }
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ (–∫–ª–∏–µ–Ω—Ç)
export async function createQuery(data: CrudData): Promise<CrudResponse> {
  try {
    console.log('üîç createQuery - –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data)
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π DB API
    const queryData = {
      categoryKey: data.category, // DB API –æ–∂–∏–¥–∞–µ—Ç categoryKey, –∞ –Ω–µ category
      query: data.query,
      platform: data.platform || 'both', // DB API –æ–∂–∏–¥–∞–µ—Ç 'both' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–µ–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
      recommended_price: data.recommended_price || null,
      // –û—Ç–¥–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      ozon_platform: data.ozon_platform || null,
      ozon_exact: data.ozon_exact || null,
      wb_platform: data.wb_platform || null,
      wb_exact: data.wb_exact || null,
    }
    
    console.log('üîç createQuery - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', queryData)
    
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
    }
    
    const response = await fetch('/api/admin/queries', {
      method: 'POST',
      headers,
      credentials: 'include', // –ü–µ—Ä–µ–¥–∞–µ–º cookies
      body: JSON.stringify(queryData),
    })

    const result = await response.json()
    console.log('üîç createQuery - –æ—Ç–≤–µ—Ç –æ—Ç API:', { status: response.status, result })

    if (response.ok) {
      return {
        success: true,
        data: result,
        message: '–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
      }
    }

    return {
      success: false,
      error: result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞'
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ (–∫–ª–∏–µ–Ω—Ç)
export async function updateQuery(id: string, data: CrudData): Promise<CrudResponse> {
  try {
    console.log('üîç updateQuery - ID:', id, '–¥–∞–Ω–Ω—ã–µ:', data)
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–ø—Ä–æ—Å–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const query = data.query
    const oldQuery = data.oldQuery || data.query // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –ø–æ–∏—Å–∫–∞
    const categoryKey = data.categoryKey || data.category
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π DB API
    const queryData = {
      query: query, // –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
      ozon_platform: data.ozon_platform || null,
      ozon_exact: data.ozon_exact || null,
      wb_platform: data.wb_platform || null,
      wb_exact: data.wb_exact || null,
      recommended_price: data.recommended_price || null,
    }
    
    console.log('üîç updateQuery - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', queryData)
    
    if (!query || !categoryKey) {
      return {
        success: false,
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (query –∏ categoryKey –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã)'
      }
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    const searchQuery = oldQuery || query
    
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
    }
    
    const response = await fetch(`/api/admin/queries/query/${encodeURIComponent(searchQuery)}?categoryKey=${categoryKey}`, {
      method: 'PUT',
      headers,
      credentials: 'include', // –ü–µ—Ä–µ–¥–∞–µ–º cookies
      body: JSON.stringify(queryData),
    })

    const result = await response.json()
    console.log('üîç updateQuery - –æ—Ç–≤–µ—Ç –æ—Ç API:', { status: response.status, result })

    if (response.ok) {
      return {
        success: true,
        data: result,
        message: '–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
      }
    }

    return {
      success: false,
      error: result.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞'
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ (–∫–ª–∏–µ–Ω—Ç)
export async function deleteQuery(id: string, queryName?: string, categoryKey?: string): Promise<CrudResponse> {
  try {
    console.log('üîç deleteQuery - ID:', id, 'queryName:', queryName, 'categoryKey:', categoryKey)
    
    let query = queryName
    let category = categoryKey
    
    // –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –ø–æ ID
    if (!query || !category) {
      console.log('üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –ø–æ ID')
      const getResponse = await fetch(`/api/admin/queries/${id}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      })

      if (!getResponse.ok) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –ø–æ ID')
        return {
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ'
        }
      }

      const queryInfo = await getResponse.json()
      console.log('üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', queryInfo)
      query = queryInfo.query
      category = queryInfo.category.key
    }

    if (!query || !category) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
      return {
        success: false,
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'
      }
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —ç—Ç–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const response = await fetch(`/api/admin/queries/path/${encodeURIComponent(query)}?categoryKey=${category}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
      },
    })

    const result = await response.json()
    console.log('üîç deleteQuery - –æ—Ç–≤–µ—Ç –æ—Ç API:', { status: response.status, result })

    if (response.ok) {
      return {
        success: true,
        data: result,
        message: '–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
      }
    }

    return {
      success: false,
      error: result.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞'
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error)
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
    }
  }
}

