import { NextRequest, NextResponse } from 'next/server'
import type { UpdateQueryRequest } from '@/shared/types/queries.interface'

/**
 * PUT /api/queries/[id] - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
 */
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params
    const body: UpdateQueryRequest = await request.json()

    if (!id) {
      return NextResponse.json(
        { 
          success: false, 
          error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä id' 
        },
        { status: 400 }
      )
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!body.query || !body.platform || !body.categoryKey) {
      return NextResponse.json(
        { 
          success: false, 
          error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: query, platform, categoryKey' 
        },
        { status: 400 }
      )
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    if (!['ozon', 'wb', 'both'].includes(body.platform)) {
      return NextResponse.json(
        { 
          success: false, 
          error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ platform. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ozon, wb, both' 
        },
        { status: 400 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const authHeader = request.headers.get('authorization')
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json(
        { 
          success: false, 
          error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' 
        },
        { status: 401 }
      )
    }

    const authToken = authHeader.replace('Bearer ', '')

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ DB API
    const queryData = {
      id: parseInt(id),
      query: body.query.trim(),
      platform: body.platform,
      platform_id: body.platform_id || null,
      exactmodels: body.exactmodels || null,
      wb_platform_id: body.wb_platform_id || null,
      wb_exactmodels: body.wb_exactmodels || null,
      recommended_price: body.recommended_price || null,
      categoryKey: body.categoryKey,
      isGroup: body.isGroup || false,
      groupIds: body.groupIds || []
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ DB API —á–µ—Ä–µ–∑ nginx
    const dbApiUrl = `http://marketvision-nginx-dev/api/admin/queries/${id}`
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ DB API:', { id, url: dbApiUrl, data: queryData })

    const response = await fetch(dbApiUrl, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`,
      },
      body: JSON.stringify(queryData),
    })

    const result = await response.json()
    console.log('üì° DB API response:', { status: response.status, result })

    if (!response.ok) {
      return NextResponse.json(
        { 
          success: false, 
          error: result.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ DB API' 
        },
        { status: response.status }
      )
    }

    return NextResponse.json({
      success: true,
      data: result,
      message: '–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
      },
      { status: 500 }
    )
  }
}

/**
 * DELETE /api/queries/[id] - –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
 */
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params

    if (!id) {
      return NextResponse.json(
        { 
          success: false, 
          error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä id' 
        },
        { status: 400 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const authHeader = request.headers.get('authorization')
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json(
        { 
          success: false, 
          error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' 
        },
        { status: 401 }
      )
    }

    const authToken = authHeader.replace('Bearer ', '')

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ DB API —á–µ—Ä–µ–∑ nginx
    const dbApiUrl = `http://marketvision-nginx-dev/api/admin/queries/${id}`
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ DB API:', { id, url: dbApiUrl })

    const response = await fetch(dbApiUrl, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`,
      },
    })

    const result = await response.json()
    console.log('üì° DB API response:', { status: response.status, result })

    if (!response.ok) {
      return NextResponse.json(
        { 
          success: false, 
          error: result.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ DB API' 
        },
        { status: response.status }
      )
    }

    return NextResponse.json({
      success: true,
      data: result,
      message: '–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
      },
      { status: 500 }
    )
  }
}
