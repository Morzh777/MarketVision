import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { jwtDecode } from 'jwt-decode'
import { API } from '@/config'

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const SKIP_ROUTES = ['/api/', '/_next/', '/favicon.ico']
const TELEGRAM_COOKIE_CONFIG = {
  httpOnly: false,
  secure: false, // –î–ª—è dev —Ä–µ–∂–∏–º–∞
  sameSite: 'lax' as const,
  maxAge: 60 * 60 * 24 * 7, // 7 –¥–Ω–µ–π
  path: '/',
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –±–µ–∑ debounce

// –£—Ç–∏–ª–∏—Ç—ã
const shouldSkipRoute = (pathname: string, routes: string[]) => {
  return routes.some(route => pathname.startsWith(route))
}

const handleTelegramId = (telegramId: string | null, response: NextResponse) => {
  if (!telegramId) return response
  
  response.cookies.delete('telegram_id')
  response.cookies.set('telegram_id', telegramId, TELEGRAM_COOKIE_CONFIG)
  
  return response
}

const isTokenExpired = (token: string): boolean => {
  try {
    const decoded = jwtDecode(token) as { exp?: number }
    if (!decoded.exp) return true
    return decoded.exp * 1000 < Date.now()
  } catch {
    return true
  }
}

const isTokenExpiringSoon = (token: string, minutesBeforeExpiry: number = 3): boolean => {
  try {
    const decoded = jwtDecode(token) as { exp?: number }
    if (!decoded.exp) return true
    
    const expiryTime = decoded.exp * 1000
    const currentTime = Date.now()
    const timeUntilExpiry = expiryTime - currentTime
    const minutesUntilExpiry = timeUntilExpiry / (1000 * 60)
    
    return minutesUntilExpiry <= minutesBeforeExpiry
  } catch {
    return true
  }
}

const performRefresh = async (request: NextRequest): Promise<NextResponse | null> => {
  try {
    const refreshToken = request.cookies.get('refresh_token')?.value
    console.log('üîÑ performRefresh: refreshToken exists:', !!refreshToken)
    
    if (!refreshToken) {
      console.log('‚ùå performRefresh: no refresh token')
      return null
    }

    console.log('üîÑ performRefresh: calling /api/admin/refresh')
    const response = await fetch(`${request.nextUrl.origin}/api/admin/refresh`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ refresh_token: refreshToken }),
    })

    console.log('üîÑ performRefresh: response status:', response.status)
    
    if (response.ok) {
      const newCookies = response.headers.get('set-cookie')
      console.log('üîÑ performRefresh: set-cookie header:', newCookies)
      
      if (newCookies) {
        const nextResponse = NextResponse.next()
        // –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫—É–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ refresh
        const cookieHeaders = newCookies.split(',')
        console.log('üîÑ performRefresh: parsed cookies:', cookieHeaders.length)
        
        cookieHeaders.forEach(cookie => {
          const [nameValue] = cookie.trim().split(';')
          const [name, value] = nameValue.split('=')
          if (name && value) {
            console.log('üîÑ performRefresh: setting cookie:', name.trim())
            nextResponse.cookies.set(name.trim(), value.trim(), {
              httpOnly: true,
              secure: process.env.NODE_ENV === 'production',
              sameSite: 'lax',
              path: '/',
            })
          }
        })
        console.log('‚úÖ performRefresh: success')
        return nextResponse
      } else {
        console.log('‚ùå performRefresh: no set-cookie header')
      }
    } else {
      console.log('‚ùå performRefresh: response not ok:', response.status)
    }
  } catch (error) {
    console.log('‚ùå performRefresh: error:', error)
  }
  return null
}

const refreshTokens = async (request: NextRequest): Promise<NextResponse | null> => {
  // –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
  return await performRefresh(request)
}

const checkAuth = async (pathname: string, request: NextRequest) => {
  if (pathname.startsWith('/admin') && pathname !== '/admin/login') {
    const authToken = request.cookies.get('auth')?.value
    const refreshToken = request.cookies.get('refresh_token')?.value
    
    console.log('üîç Middleware check:', { 
      pathname, 
      hasAuth: !!authToken, 
      hasRefresh: !!refreshToken,
      authExpired: authToken ? isTokenExpired(authToken) : 'no token',
      authExpiringSoon: authToken ? isTokenExpiringSoon(authToken, 3) : 'no token'
    })
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤–æ–æ–±—â–µ
    if (!authToken && !refreshToken) {
      console.log('‚ùå No tokens, redirecting to login')
      return NextResponse.redirect(new URL('/admin/login', request.url))
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å auth —Ç–æ–∫–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    if (authToken && !isTokenExpired(authToken)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–∞–µ—Ç –ª–∏ —Ç–æ–∫–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –º–∏–Ω—É—Ç—ã
      if (isTokenExpiringSoon(authToken, 3) && refreshToken) {
        console.log('üîÑ Token expiring soon, refreshing...')
        const refreshResponse = await refreshTokens(request)
        if (refreshResponse) {
          console.log('‚úÖ Token refreshed successfully')
          return refreshResponse // –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ —Ç–æ–∫–µ–Ω—ã –∑–∞—Ä–∞–Ω–µ–µ
        }
      }
      console.log('‚úÖ Auth token valid')
      return null // –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω
    }
    
    // –ï—Å–ª–∏ auth —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –µ—Å—Ç—å refresh —Ç–æ–∫–µ–Ω
    if (refreshToken) {
      console.log('üîÑ Auth token expired, refreshing...')
      const refreshResponse = await refreshTokens(request)
      if (refreshResponse) {
        console.log('‚úÖ Token refreshed successfully')
        return refreshResponse // –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª–∏ —Ç–æ–∫–µ–Ω—ã
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
    console.log('‚ùå Failed to refresh tokens, redirecting to login')
    return NextResponse.redirect(new URL('/admin/login', request.url))
  }
  
  return null
}

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl
  const telegramId = request.nextUrl.searchParams.get('telegram_id')
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ä–æ—É—Ç—ã
  if (shouldSkipRoute(pathname, SKIP_ROUTES)) {
    return NextResponse.next()
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º telegram_id
  if (telegramId) {
    const response = NextResponse.next()
    return handleTelegramId(telegramId, response)
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º refresh
  const authResponse = await checkAuth(pathname, request)
  if (authResponse) {
    return authResponse
  }
  
  return NextResponse.next()
}

export const config = {
  matcher: [
    '/admin/:path*',
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
}