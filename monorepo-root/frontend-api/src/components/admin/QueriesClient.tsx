'use client'

import React, { useState, useMemo } from 'react'
import type { QueryConfig, Category, CreateQueryRequest } from '@/shared/types/queries.interface'
import type { EditingQuery } from '@/shared/types/modal.interface'
import { createQuery, updateQuery, deleteQuery } from '@/utils/api/crud.utils'
import AddModal from './AddModal'
import ConfirmModal from './ConfirmModal'
import CustomSelect from '@/components/ui/CustomSelect'
import { EditIcon, DeleteIcon, PlusIcon } from '@/components/ui/Icons'
import '@/app/styles/components/Queries.scss'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
interface GroupedQuery {
  query: string
  platforms: QueryConfig[]
  latestUpdated: string
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤
const truncateText = (text: string | undefined, maxLength: number = 10): string => {
  if (!text || text.length <= maxLength) {
    return text || ''
  }
  return text.substring(0, maxLength) + '...'
}

const groupQueriesByName = (queries: QueryConfig[]): GroupedQuery[] => {
  const grouped = queries.reduce((acc, query) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ query –∏ query.query —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if (!query || !query.query) {
      console.warn('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:', query)
      return acc
    }

    const existing = acc.find(group => group.query.toLowerCase() === query.query.toLowerCase())
    if (existing) {
      existing.platforms.push(query)
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (query.updatedAt && new Date(query.updatedAt) > new Date(existing.latestUpdated)) {
        existing.latestUpdated = query.updatedAt
      }
    } else {
      acc.push({
        query: query.query,
        platforms: [query],
        latestUpdated: query.updatedAt || query.createdAt || new Date().toISOString()
      })
    }
    return acc
  }, [] as GroupedQuery[])

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
  return grouped.sort((a, b) => new Date(b.latestUpdated).getTime() - new Date(a.latestUpdated).getTime())
}

interface QueriesClientProps {
  queriesByCategory: Record<string, QueryConfig[]>
  categories: Category[]
  selectedCategoryKey: string
  initialQueries: QueryConfig[]
  authToken: string
}

export default function QueriesClient({ 
  queriesByCategory,
  categories, 
  selectedCategoryKey: initialCategoryKey,
  initialQueries,
  authToken
}: QueriesClientProps) {
  const [selectedCategoryKey, setSelectedCategoryKey] = useState(initialCategoryKey)
  const [queries, setQueries] = useState<QueryConfig[]>(initialQueries)
  const [loading, setLoading] = useState(false)
  const [isAdding, setIsAdding] = useState(false)
  const [editingQuery, setEditingQuery] = useState<EditingQuery | null>(null)
  const [deletingQuery, setDeletingQuery] = useState<QueryConfig | null>(null)

  // –û–±–Ω–æ–≤–ª—è–µ–º queries –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ selectedCategoryKey
  React.useEffect(() => {
    const categoryQueries = queriesByCategory[selectedCategoryKey] || []
    setQueries(categoryQueries)
    console.log('üîç QueriesClient - switching to category:', selectedCategoryKey, 'queries count:', categoryQueries.length)
  }, [selectedCategoryKey, queriesByCategory])

  // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const handleCategoryChange = (categoryKey: string) => {
    setSelectedCategoryKey(categoryKey)
    // –û–±–Ω–æ–≤–ª—è–µ–º URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const url = new URL(window.location.href)
    url.searchParams.set('category', categoryKey)
    window.history.pushState({}, '', url.toString())
  }

  const groupedQueries = useMemo(() => groupQueriesByName(queries), [queries])

  const handleAdd = async (queryData: CreateQueryRequest) => {
    try {
      setLoading(true)
      
      if (!authToken) {
        throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
      }
      
      console.log('üîç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:', queryData)
      
      // –î–æ–±–∞–≤–ª—è–µ–º categoryKey –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const queryDataWithCategory = {
        ...queryData,
        category: selectedCategoryKey
      }
      
      console.log('üîç –î–∞–Ω–Ω—ã–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π:', queryDataWithCategory)
      
      const result = await createQuery(queryDataWithCategory)
      console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', result)
      
      if (result.success && result.data) {
        console.log('üîç –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', result.data)
        
        // DB API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –æ–±–µ–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º)
        const createdQueries = Array.isArray(result.data) ? result.data : [result.data]
        const newQueries = [...queries, ...createdQueries as QueryConfig[]]
        setQueries(newQueries)
        setIsAdding(false)
        console.log('‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫:', newQueries.length, '–∑–∞–ø—Ä–æ—Å–æ–≤')
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', result.error)
        alert(result.error || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error)
      alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞')
    } finally {
      setLoading(false)
    }
  }

  const handleEdit = async (queryData: CreateQueryRequest) => {
    try {
      setLoading(true)
      
      if (!authToken) {
        throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
      }
      
      if (!editingQuery) {
        throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
      }
      
      console.log('üîç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:', editingQuery.id, queryData)
      
      // –î–æ–±–∞–≤–ª—è–µ–º categoryKey –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const queryDataWithCategory = {
        ...queryData,
        query: queryData.query, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ —Ñ–æ—Ä–º—ã
        oldQuery: editingQuery.query, // –°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
        category: selectedCategoryKey,
        categoryKey: selectedCategoryKey // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      }
      
      console.log('üîç –î–∞–Ω–Ω—ã–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π:', queryDataWithCategory)
      
      const result = await updateQuery(editingQuery.id.toString(), queryDataWithCategory)
      console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', result)
      
      if (result.success && result.data) {
        console.log('üîç –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:', result.data)
        
        // DB API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –æ–±–µ–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º)
        const updatedQueriesArray = Array.isArray(result.data) ? result.data : [result.data]
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞
        const updatedQueries = queries.map(q => {
          const updatedQuery = updatedQueriesArray.find(uq => uq.id === q.id)
          return updatedQuery ? { ...q, ...updatedQuery } : q
        })
        
        setQueries(updatedQueries)
        setEditingQuery(null)
        console.log('‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', result.error)
        alert(result.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error)
      alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞')
    } finally {
      setLoading(false)
    }
  }

  const handleDelete = async (id: string) => {
    try {
      setLoading(true)
      
      if (!authToken) {
        throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
      }
      
      console.log('üîç –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:', id)
      
      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
      const queryToDelete = queries.find(q => q.id.toString() === id)
      if (!queryToDelete) {
        throw new Error('–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      
      console.log('üîç –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º:', queryToDelete.query)
      
      const result = await deleteQuery(id, queryToDelete.query, selectedCategoryKey)
      console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', result)
      
      if (result.success) {
        console.log('‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã')
        
        // –£–¥–∞–ª—è–µ–º –í–°–ï –∑–∞–ø–∏—Å–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        const updatedQueries = queries.filter(q => q.query !== queryToDelete.query)
        setQueries(updatedQueries)
        setDeletingQuery(null)
        console.log('‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞:', queryToDelete.query)
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', result.error)
        alert(result.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error)
      alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞')
    } finally {
      setLoading(false)
    }
  }

  if (loading) {
    return (
      <div className="queries-loading">
        <div className="loading-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤...</p>
      </div>
    )
  }

  return (
    <div className="queries">
      <div className="queries__header">
        <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞–º–∏</h2>
        <div className="queries__controls">
          <CustomSelect
            options={categories.map(category => ({
              value: category.key,
              label: category.display
            }))}
            value={selectedCategoryKey}
            onChange={handleCategoryChange}
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
            className="queries__categorySelect"
          />
          <button 
            onClick={() => {
              if (selectedCategoryKey) {
                setIsAdding(true)
              } else {
                alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
              }
            }}
            className="queries__addButton"
            disabled={loading}
          >
            –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å
            <PlusIcon size={16} />
          </button>
        </div>
      </div>

      {loading ? (
        <div className="queries__loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      ) : (
        <div className="queries__list">
          {groupedQueries.length === 0 ? (
            <div className="queries__empty">
              {selectedCategoryKey ? '–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' : '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤'}
            </div>
          ) : (
            <div className="queries__grid">
              {groupedQueries.map((group, index) => (
                <div key={`group-${group.query}-${index}`} className="query-card">
                  <div className="query-card__content">
                    <h3 className="query-card__title" title={group.query}>
                      {truncateText(group.query, 10)}
                    </h3>
                  </div>

                  <div className="query-card__actions">
                    <button 
                      onClick={() => {
                        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–µ–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        const ozonQuery = group.platforms.find(p => p.platform === 'ozon')
                        const wbQuery = group.platforms.find(p => p.platform === 'wb')
                        const firstQuery = group.platforms[0]
                        
                        console.log('üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:')
                        console.log('üîç group.platforms:', group.platforms)
                        console.log('üîç ozonQuery:', ozonQuery)
                        console.log('üîç wbQuery:', wbQuery)
                        console.log('üîç firstQuery:', firstQuery)
                        
                        setEditingQuery({
                          id: firstQuery.id,
                          query: firstQuery.query,
                          platform: 'both',
                          // –î–∞–Ω–Ω—ã–µ –¥–ª—è Ozon (–∏–∑ –∑–∞–ø–∏—Å–∏ —Å platform === 'ozon')
                          ozon_platform: ozonQuery?.platform_id || '',
                          ozon_exact: ozonQuery?.exactmodels || '',
                          // –î–∞–Ω–Ω—ã–µ –¥–ª—è WB (–∏–∑ –∑–∞–ø–∏—Å–∏ —Å platform === 'wb')
                          wb_platform: wbQuery?.platform_id || '',
                          wb_exact: wbQuery?.exactmodels || '',
                          // –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                          recommended_price: firstQuery.recommended_price || 0,
                          categoryKey: selectedCategoryKey,
                          createdAt: firstQuery.createdAt,
                          updatedAt: firstQuery.updatedAt
                        })
                      }}
                      className="query-card__edit"
                      disabled={loading}
                      title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                    >
                      <EditIcon size={12} />
                    </button>
                    <button 
                      onClick={() => setDeletingQuery(group.platforms[0])}
                      className="query-card__delete"
                      disabled={loading}
                      title="–£–¥–∞–ª–∏—Ç—å"
                    >
                      <DeleteIcon size={12} />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      {isAdding && (
        <AddModal
          mode="query"
          categories={categories}
          selectedCategoryKey={selectedCategoryKey}
          onAdd={() => {}}
          onAddQuery={handleAdd}
          onClose={() => setIsAdding(false)}
          isOpen={isAdding}
        />
      )}

      {editingQuery && (
        <AddModal
          mode="query"
          categories={categories}
          selectedCategoryKey={selectedCategoryKey}
          editingQuery={editingQuery}
          onAdd={() => {}}
          onAddQuery={handleEdit}
          onClose={() => setEditingQuery(null)}
          isOpen={!!editingQuery}
        />
      )}

      {deletingQuery && (
        <ConfirmModal
          title="–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞"
          message={`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å "${deletingQuery.query}" –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ${deletingQuery.platform}?`}
          onConfirm={() => handleDelete(deletingQuery.id.toString())}
          onClose={() => setDeletingQuery(null)}
          isLoading={loading}
          isOpen={!!deletingQuery}
        />
      )}
    </div>
  )
}
