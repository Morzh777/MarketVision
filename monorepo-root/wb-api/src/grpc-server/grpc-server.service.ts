import { Injectable, Logger } from '@nestjs/common';
import { OnModuleInit } from '@nestjs/common';
import * as grpc from '@grpc/grpc-js';
import * as protoLoader from '@grpc/proto-loader';
import * as path from 'path';
import { CpusService } from '../parser/application/services/cpus.service';
import { VideocardsService } from '../parser/application/services/videocards.service';
import { MotherboardsService } from '../parser/application/services/motherboards.service';

const PROTO_PATH = path.join(__dirname, '../../proto/raw-product.proto');

const packageDefinition = protoLoader.loadSync(PROTO_PATH, {
  keepCase: true,
  longs: String,
  enums: String,
  defaults: true,
  oneofs: true,
});

const rawProductProto = grpc.loadPackageDefinition(packageDefinition).raw_product as any;

@Injectable()
export class GrpcServerService implements OnModuleInit {
  private readonly logger = new Logger(GrpcServerService.name);
  private server: grpc.Server;

  constructor(
    private readonly cpusService: CpusService,
    private readonly videocardsService: VideocardsService,
    private readonly motherboardsService: MotherboardsService,
  ) {}

  onModuleInit() {
    this.startGrpcServer();
  }

  private startGrpcServer() {
    this.server = new grpc.Server();

    // –ù–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –∏ –º–µ—Ç–æ–¥!
    this.server.addService(rawProductProto.RawProductService.service, {
      GetRawProducts: this.getRawProducts.bind(this),
    });

    const port = 3000;
    this.server.bindAsync(
      `0.0.0.0:${port}`,
      grpc.ServerCredentials.createInsecure(),
      (err, port) => {
        if (err) {
          this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ gRPC —Å–µ—Ä–≤–µ—Ä–∞: ${err.message}`);
          return;
        }
        this.server.start();
        this.logger.log(`üöÄ WB API gRPC —Å–µ—Ä–≤–µ—Ä (raw-product.proto) –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
      }
    );
  }

  private async getRawProducts(call: any, callback: any) {
    try {
      const { query, category, categoryKey } = call.request;
      this.logger.log(`üîç gRPC GetRawProducts WB: ${query} (${category})`);

      let products: any[] = [];
      const xsubject: number = parseInt(category, 10) || 0;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ xsubject
      if (xsubject === 3698) {
        products = await this.cpusService.searchProductsByQuery(query, xsubject);
      } else if (xsubject === 3274) {
        products = await this.videocardsService.searchProductsByQuery(query, xsubject);
      } else if (xsubject === 3690) {
        products = await this.motherboardsService.searchProductsByQuery(query, xsubject);
      } else {
        this.logger.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π xsubject: ${xsubject}`);
        products = [];
      }

      this.logger.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ ${products.length} —Å—ã—Ä—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—Ç WB API`);

      // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞!
      const categoryOut = categoryKey || category;
      const rawProducts = products.map(product => ({
        id: product.id,
        name: product.name,
        price: product.price,
        image_url: product.image_url || '',
        product_url: product.product_url || '',
        category: categoryOut,
        source: 'wb',
        query: query  // –î–æ–±–∞–≤–ª—è–µ–º query –∫ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É
      }));

      this.logger.log(`‚úÖ gRPC –æ—Ç–≤–µ—Ç: ${rawProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—Ç WB API`);

      callback(null, {
        products: rawProducts,
        total_count: rawProducts.length,
        source: 'wb'
      });

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ gRPC –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
      callback({
        code: grpc.status.INTERNAL,
        message: `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`
      });
    }
  }
} 