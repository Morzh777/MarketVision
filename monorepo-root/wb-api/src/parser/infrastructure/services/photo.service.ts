import { Injectable, Logger } from '@nestjs/common';
import { PhotoService } from '../../domain/interfaces/wb-api.interface';
import { Product } from '../../domain/interfaces/parser.interfaces';
// import { ProductFilterClient } from '../../../grpc-clients/product-filter.client';
import * as process from 'process';

@Injectable()
export class PhotoServiceImpl implements PhotoService {
  private readonly logger = new Logger(PhotoServiceImpl.name);
  
  private readonly CONFIG = {
    PHOTO_TIMEOUT: 2000,
    USER_AGENT: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
    PRIMARY_BASKETS: [21, 22, 23, 24],
  };

  // gRPC –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
  // private grpcClient = new ProductFilterClient(
  //   process.env.PRODUCT_FILTER_SERVICE_URL || 
  //   process.env.GRPC_FILTER_HOST || 
  //   'localhost:50051'
  // );

  async getProductPhoto(product: Product, category: string): Promise<string | null> {
    const id = String(product.id);
    
    // üß™ –í test mode –Ω–µ –∏—â–µ–º —Ñ–æ—Ç–æ (—Ç–µ—Å—Ç–æ–≤—ã–µ ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã)
    if (id.length < 6) {
      this.logger.debug(`üì∑ Test mode: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Ñ–æ—Ç–æ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ ID ${id}`);
      return null;
    }
    
    // –ò—â–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ (–ë–ï–ó –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è)
    this.logger.debug(`üì∑ –ò—â–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è ${id}...`);
    const photoUrl = await this.findPhotoUrl(id);
    
    if (photoUrl) {
      this.logger.log(`üì∑ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è ${id}: ${photoUrl}`);
    } else {
      this.logger.debug(`üì∑ –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è ${id}`);
    }
    
    return photoUrl;
  }

  private async checkPhotoUrl(url: string): Promise<boolean> {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.CONFIG.PHOTO_TIMEOUT);
      const response = await fetch(url, { 
        method: 'GET',
        headers: { 'User-Agent': this.CONFIG.USER_AGENT },
        signal: controller.signal
      });
      clearTimeout(timeoutId);
      return response.ok;
    } catch (e) {
      return false;
    }
  }

  private async findPhotoUrl(id: string): Promise<string | null> {
    const vol = Math.floor(parseInt(id) / 100000).toString();
    const part = Math.floor(parseInt(id) / 1000).toString();
    const searchOrder = this.generateBasketSearchOrder();
    const batchSize = 5;
    
    for (let i = 0; i < searchOrder.length; i += batchSize) {
      const batch = searchOrder.slice(i, i + batchSize);
      const promises = batch.map(async (basket) => {
        const url = `https://basket-${basket}.wbbasket.ru/vol${vol}/part${part}/${id}/images/big/1.webp`;
        const exists = await this.checkPhotoUrl(url);
        return { basket, url, exists };
      });
      const results = await Promise.all(promises);
      const found = results.find(r => r.exists);
      if (found) {
        this.logger.log(`üì∑ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è ${id}: ${found.url}`);
        return found.url;
      }
    }
    
    this.logger.debug(`üì∑ –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è ${id}`);
    return null;
  }

  private generateBasketSearchOrder(): number[] {
    const min = 1;
    const max = 50;
    const start = 21;
    const order = [start];
    let left = start - 1;
    let right = start + 1;
    while (left >= min || right <= max) {
      if (left >= min) order.push(left--);
      if (right <= max) order.push(right++);
    }
    return order;
  }

  // Cleanup gRPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  onModuleDestroy() {
    // this.grpcClient.close();
  }
} 