import json
import re

def parse_yandex_text():
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç–∞"""
    
    print("üîç –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç–∞...")
    
    try:
        with open("yandex_response.txt", "r", encoding="utf-8") as f:
            text = f.read()
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª yandex_response.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã RTX 5080
    products = []
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    # –ò—â–µ–º –±–ª–æ–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç –∏ —Ü–µ–Ω–∞–º–∏
    lines = text.split('\n')
    
    current_product = None
    
    for i, line in enumerate(lines):
        line = line.strip()
        
        # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ (—Å–æ–¥–µ—Ä–∂–∞—Ç RTX 5080)
        if "RTX 5080" in line and ("–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞" in line or "GeForce" in line):
            if current_product and current_product.get('name'):
                products.append(current_product)
            
            current_product = {
                'name': line,
                'id': f"yandex_{len(products)}",
                'price': 0,
                'old_price': None,
                'discount': None,
                'brand': None,
                'url': '',
                'images': []
            }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±—Ä–µ–Ω–¥
            brand_match = re.search(r'^(MSI|Palit|GIGABYTE|ASUS|Colorful|Inno3D)', line)
            if brand_match:
                current_product['brand'] = brand_match.group(1)
        
        # –ò—â–µ–º —Ü–µ–Ω—ã
        elif current_product and "–¶–µ–Ω–∞" in line and "‚ÇΩ" in line:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É, —É–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            price_match = re.search(r'(\d{1,3}(?:\s\d{3})*)\s*‚ÇΩ', line)
            if price_match:
                price_str = price_match.group(1)
                # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
                price_str = re.sub(r'[\s\u2009\u2008\u2007\u2006\u2005\u2004\u2003\u2002\u2001\u2000\u00A0]', '', price_str)
                try:
                    current_product['price'] = int(price_str)
                except ValueError:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ü–µ–Ω—É: '{price_str}' –∏–∑ —Å—Ç—Ä–æ–∫–∏: '{line}'")
        
        # –ò—â–µ–º —Å–∫–∏–¥–∫–∏
        elif current_product and "%" in line and line.strip().isdigit():
            current_product['discount'] = f"-{line.strip()}%"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä
    if current_product and current_product.get('name'):
        products.append(current_product)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ RTX 5080: {len(products)}")
    
    if products:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã
        with open("yandex_rtx5080_products.json", "w", encoding="utf-8") as f:
            json.dump(products, f, ensure_ascii=False, indent=2)
        print("üíæ –¢–æ–≤–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ yandex_rtx5080_products.json")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüõçÔ∏è –ù–ê–ô–î–ï–ù–ù–´–ï –¢–û–í–ê–†–´:")
        for i, product in enumerate(products, 1):
            print(f"\n{i}. {product['name']}")
            print(f"   –ë—Ä–µ–Ω–¥: {product['brand'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"   –¶–µ–Ω–∞: {product['price']:,} ‚ÇΩ")
            if product.get('discount'):
                print(f"   –°–∫–∏–¥–∫–∞: {product['discount']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω
        prices = [p["price"] for p in products if p["price"] > 0]
        if prices:
            print(f"\nüí∞ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¶–ï–ù:")
            print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {min(prices):,} ‚ÇΩ")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {max(prices):,} ‚ÇΩ")
            print(f"   –°—Ä–µ–¥–Ω—è—è: {sum(prices)//len(prices):,} ‚ÇΩ")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(prices)}")
        
        return products
    else:
        print("‚ùå –¢–æ–≤–∞—Ä—ã RTX 5080 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return []

def extract_products_advanced():
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
    
    print("üîç –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤...")
    
    try:
        with open("yandex_response.txt", "r", encoding="utf-8") as f:
            text = f.read()
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª yandex_response.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    # –ò—â–µ–º –±–ª–æ–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, —Ü–µ–Ω–æ–π –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    product_pattern = r'–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞\s+([^‚ÇΩ]+?)\s+–¶–µ–Ω–∞\s+(\d{1,3}(?:\s\d{3})*)\s*‚ÇΩ'
    
    matches = re.finditer(product_pattern, text, re.DOTALL)
    products = []
    
    for i, match in enumerate(matches):
        name = match.group(1).strip()
        price_str = match.group(2)
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ —Ü–µ–Ω—ã
        price_str = re.sub(r'[\s\u2009\u2008\u2007\u2006\u2005\u2004\u2003\u2002\u2001\u2000\u00A0]', '', price_str)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ RTX 5080
        if "RTX 5080" in name:
            try:
                product = {
                    'id': f"yandex_advanced_{i}",
                    'name': f"–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ {name}",
                    'price': int(price_str),
                    'brand': None,
                    'url': '',
                    'images': []
                }
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –±—Ä–µ–Ω–¥
                brand_match = re.search(r'^(MSI|Palit|GIGABYTE|ASUS|Colorful|Inno3D)', name)
                if brand_match:
                    product['brand'] = brand_match.group(1)
                
                products.append(product)
            except ValueError:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ü–µ–Ω—É: '{price_str}' –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {name}")
    
    print(f"‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –º–µ—Ç–æ–¥–æ–º –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    
    if products:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã
        with open("yandex_rtx5080_advanced.json", "w", encoding="utf-8") as f:
            json.dump(products, f, ensure_ascii=False, indent=2)
        print("üíæ –¢–æ–≤–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ yandex_rtx5080_advanced.json")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, product in enumerate(products, 1):
            print(f"{i}. {product['name']} - {product['price']:,} ‚ÇΩ")
    
    return products

if __name__ == "__main__":
    print("üéØ –ü–∞—Ä—Å–∏–º —Ç–æ–≤–∞—Ä—ã RTX 5080 –∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç–∞\n")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥
    products1 = parse_yandex_text()
    
    print("\n" + "="*60 + "\n")
    
    # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    products2 = extract_products_advanced()
    
    print(f"\nüìä –ò–¢–û–ì–û:")
    print(f"   –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: {len(products1)} —Ç–æ–≤–∞—Ä–æ–≤")
    print(f"   –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–µ—Ç–æ–¥: {len(products2)} —Ç–æ–≤–∞—Ä–æ–≤") 