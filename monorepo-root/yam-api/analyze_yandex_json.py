import json
import pprint

def analyze_yandex_json():
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON –æ—Ç –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON
    try:
        with open("yandex_market_response.json", "r", encoding="utf-8") as f:
            data = json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª yandex_market_response.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üîç –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ get_yandex_json.py")
        return
    
    print("üìä –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ JSON –Ø–ù–î–ï–ö–°.–ú–ê–†–ö–ï–¢\n")
    print("=" * 80)
    
    # 1. –í–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
    print("\n1Ô∏è‚É£ –ö–õ–Æ–ß–ò –í–ï–†–•–ù–ï–ì–û –£–†–û–í–ù–Ø:")
    for key in data.keys():
        value_type = type(data[key]).__name__
        if isinstance(data[key], (list, dict)):
            length = len(data[key])
            print(f"   - {key}: {value_type} ({length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
        else:
            print(f"   - {key}: {value_type}")
    
    # 2. –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
    print("\n2Ô∏è‚É£ –ü–û–ò–°–ö –¢–û–í–ê–†–û–í –í JSON:")
    products = find_products_recursive(data)
    
    if products:
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        with open("yandex_products_extracted.json", "w", encoding="utf-8") as f:
            json.dump(products, f, ensure_ascii=False, indent=2)
        print("üíæ –¢–æ–≤–∞—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ yandex_products_extracted.json")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        print("\nüõçÔ∏è –ü–†–ò–ú–ï–†–´ –ò–ó–í–õ–ï–ß–ï–ù–ù–´–• –¢–û–í–ê–†–û–í:")
        for i, product in enumerate(products[:5], 1):
            print(f"\n   –¢–æ–≤–∞—Ä {i}:")
            print(f"      –ù–∞–∑–≤–∞–Ω–∏–µ: {product.get('name', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            print(f"      –¶–µ–Ω–∞: {product.get('price', 0):,} ‚ÇΩ")
            if product.get('old_price'):
                print(f"      –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {product.get('old_price', 0):,} ‚ÇΩ")
            if product.get('discount'):
                print(f"      –°–∫–∏–¥–∫–∞: {product.get('discount')}")
            print(f"      –ë—Ä–µ–Ω–¥: {product.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"      URL: {product.get('url', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            print(f"      –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(product.get('images', []))}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω
        prices = [p["price"] for p in products if p.get("price", 0) > 0]
        if prices:
            print(f"\nüí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω:")
            print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {min(prices):,} ‚ÇΩ")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {max(prices):,} ‚ÇΩ")
            print(f"   –°—Ä–µ–¥–Ω—è—è: {sum(prices)//len(prices):,} ‚ÇΩ")
        
        return products
    else:
        print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ JSON")
        print("üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ –∫ –ø–∞—Ä—Å–∏–Ω–≥—É")

def find_products_recursive(obj, path="", max_depth=5):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ JSON"""
    products = []
    
    if max_depth <= 0:
        return products
    
    if isinstance(obj, dict):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–≤–∞—Ä—ã
        product_keys = ["products", "items", "goods", "catalog", "searchResults", "offers"]
        
        for key, value in obj.items():
            current_path = f"{path}.{key}" if path else key
            
            # –ï—Å–ª–∏ –∫–ª—é—á –ø–æ—Ö–æ–∂ –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            if key.lower() in [pk.lower() for pk in product_keys] and isinstance(value, list):
                print(f"   üéØ –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤: {current_path} ({len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–æ–≤–∞—Ä—ã
                extracted = extract_yandex_products(value)
                if extracted:
                    products.extend(extracted)
                    print(f"   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(extracted)}")
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –¥–∞–ª—å—à–µ
            elif isinstance(value, (dict, list)):
                products.extend(find_products_recursive(value, current_path, max_depth - 1))
    
    elif isinstance(obj, list):
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
        for i, item in enumerate(obj):
            current_path = f"{path}[{i}]"
            products.extend(find_products_recursive(item, current_path, max_depth - 1))
    
    return products

def extract_yandex_products(items):
    """–ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ —Å–ø–∏—Å–∫–∞ items"""
    products = []
    
    for item in items:
        try:
            product = {}
            
            # ID —Ç–æ–≤–∞—Ä–∞
            product["id"] = str(item.get("id", item.get("sku", item.get("productId", ""))))
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            name = item.get("name", item.get("title", item.get("productName", "")))
            if name:
                product["name"] = name
            
            # URL
            url = item.get("url", item.get("link", item.get("href", "")))
            if url:
                if not url.startswith("http"):
                    url = "https://market.yandex.ru" + url
                product["url"] = url
            
            # –¶–µ–Ω–∞
            price_data = item.get("price", {})
            if isinstance(price_data, dict):
                price = price_data.get("value", price_data.get("amount", 0))
                if price:
                    product["price"] = int(price)
            elif isinstance(price_data, (int, float)):
                product["price"] = int(price_data)
            
            # –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞
            old_price_data = item.get("oldPrice", item.get("originalPrice", {}))
            if isinstance(old_price_data, dict):
                old_price = old_price_data.get("value", old_price_data.get("amount", 0))
                if old_price:
                    product["old_price"] = int(old_price)
            elif isinstance(old_price_data, (int, float)):
                product["old_price"] = int(old_price_data)
            
            # –°–∫–∏–¥–∫–∞
            discount = item.get("discount", item.get("discountPercent", ""))
            if discount:
                product["discount"] = str(discount)
            
            # –ë—Ä–µ–Ω–¥
            brand = item.get("brand", item.get("vendor", ""))
            if brand:
                if isinstance(brand, dict):
                    brand = brand.get("name", "")
                product["brand"] = str(brand)
            
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images = []
            image_data = item.get("images", item.get("pictures", []))
            if isinstance(image_data, list):
                for img in image_data:
                    if isinstance(img, dict):
                        img_url = img.get("url", img.get("src", ""))
                    else:
                        img_url = str(img)
                    if img_url:
                        images.append(img_url)
            product["images"] = images
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç RTX 5080
            if product.get("name") and "rtx" in product["name"].lower() and "5080" in product["name"]:
                products.append(product)
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
            continue
    
    return products

if __name__ == "__main__":
    analyze_yandex_json() 