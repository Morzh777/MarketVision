// –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ iPhone —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏

// –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –∏–∑ ProductValidatorBase –∏ IphoneValidator
class TestIphoneValidator {
  constructor() {
    this.CATEGORY_KEY = 'iphone';
    this.IPHONE_RULES = {
      accessoryWords: [
        '—á–µ—Ö–æ–ª', '–∑–∞—â–∏—Ç–∞', '—Å—Ç–µ–∫–ª–æ', '–∫–∞–±–µ–ª—å', '—à–Ω—É—Ä', '–∑–∞—Ä—è–¥–∫–∞', '–ø–æ–¥—Å—Ç–∞–≤–∫–∞',
        '–Ω–∞—É—à–Ω–∏–∫–∏', '–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞', '–º–∏–∫—Ä–æ—Ñ–æ–Ω', '–∫–∞–º–µ—Ä–∞', '–æ–±—ä–µ–∫—Ç–∏–≤', '—à—Ç–∞—Ç–∏–≤',
        '–∫–æ—Ä–ø—É—Å', '–≤–∫–æ—Ä–ø—É—Å–µ', '–∫–µ–π—Å', '–±–∞–º–ø–µ—Ä', '–Ω–∞–∫–ª–∞–¥–∫–∞', '–ø–ª–µ–Ω–∫–∞', '–ø–ª—ë–Ω–∫–∞',
        '—Ä–µ–ø–ª–∏–∫–∞', '–≤—Å—Ç–∏–ª–µ', '—Å—Ç–∏–ª–µ', '—Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω'
      ]
    };
  }

  normalize(str) {
    return str.toLowerCase().replace(/\s+/g, '');
  }

  getOtherModels() {
    return [
      'iphone16', 'iphone15', 'iphone14', 'iphone13', 'iphone12', 'iphone11',
      'iphone16pro', 'iphone15pro', 'iphone14pro', 'iphone13pro', 'iphone12pro', 'iphone11pro',
      'iphone16promax', 'iphone15promax', 'iphone14promax', 'iphone13promax', 'iphone12promax', 'iphone11promax',
      'iphone16plus', 'iphone15plus', 'iphone14plus', 'iphone13mini', 'iphone12mini',
      'iphonexr', 'iphonexs', 'iphonexsmax', 'iphonex',
      'iphone8', 'iphone8plus', 'iphone7', 'iphone7plus',
      'iphone6', 'iphone6s', 'iphone6plus', 'iphone6splus',
      'iphone5', 'iphone5s', 'iphonese', 'iphonese2'
    ];
  }

  isAccessory(normalizedName, accessoryWords) {
    return accessoryWords.some(word => normalizedName.includes(word));
  }

  validateNameQueryMatch(normalizedName, normalizedQuery) {
    console.log(`  üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: "${normalizedName}" —Å–æ–¥–µ—Ä–∂–∏—Ç "${normalizedQuery}"?`);
    const result = normalizedName.includes(normalizedQuery);
    console.log(`  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`);
    return result;
  }

  checkOtherModels(normalizedQuery, normalizedName, otherModels, categoryName) {
    const checks = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ iPhone
    const queryHasOtherModel = otherModels.some(model => 
      normalizedQuery.includes(model) && model !== normalizedQuery
    );
    
    if (queryHasOtherModel) {
      const hasOtherModelInName = otherModels.some(model => 
        normalizedName.includes(model) && !normalizedQuery.includes(model)
      );
      
      if (hasOtherModelInName) {
        checks.push({ passed: false, reason: 'other-model-conflict', confidence: 0.9 });
      } else {
        checks.push({ passed: true, reason: 'no-other-model-conflict', confidence: 0.9 });
      }
    } else {
      checks.push({ passed: true, reason: 'no-other-model-check', confidence: 0.9 });
    }
    
    return checks;
  }

  createResult(passed, reason, confidence) {
    return { passed, reason, confidence };
  }

  // –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∫ –≤ validateProductStandard
  validateProductStandard(query, name, rules) {
    console.log(`\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞: "${name}"`);
    console.log(`üìù –ó–∞–ø—Ä–æ—Å: "${query}"`);
    
    const normalizedName = this.normalize(name);
    const normalizedQuery = this.normalize(query);
    
    console.log(`üî§ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "${normalizedName}"`);
    console.log(`üî§ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: "${normalizedQuery}"`);

    const checks = [];

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
    console.log(`\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã:`);
    if (rules.accessoryWords && this.isAccessory(normalizedName, rules.accessoryWords)) {
      console.log(`  ‚ùå –¢–æ–≤–∞—Ä —è–≤–ª—è–µ—Ç—Å—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–º`);
      checks.push({ passed: false, reason: 'accessory', confidence: 0.9 });
    } else {
      console.log(`  ‚úÖ –¢–æ–≤–∞—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–º`);
      checks.push({ passed: true, reason: 'not-accessory', confidence: 0.9 });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (–æ—Ç–∫–ª—é—á–µ–Ω–∞)
    console.log(`\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:`);
    console.log(`  ‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–∞)`);
    checks.push({ passed: true, reason: 'single-model', confidence: 0.9 });

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–ø—Ä–æ—Å–∞
    console.log(`\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–ø—Ä–æ—Å–∞:`);
    if (!this.validateNameQueryMatch(normalizedName, normalizedQuery)) {
      console.log(`  ‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É`);
      checks.push({ passed: false, reason: 'no-match', confidence: 0.7 });
    } else {
      console.log(`  ‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É`);
      checks.push({ passed: true, reason: 'query-match', confidence: 0.8 });
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π
    console.log(`\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π:`);
    const otherModels = this.getOtherModels();
    if (otherModels.length > 0) {
      const otherModelsChecks = this.checkOtherModels(normalizedQuery, normalizedName, otherModels, this.CATEGORY_KEY);
      checks.push(...otherModelsChecks);
      
      otherModelsChecks.forEach(check => {
        console.log(`  ${check.passed ? '‚úÖ' : '‚ùå'} ${check.reason} (confidence: ${check.confidence})`);
      });
    } else {
      console.log(`  ‚úÖ –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
      checks.push({ passed: true, reason: 'no-other-model-check', confidence: 0.9 });
    }

    // 5. –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log(`\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:`);
    checks.forEach((check, index) => {
      console.log(`  ${index + 1}. ${check.passed ? '‚úÖ' : '‚ùå'} ${check.reason} (confidence: ${check.confidence})`);
    });

    const failedChecks = checks.filter(check => !check.passed);
    const passed = failedChecks.length === 0;
    
    console.log(`\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${passed ? '‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–®–õ–ê' : '‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï –ü–†–û–®–õ–ê'}`);
    
    if (!passed) {
      console.log(`‚ùå –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:`);
      failedChecks.forEach(check => {
        console.log(`  - ${check.reason} (confidence: ${check.confidence})`);
      });
    }

    return { passed, checks, failedChecks };
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è iPhone –∫–∞–∫ –≤ validateProduct
  validateProduct(query, name, rules) {
    console.log(`\n${'='.repeat(80)}`);
    console.log(`üçé –í–ê–õ–ò–î–ê–¶–ò–Ø IPHONE: "${name}"`);
    console.log(`üìù –ó–∞–ø—Ä–æ—Å: "${query}"`);
    console.log(`${'='.repeat(80)}`);

    const normalizedName = this.normalize(name);
    const legacyModels = this.getOtherModels();

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤–∏–¥–∞ "XR –≤ –∫–æ—Ä–ø—É—Å–µ/–≤ —Å—Ç–∏–ª–µ 15 Pro"
    console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏:`);
    const stylingIndicators = ['–≤–∫–æ—Ä–ø—É—Å–µ', '–∫–æ—Ä–ø—É—Å', '–≤—Å—Ç–∏–ª–µ', '—Å—Ç–∏–ª–µ', '—Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω'];
    const hasStyling = stylingIndicators.some((word) => normalizedName.includes(word));
    const hasLegacyModel = legacyModels.some((model) => normalizedName.includes(model));

    console.log(`  - –ï—Å—Ç—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è: ${hasStyling}`);
    console.log(`  - –ï—Å—Ç—å —Å—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å: ${hasLegacyModel}`);

    if (hasStyling && hasLegacyModel) {
      console.log(`  ‚ùå –¢–æ–≤–∞—Ä —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω –ø–æ–¥ —Å—Ç–∞—Ä—É—é –º–æ–¥–µ–ª—å - –û–¢–ö–õ–û–ù–ï–ù`);
      return this.createResult(false, 'iphone-styled-legacy-model', 0.95);
    } else {
      console.log(`  ‚úÖ –¢–æ–≤–∞—Ä –Ω–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω –ø–æ–¥ —Å—Ç–∞—Ä—É—é –º–æ–¥–µ–ª—å`);
    }

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω—ã
    if (rules.product?.price && rules.recommendedPrice) {
      console.log(`\nüí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã:`);
      console.log(`  - –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: ${rules.product.price}‚ÇΩ`);
      console.log(`  - –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: ${rules.recommendedPrice}‚ÇΩ`);
      console.log(`  - –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${rules.dynamicTolerance || 0.3}`);
      
      if (rules.product.price < rules.recommendedPrice * 0.5) {
        console.log(`  üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞!`);
      }
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
    return this.validateProductStandard(query, name, rules);
  }
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testCases = [
  {
    name: "iPhone 15 Pro Max 256 –ì–ë White Titanium –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π",
    query: "iPhone 15 Pro Max",
    rules: {
      accessoryWords: [
        '—á–µ—Ö–æ–ª', '–∑–∞—â–∏—Ç–∞', '—Å—Ç–µ–∫–ª–æ', '–∫–∞–±–µ–ª—å', '—à–Ω—É—Ä', '–∑–∞—Ä—è–¥–∫–∞', '–ø–æ–¥—Å—Ç–∞–≤–∫–∞',
        '–Ω–∞—É—à–Ω–∏–∫–∏', '–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞', '–º–∏–∫—Ä–æ—Ñ–æ–Ω', '–∫–∞–º–µ—Ä–∞', '–æ–±—ä–µ–∫—Ç–∏–≤', '—à—Ç–∞—Ç–∏–≤',
        '–∫–æ—Ä–ø—É—Å', '–≤–∫–æ—Ä–ø—É—Å–µ', '–∫–µ–π—Å', '–±–∞–º–ø–µ—Ä', '–Ω–∞–∫–ª–∞–¥–∫–∞', '–ø–ª–µ–Ω–∫–∞', '–ø–ª—ë–Ω–∫–∞',
        '—Ä–µ–ø–ª–∏–∫–∞', '–≤—Å—Ç–∏–ª–µ', '—Å—Ç–∏–ª–µ', '—Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω'
      ],
      product: { price: 120000 },
      recommendedPrice: 150000,
      dynamicTolerance: 0.3
    }
  },
  {
    name: "iPhone 15 Pro Max —á–µ—Ö–æ–ª —Å–∏–ª–∏–∫–æ–Ω–æ–≤—ã–π",
    query: "iPhone 15 Pro Max",
    rules: {
      accessoryWords: [
        '—á–µ—Ö–æ–ª', '–∑–∞—â–∏—Ç–∞', '—Å—Ç–µ–∫–ª–æ', '–∫–∞–±–µ–ª—å', '—à–Ω—É—Ä', '–∑–∞—Ä—è–¥–∫–∞', '–ø–æ–¥—Å—Ç–∞–≤–∫–∞',
        '–Ω–∞—É—à–Ω–∏–∫–∏', '–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞', '–º–∏–∫—Ä–æ—Ñ–æ–Ω', '–∫–∞–º–µ—Ä–∞', '–æ–±—ä–µ–∫—Ç–∏–≤', '—à—Ç–∞—Ç–∏–≤',
        '–∫–æ—Ä–ø—É—Å', '–≤–∫–æ—Ä–ø—É—Å–µ', '–∫–µ–π—Å', '–±–∞–º–ø–µ—Ä', '–Ω–∞–∫–ª–∞–¥–∫–∞', '–ø–ª–µ–Ω–∫–∞', '–ø–ª—ë–Ω–∫–∞',
        '—Ä–µ–ø–ª–∏–∫–∞', '–≤—Å—Ç–∏–ª–µ', '—Å—Ç–∏–ª–µ', '—Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω'
      ]
    }
  },
  {
    name: "iPhone XR –≤ –∫–æ—Ä–ø—É—Å–µ iPhone 15 Pro",
    query: "iPhone 15 Pro",
    rules: {
      accessoryWords: [
        '—á–µ—Ö–æ–ª', '–∑–∞—â–∏—Ç–∞', '—Å—Ç–µ–∫–ª–æ', '–∫–∞–±–µ–ª—å', '—à–Ω—É—Ä', '–∑–∞—Ä—è–¥–∫–∞', '–ø–æ–¥—Å—Ç–∞–≤–∫–∞',
        '–Ω–∞—É—à–Ω–∏–∫–∏', '–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞', '–º–∏–∫—Ä–æ—Ñ–æ–Ω', '–∫–∞–º–µ—Ä–∞', '–æ–±—ä–µ–∫—Ç–∏–≤', '—à—Ç–∞—Ç–∏–≤',
        '–∫–æ—Ä–ø—É—Å', '–≤–∫–æ—Ä–ø—É—Å–µ', '–∫–µ–π—Å', '–±–∞–º–ø–µ—Ä', '–Ω–∞–∫–ª–∞–¥–∫–∞', '–ø–ª–µ–Ω–∫–∞', '–ø–ª—ë–Ω–∫–∞',
        '—Ä–µ–ø–ª–∏–∫–∞', '–≤—Å—Ç–∏–ª–µ', '—Å—Ç–∏–ª–µ', '—Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω'
      ]
    }
  },
  {
    name: "iPhone 15 Pro Max 512GB Natural Titanium",
    query: "iPhone 15 Pro Max",
    rules: {
      accessoryWords: [
        '—á–µ—Ö–æ–ª', '–∑–∞—â–∏—Ç–∞', '—Å—Ç–µ–∫–ª–æ', '–∫–∞–±–µ–ª—å', '—à–Ω—É—Ä', '–∑–∞—Ä—è–¥–∫–∞', '–ø–æ–¥—Å—Ç–∞–≤–∫–∞',
        '–Ω–∞—É—à–Ω–∏–∫–∏', '–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞', '–º–∏–∫—Ä–æ—Ñ–æ–Ω', '–∫–∞–º–µ—Ä–∞', '–æ–±—ä–µ–∫—Ç–∏–≤', '—à—Ç–∞—Ç–∏–≤',
        '–∫–æ—Ä–ø—É—Å', '–≤–∫–æ—Ä–ø—É—Å–µ', '–∫–µ–π—Å', '–±–∞–º–ø–µ—Ä', '–Ω–∞–∫–ª–∞–¥–∫–∞', '–ø–ª–µ–Ω–∫–∞', '–ø–ª—ë–Ω–∫–∞',
        '—Ä–µ–ø–ª–∏–∫–∞', '–≤—Å—Ç–∏–ª–µ', '—Å—Ç–∏–ª–µ', '—Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω'
      ],
      product: { price: 150000 },
      recommendedPrice: 150000,
      dynamicTolerance: 0.3
    }
  }
];

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
console.log(`üß™ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –í–ê–õ–ò–î–ê–¢–û–†–ê IPHONE`);
console.log(`üìÖ ${new Date().toLocaleString()}`);
console.log(`\n${'='.repeat(80)}`);

const validator = new TestIphoneValidator();

testCases.forEach((testCase, index) => {
  console.log(`\n\nüì± –¢–ï–°–¢ ${index + 1}/${testCases.length}`);
  const result = validator.validateProduct(testCase.query, testCase.name, testCase.rules);
  
  console.log(`\n${'='.repeat(40)}`);
  console.log(`üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê ${index + 1}: ${result.passed ? '‚úÖ –ü–†–û–®–ï–õ' : '‚ùå –ù–ï –ü–†–û–®–ï–õ'}`);
  console.log(`${'='.repeat(40)}`);
});

console.log(`\n\nüèÅ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´`);



