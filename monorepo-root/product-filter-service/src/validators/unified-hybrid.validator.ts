/**
 * UnifiedHybridValidator
 * ----------------------
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ (–º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã, –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –∏ –¥—Ä.).
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞—Å–∫–∞–¥–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: prefilter ‚Üí code validation ‚Üí AI validation.
 * - –°—Ç—Ä–æ–≥–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω.
 * - –õ–æ–≥–∏–∫–∞ feature extraction –∏ accessory detection –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã.
 * - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç best practices TypeScript/NestJS.
 * - –õ–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ–º –¥–ª—è –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
 *
 * @see VALIDATION_ARCHITECTURE_V2.md
 */

import { Injectable, Logger } from '@nestjs/common';
import { OpenAiValidationService, OpenAiProduct, OpenAiValidationResult } from '../services/openai.service';

/**
 * –ü—Ä–∏—á–∏–Ω—ã (reasons) –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞.
 */
export enum ValidationReason {
  PrefilterPassed = 'prefilter-passed',
  PriceAnomaly = 'price-anomaly',
  AccessoryWords = 'accessory-words',
  SoftAccessory = 'soft-accessory',
  CodeValidated = 'code-validated',
  TooShort = 'too-short-for-auto-validation',
  SoftInsufficientFeatures = 'soft-insufficient-features',
  InsufficientFeatures = 'insufficient-features',
  ConflictingChipsets = 'conflicting-chipsets',
  NoQueryChipsetInName = 'no-query-chipset-in-name',
  AiValidated = 'ai-validated',
  ValidationFailed = 'validation-failed',
}

export interface ValidationResult {
  isValid: boolean;
  reason: string;
  aiReason?: string;
  confidence?: number;
}

export interface CategoryRule {
  readonly requiredKeywords?: readonly string[];
  readonly brands?: readonly string[];
  readonly series?: readonly string[];
  readonly features?: readonly string[];
  readonly categoryAccessories?: readonly string[];
  readonly minFeatures?: number;
  readonly modelPatterns?: readonly RegExp[];
  readonly minNameLength?: number;
  readonly customValidator?: (query: string, productName: string) => { isValid: boolean; reason: string; confidence: number };
  readonly name?: readonly string[];
}

/**
 * –ö–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤.
 * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `as const` –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ –∏ –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏.
 */
export const CATEGORY_RULES = {
  videocards: {
    name: ['–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞', 'graphics card', 'gpu'],
    brands: ['msi', 'palit', 'gigabyte', 'zotac', 'inno3d', 'asus', 'colorful', 'galax', 'maxsun', 'aorus', 'igame'],
    series: ['gaming', 'eagle', 'aorus', 'ventus', 'strix', 'tuf', 'phantom', 'x', 'xt', 'xtx', 'super', 'ultra', 'oc', 'plus'],
    features: ['rtx', 'gtx', 'rx', 'geforce', 'radeon'],
    modelPatterns: [
      /(rtx|gtx|rx)[-\s]*(\d{4})(\s*(ti|super|ultra|xt|xtx|x|g|oc|plus))?/i
    ],
    minFeatures: 1
  },
  processors: {
    name: ['–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä', 'cpu', 'processor'],
    brands: ['amd', 'intel', 'ryzen', 'xeon', 'core', 'pentium', 'celeron'],
    series: ['ryzen', 'core', 'i3', 'i5', 'i7', 'i9', 'x3d', 'hx'],
    features: ['am5', 'am4', 'lga1700', 'lga1200', 'ddr5', 'ddr4', 'cache', 'boost', 'threads', 'cores'],
    modelPatterns: [
      /9(950|900|800|700|600)X3D?/gi,
      /9(950|900|800|700|600)X/gi,
      /9(950|900|800|700|600)HX3D?/gi,
      /7[5689]00x3d|7950x3d|7600x3d/gi,
      /(i[3579])-?\d{4,5}[a-z]*/i,
      /ryzen\s*([3579])\s*(\d{4})[a-z]*/i
    ],
    minFeatures: 1
  },
  motherboards: {
    name: ['–º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞', 'motherboard'],
    brands: [
      'asus', 'msi', 'gigabyte', 'asrock', 'biostar', 'aorus', 'evga',
      'maxsun', 'ms', 'colorful', 'supermicro', 'foxconn', 'jetway', 'ecs', 'dfi', 'zotac',
      '–º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞'
    ],
    series: [
      'gaming x', 'aorus', 'pro rs', 'steel legend', 'tomahawk', 'phantom', 'unify', 'creator',
      'tuf', 'prime', 'eagle', 'carbon', 'lightning', 'terminator', 'pro', 'ds3h', 'd3hp', 'force', 'nitro', 'riptide', 'ayw', 'battle-ax', 'plus', 'legend', 'rs', 'elite', 'frozen', 'wifi', 'ice'
    ],
    features: ['ddr5', 'ddr4', 'pcie', 'wifi', 'bluetooth', 'usb3', 'sata', 'nvme', 'm.2']
  },
  playstation: {
    name: ['playstation', 'ps5', 'sony'],
    brands: ['sony', 'playstation'],
    series: ['standard', 'digital', 'slim', 'pro', 'edition'],
    features: ['825gb', '1tb', '4k', 'ray tracing', '–∫–æ–Ω—Å–æ–ª—å'],
    minFeatures: 1,
    customValidator: (query: string, productName: string) => {
      const name = productName.toLowerCase();
      const hasPS5 = /ps\s*5|playstation\s*5/i.test(name);
      const isAccessory = /–≥–µ–π–º–ø–∞–¥|–¥–∂–æ–π—Å—Ç–∏–∫|–∑–∞—Ä—è–¥–Ω–∞—è|–∫–∞–±–µ–ª—å|—á–µ—Ö–æ–ª|—Å—É–º–∫–∞|–Ω–∞–∫–ª–µ–π–∫–∞|–¥–∏—Å–∫|–∏–≥—Ä–∞/i.test(name);
      if (isAccessory) {
        return { isValid: false, reason: '–∞–∫—Å–µ—Å—Å—É–∞—Ä', confidence: 0.9 };
      }
      if (hasPS5) {
        return { isValid: true, reason: '–∫–æ–Ω—Å–æ–ª—å PS5', confidence: 0.9 };
      }
      return { isValid: false, reason: '–Ω–µ –∫–æ–Ω—Å–æ–ª—å', confidence: 0.7 };
    }
  },
  nintendo_switch: {
    name: ['nintendo switch', 'switch', 'oled'],
    brands: ['nintendo'],
    series: ['oled', 'lite', 'standard', 'neon', 'gray'],
    features: ['–∫–æ–Ω—Å–æ–ª—å', '32gb', '64gb', '–∏–≥—Ä–æ–≤–∞—è', '–ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è'],
    minFeatures: 1
  }
} as const;

/**
 * –°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç–æ—è—â–∏—Ö —á–∏–ø—Å–µ—Ç–æ–≤ –¥–ª—è motherboards (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤).
 */
const MOTHERBOARD_CHIPSETS = [
  // Intel (LGA 1851, Arrow Lake, Panther Lake)
  'z990', // –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–µ–µ–º–Ω–∏–∫ Z890 –¥–ª—è Panther Lake
  'z890', // —Ñ–ª–∞–≥–º–∞–Ω—Å–∫–∏–π —á–∏–ø—Å–µ—Ç –¥–ª—è Arrow Lake-S (15-–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è)
  'z790', // –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥–º–∞–Ω Intel
  'b860', // —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
  'b850', // —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å (–¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å AMD B850)
  'b760', // –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π Intel
  'h810', // –±—é–¥–∂–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
  'w880', // —Ä–∞–±–æ—á–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
  'b760m',
  'b760m-k',
  // AMD (AM5, Ryzen 9000/10000)
  'x950',  // –≤–æ–∑–º–æ–∂–Ω—ã–π –Ω–æ–≤—ã–π —á–∏–ø—Å–µ—Ç –¥–ª—è Ryzen "Zen 6"
  'x870e', // —Ç–æ–ø–æ–≤—ã–π —á–∏–ø—Å–µ—Ç –¥–ª—è Ryzen 9000 (Zen 5)
  'x870',  // —Ç–æ–ø–æ–≤—ã–π —á–∏–ø—Å–µ—Ç –¥–ª—è Ryzen 9000 (Zen 5)
  'a820',  // –±—é–¥–∂–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
] as const;

/**
 * –°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º/—Å–æ–∫–µ—Ç–æ–≤ (–Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ —á–∏–ø—Å–µ—Ç–æ–≤).
 */
const MOTHERBOARD_PLATFORMS = [
  'am5', 'am4', 'lga1700', 'lga1200', 'lga1151', 'lga1150', 'lga1155', 'lga2011', 'lga2066', 'lga1366', 'lga775',
  'socket 1700', 'socket 1200', 'socket 1151', 'socket 1150', 'socket 1155', 'socket 2011', 'socket 2066', 'socket 1366', 'socket 775'
] as const;

@Injectable()
export class UnifiedHybridValidator {
  private readonly logger = new Logger(UnifiedHybridValidator.name);

  constructor(private readonly openaiService: OpenAiValidationService) {}

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞—Ç—á–∞ —Ç–æ–≤–∞—Ä–æ–≤.
   * @param products - –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
   * @param category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤.
   * @returns Promise<ReadonlyArray<ValidationResult>>
   */
  async validateBatch(
    products: ReadonlyArray<OpenAiProduct>,
    category: keyof typeof CATEGORY_RULES
  ): Promise<ReadonlyArray<ValidationResult>> {
    this.logger.debug(`üîç [UnifiedHybrid] –í–∞–ª–∏–¥–∞—Ü–∏—è ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}`);
    const prefiltered = this.prefilterProducts(products, category);
    const codeValidated = this.codeValidation(prefiltered, category, products);
    const toAI = this.collectForAI(codeValidated, products);
    let aiResults: OpenAiValidationResult[] = [];
    if (toAI.length > 0) {
      this.logger.debug(`ü§ñ [UnifiedHybrid] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${toAI.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ AI`);
      aiResults = await this.openaiService.validateProducts(toAI, category);
    }
    return this.assembleResults(products, prefiltered, codeValidated, aiResults);
  }

  /**
   * –§–∞–∑–∞ 1: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (accessory-words, price-anomaly)
   */
  private prefilterProducts(products: ReadonlyArray<OpenAiProduct>, category: string): ValidationResult[] {
    return products.map(product => {
      if (product.reason) {
        return { isValid: true, reason: product.reason, confidence: 1.0 };
      }
      if ((product as any).toAI === true || product.reason === ValidationReason.PriceAnomaly) {
        return { isValid: true, reason: ValidationReason.PriceAnomaly, confidence: 0.5 };
      }
      if (this.isAccessory(product.name)) {
        return { isValid: false, reason: ValidationReason.AccessoryWords, confidence: 1.0 };
      }
      if (this.isSoftAccessory(product.name, category)) {
        return { isValid: true, reason: ValidationReason.SoftAccessory, confidence: 0.3 };
      }
      return { isValid: true, reason: ValidationReason.PrefilterPassed, confidence: 0.5 };
    });
  }

  /**
   * –§–∞–∑–∞ 2: –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  private codeValidation(prefiltered: ValidationResult[], category: string, products: ReadonlyArray<OpenAiProduct>): (ValidationResult | null)[] {
    const rules = CATEGORY_RULES[category as keyof typeof CATEGORY_RULES];
    if (!rules) {
      this.logger.warn(`‚ö†Ô∏è [UnifiedHybrid] –ù–µ—Ç –ø—Ä–∞–≤–∏–ª –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}`);
      return prefiltered.map(() => null);
    }
    return prefiltered.map((preResult, index) => {
      if (!preResult.isValid || preResult.reason !== ValidationReason.PrefilterPassed) {
        return null;
      }
      const product = products[index];
      const result = this.validateByRules(product.query, product.name, category, rules);
      return result.isValid ? result : null;
    });
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * @param query - –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
   * @param productName - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
   * @param category - –∫–∞—Ç–µ–≥–æ—Ä–∏—è
   * @param rules - –ø—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  private validateByRules(query: string, productName: string, category: string, rules: CategoryRule): ValidationResult {
    const name = productName.toLowerCase();
    const normalizedQuery = query.toLowerCase().trim();

    // name (—Å–∏–Ω–æ–Ω–∏–º—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
    if (rules.name) {
      const hasName = rules.name.some(n => name.includes(n.toLowerCase()));
      if (hasName) {
        // featureCount++; // Removed
        // foundFeatures.push('name'); // Removed
      }
    }
    // –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å query, —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º
    if (name === normalizedQuery) {
      return {
        isValid: true,
        reason: `${ValidationReason.CodeValidated} (exact-query-match)`,
        confidence: 0.95
      };
    }
    if (rules.requiredKeywords) {
      const hasCategory = rules.requiredKeywords.some(keyword => name.includes(keyword.toLowerCase()));
      if (hasCategory) {
        // featureCount++; // Removed
        // foundFeatures.push('category'); // Removed
      }
    }
    const categoryStart = `[${category.replace('_', ' ')}]`;
    if (name.startsWith(categoryStart)) {
      // featureCount++; // Removed
      // foundFeatures.push('category-start'); // Removed
    }
    if (normalizedQuery && name.includes(normalizedQuery)) {
      // featureCount++; // Removed
      // foundFeatures.push('query'); // Removed
    }
    if (rules.brands) {
      const foundBrand = rules.brands.find(brand => name.includes(brand.toLowerCase()));
      if (foundBrand) {
        // featureCount++; // Removed
        // foundFeatures.push('brand'); // Removed
      }
    }
    if (rules.series) {
      const foundSeries = rules.series.find(series => name.includes(series.toLowerCase()));
      if (foundSeries) {
        // featureCount++; // Removed
        // foundFeatures.push('series'); // Removed
      }
    }
    if (rules.features) {
      const foundFeature = rules.features.find(feature => name.includes(feature.toLowerCase()));
      if (foundFeature) {
        // featureCount++; // Removed
        // foundFeatures.push('feature'); // Removed
      }
    }
    if (rules.modelPatterns) {
      const hasModel = rules.modelPatterns.some(pattern => pattern.test(name));
      if (hasModel) {
        // featureCount++; // Removed
        // foundFeatures.push('model'); // Removed
      }
    }
    // --- –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –î–õ–Ø –í–°–ï–• –ö–ê–¢–ï–ì–û–†–ò–ô ---
    const nameLower = name.toLowerCase();
    // –ü—Ä–æ—Å—Ç–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    function normalizeForQuery(str: string): string {
      return str.toLowerCase().replace(/\s+/g, '');
    }
    const normQuery = normalizeForQuery(query);
    const normName = normalizeForQuery(productName);
    if (!normName.includes(normQuery)) {
      return {
        isValid: false,
        reason: 'no-query-match',
        confidence: 0.1
      };
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ duplicate-chipset-in-name —Ç–æ–ª—å–∫–æ –¥–ª—è motherboards
    if (category === 'motherboards') {
      const allChipsetMatches = [];
      const regexAll = new RegExp(normQuery, 'gi');
      let match;
      while ((match = regexAll.exec(normName)) !== null) {
        allChipsetMatches.push(match[0]);
      }
      if (allChipsetMatches.length > 1) {
        return {
          isValid: false,
          reason: `duplicate-chipset-in-name (${query})`,
          confidence: 1.0
        };
      }
    }
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç —á–∏–ø—Å–µ—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è motherboards
    if (category === 'motherboards') {
      const sortedChipsets = [...(MOTHERBOARD_CHIPSETS as readonly string[])].sort((a, b) => b.length - a.length);
      const foundChipsets: string[] = [];
      let nameForChipset = nameLower;
      for (const cs of sortedChipsets) {
        const regex = new RegExp(`\\b${cs}\\b`, 'i');
        if (regex.test(nameForChipset)) {
          foundChipsets.push(cs);
          nameForChipset = nameForChipset.replace(regex, ' '.repeat(cs.length));
        }
      }
      const presentChipsets = Array.from(new Set(foundChipsets));
      if (presentChipsets.length > 1) {
        return {
          isValid: false,
          reason: `${ValidationReason.ConflictingChipsets} (${presentChipsets.join(', ')})`,
          confidence: 1.0
        };
      }
    }
    // 3. –ï—Å–ª–∏ query –Ω–∞–π–¥–µ–Ω (–∏ –Ω–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –¥–ª—è motherboards) ‚Äî –≤–∞–ª–∏–¥–µ–Ω
    return {
      isValid: true,
      reason: `${ValidationReason.CodeValidated} (query)`,
      confidence: 0.95
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ soft-accessory
   */
  private isSoftAccessory(productName: string, category: string): boolean {
    const rules = CATEGORY_RULES[category as keyof typeof CATEGORY_RULES];
    if (!rules || !('categoryAccessories' in rules) || !rules.categoryAccessories) return false;
    const name = productName.toLowerCase();
    return (rules.categoryAccessories as readonly string[]).some(word => name.includes(word.toLowerCase()));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ accessory –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è, –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
   */
  private isAccessory(name: string): boolean {
    const norm = name.toLowerCase();
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ accessory-—Å–ª–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å)
    const ACCESSORY_WORDS = [
      '–∫–∞–±–µ–ª—å', '–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫', '–∞–¥–∞–ø—Ç–µ—Ä', '–∑–∞–≥–ª—É—à–∫–∞', '—Ä–∞–¥–∏–∞—Ç–æ—Ä', '–±—Ä–µ–ª–æ–∫', '–Ω–∞–∫–ª–µ–π–∫–∞', '—á–µ—Ö–æ–ª', '—Å—É–º–∫–∞', '–ø–æ–¥—Å—Ç–∞–≤–∫–∞',
      '–∑–∞–≥–ª—É—à–∫–∞', '–∑–∞–≥–ª—É—à–∫–∏', '–∑–∞–≥–ª—É—à–µ–∫', '–∑–∞–≥–ª—É—à–∫—É', '–∑–∞–≥–ª—É—à–∫–æ–π', '–∑–∞–≥–ª—É—à–∫–∞–º–∏',
      '–ø—Ä–æ–≤–æ–¥', '—Ä–∞–∑–≤–µ—Ç–≤–∏—Ç–µ–ª—å', '—É–¥–ª–∏–Ω–∏—Ç–µ–ª—å', '–ø–ª–∞—Ç–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '–¥–µ—Ä–∂–∞—Ç–µ–ª—å', '–∫—Ä–µ–ø–ª–µ–Ω–∏–µ',
      '–ø—ã–ª–µ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä', '—Ñ–∏–ª—å—Ç—Ä', '–∑–∞–≥–ª—É—à–∫–∞', '–∑–∞–≥–ª—É—à–∫–∏', '–∑–∞–≥–ª—É—à–µ–∫', '–∑–∞–≥–ª—É—à–∫—É', '–∑–∞–≥–ª—É—à–∫–æ–π', '–∑–∞–≥–ª—É—à–∫–∞–º–∏',
      '–Ω–∞–∫–ª–µ–π–∫–∞', '–Ω–∞–∫–ª–µ–π–∫–∏', '–Ω–∞–∫–ª–µ–µ–∫', '–Ω–∞–∫–ª–µ–π–∫—É', '–Ω–∞–∫–ª–µ–π–∫–æ–π', '–Ω–∞–∫–ª–µ–π–∫–∞–º–∏',
      '—Ä–∞–¥–∏–∞—Ç–æ—Ä', '—Ä–∞–¥–∏–∞—Ç–æ—Ä—ã', '—Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤', '—Ä–∞–¥–∏–∞—Ç–æ—Ä—É', '—Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–º', '—Ä–∞–¥–∏–∞—Ç–æ—Ä–∞–º–∏',
      '–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫', '–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫–∏', '–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫–æ–≤', '–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫—É', '–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫–æ–º', '–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫–∞–º–∏',
      '–∞–¥–∞–ø—Ç–µ—Ä', '–∞–¥–∞–ø—Ç–µ—Ä—ã', '–∞–¥–∞–ø—Ç–µ—Ä–æ–≤', '–∞–¥–∞–ø—Ç–µ—Ä—É', '–∞–¥–∞–ø—Ç–µ—Ä–æ–º', '–∞–¥–∞–ø—Ç–µ—Ä–∞–º–∏',
      '–∫–∞–±–µ–ª—å', '–∫–∞–±–µ–ª–∏', '–∫–∞–±–µ–ª–µ–π', '–∫–∞–±–µ–ª—é', '–∫–∞–±–µ–ª–µ–º', '–∫–∞–±–µ–ª—è–º–∏',
      '–ø—Ä–æ–≤–æ–¥', '–ø—Ä–æ–≤–æ–¥–∞', '–ø—Ä–æ–≤–æ–¥–æ–≤', '–ø—Ä–æ–≤–æ–¥—É', '–ø—Ä–æ–≤–æ–¥–æ–º', '–ø—Ä–æ–≤–æ–¥–∞–º–∏',
      '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º', '–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞–º–∏',
      '–¥–µ—Ä–∂–∞—Ç–µ–ª—å', '–¥–µ—Ä–∂–∞—Ç–µ–ª–∏', '–¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π', '–¥–µ—Ä–∂–∞—Ç–µ–ª—é', '–¥–µ—Ä–∂–∞—Ç–µ–ª–µ–º', '–¥–µ—Ä–∂–∞—Ç–µ–ª—è–º–∏',
      '–∫—Ä–µ–ø–ª–µ–Ω–∏–µ', '–∫—Ä–µ–ø–ª–µ–Ω–∏—è', '–∫—Ä–µ–ø–ª–µ–Ω–∏–π', '–∫—Ä–µ–ø–ª–µ–Ω–∏—é', '–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º', '–∫—Ä–µ–ø–ª–µ–Ω–∏—è–º–∏',
      '–ø—ã–ª–µ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä', '—Ñ–∏–ª—å—Ç—Ä', '—Ñ–∏–ª—å—Ç—Ä—ã', '—Ñ–∏–ª—å—Ç—Ä–æ–≤', '—Ñ–∏–ª—å—Ç—Ä—É', '—Ñ–∏–ª—å—Ç—Ä–æ–º', '—Ñ–∏–ª—å—Ç—Ä–∞–º–∏',
      '–±—Ä–µ–ª–æ–∫', '–±—Ä–µ–ª–æ–∫–∏', '–±—Ä–µ–ª–æ–∫–æ–≤', '–±—Ä–µ–ª–æ–∫—É', '–±—Ä–µ–ª–æ–∫–æ–º', '–±—Ä–µ–ª–æ–∫–∞–º–∏',
      '—á–µ—Ö–æ–ª', '—á–µ—Ö–ª—ã', '—á–µ—Ö–ª–æ–≤', '—á–µ—Ö–ª—É', '—á–µ—Ö–ª–æ–º', '—á–µ—Ö–ª–∞–º–∏',
      '—Å—É–º–∫–∞', '—Å—É–º–∫–∏', '—Å—É–º–æ–∫', '—Å—É–º–∫–µ', '—Å—É–º–∫–æ–π', '—Å—É–º–∫–∞–º–∏',
      '–ø–æ–¥—Å—Ç–∞–≤–∫–∞', '–ø–æ–¥—Å—Ç–∞–≤–∫–∏', '–ø–æ–¥—Å—Ç–∞–≤–æ–∫', '–ø–æ–¥—Å—Ç–∞–≤–∫–µ', '–ø–æ–¥—Å—Ç–∞–≤–∫–æ–π', '–ø–æ–¥—Å—Ç–∞–≤–∫–∞–º–∏',
      '–∑–∞–≥–ª—É—à–∫–∞', '–∑–∞–≥–ª—É—à–∫–∏', '–∑–∞–≥–ª—É—à–µ–∫', '–∑–∞–≥–ª—É—à–∫—É', '–∑–∞–≥–ª—É—à–∫–æ–π', '–∑–∞–≥–ª—É—à–∫–∞–º–∏',
      '–≥–µ–π–º–ø–∞–¥', '–¥–∂–æ–π—Å—Ç–∏–∫', '–∑–∞—Ä—è–¥–Ω–∞—è', '–¥–∏—Å–∫', '–∏–≥—Ä–∞', '–Ω–∞–∫–ª–µ–π–∫–∞', '–Ω–∞–∫–ª–µ–π–∫–∏', '–Ω–∞–∫–ª–µ–µ–∫', '–Ω–∞–∫–ª–µ–π–∫—É', '–Ω–∞–∫–ª–µ–π–∫–æ–π', '–Ω–∞–∫–ª–µ–π–∫–∞–º–∏'
    ];
    return ACCESSORY_WORDS.some(word => norm.includes(word));
  }

  /**
   * –°–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è AI –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  private collectForAI(codeValidated: (ValidationResult | null)[], products: ReadonlyArray<OpenAiProduct>): OpenAiProduct[] {
    const toAI: OpenAiProduct[] = [];
    codeValidated.forEach((result, index) => {
      const product = products[index];
      if (
        product.reason === ValidationReason.PriceAnomaly ||
        result === null ||
        (result && [ValidationReason.PriceAnomaly, ValidationReason.SoftAccessory, ValidationReason.InsufficientFeatures].includes(result.reason as ValidationReason))
      ) {
        toAI.push(product);
      }
    });
    return toAI;
  }

  /**
   * –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
   */
  private assembleResults(
    products: ReadonlyArray<OpenAiProduct>,
    prefiltered: ValidationResult[],
    codeValidated: (ValidationResult | null)[],
    aiResults: OpenAiValidationResult[]
  ): any[] {
    let aiIndex = 0;
    return products.map((product, index) => {
      const preResult = prefiltered[index];
      const codeResult = codeValidated[index];
      if (!preResult.isValid) {
        return { ...product, ...preResult };
      }
      if (codeResult && codeResult.isValid) {
        return { ...product, ...codeResult };
      }
      if (
        preResult.reason === ValidationReason.PriceAnomaly ||
        preResult.reason === ValidationReason.SoftAccessory ||
        !codeResult
      ) {
        const aiResult = aiResults[aiIndex++];
        return {
          ...product,
          isValid: aiResult.isValid,
          reason: ValidationReason.AiValidated,
          aiReason: aiResult.reason || '',
          confidence: 0.8
        };
      }
      return { ...product, isValid: false, reason: ValidationReason.ValidationFailed, confidence: 0.3 };
    });
  }

  /**
   * –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  validate(query: string, productName: string, category: string): ValidationResult {
    const rules = CATEGORY_RULES[category as keyof typeof CATEGORY_RULES];
    if (!rules) {
      const isValid = productName.toLowerCase().includes(query.toLowerCase());
      return {
        isValid,
        reason: isValid ? '–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞' : '–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–æ—Å',
        confidence: 0.5
      };
    }
    return this.validateByRules(query, productName, category, rules);
  }
} 