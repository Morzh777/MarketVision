import { Injectable, Logger } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { DbApiHttpClient } from '../http-clients/db-api.client';
import { TrendAnalysisService, TrendAnalysisResult } from './trend-analysis.service';
import { CategoriesService } from './categories.service';

@Injectable()
export class PriceUpdateService {
  private readonly logger = new Logger(PriceUpdateService.name);

  constructor(
    private readonly dbApiClient: DbApiHttpClient,
    private readonly trendAnalysisService: TrendAnalysisService,
    private readonly categoriesService: CategoriesService,
  ) {}

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
   */
  @Cron(CronExpression.EVERY_6_HOURS)
  async updateRecommendedPrices(): Promise<void> {
    this.logger.log('üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const categories = await this.categoriesService.getAllCategories();
      
      for (const category of categories) {
        await this.updatePricesForCategory(category);
      }
      
      this.logger.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω:', error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async updatePricesForCategory(categoryKey: string): Promise<void> {
    this.logger.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryKey}`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const queriesResponse = await this.dbApiClient.getRecommendedPricesForQueries([], categoryKey);
      const queries = Array.from(queriesResponse.keys());
      
      if (queries.length === 0) {
        this.logger.log(`‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryKey}`);
        return;
      }

      let updatedCount = 0;
      let errorCount = 0;

      for (const query of queries) {
        try {
          const originalPrice = queriesResponse.get(query);
          if (!originalPrice) continue;

          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
          const trendResult = await this.trendAnalysisService.adaptRecommendedPrice(
            query, 
            originalPrice, 
            categoryKey
          );

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —ç—Ç–æ
          if (trendResult.shouldUpdate) {
            await this.updateQueryRecommendedPrice(categoryKey, query, trendResult.adaptedRecommendedPrice);
            updatedCount++;
            
            this.logger.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è "${query}": ${originalPrice}‚ÇΩ ‚Üí ${trendResult.adaptedRecommendedPrice}‚ÇΩ (${trendResult.trend.direction} ${trendResult.trend.percentage.toFixed(2)}%)`);
          } else {
            this.logger.debug(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è "${query}": –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥`);
          }

        } catch (error) {
          errorCount++;
          this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è "${query}":`, error);
        }
      }

      this.logger.log(`üìà –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryKey}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} —Ü–µ–Ω, –æ—à–∏–±–æ–∫ ${errorCount}`);

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryKey}:`, error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
   */
  private async updateQueryRecommendedPrice(
    categoryKey: string, 
    query: string, 
    newRecommendedPrice: number
  ): Promise<void> {
    try {
      const response = await fetch(`${this.dbApiClient['baseURL']}/categories/queries/recommended-price`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          categoryKey,
          query,
          recommended_price: newRecommendedPrice
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      this.logger.debug(`‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è "${query}": ${newRecommendedPrice}‚ÇΩ`);

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è "${query}":`, error);
      throw error;
    }
  }

  /**
   * –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async updatePriceForQuery(categoryKey: string, query: string): Promise<TrendAnalysisResult | null> {
    this.logger.log(`üîß –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è "${query}" –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryKey}`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É
      const recommendedPrices = await this.dbApiClient.getRecommendedPricesForQueries([query], categoryKey);
      const originalPrice = recommendedPrices.get(query);
      
      if (!originalPrice) {
        this.logger.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è "${query}"`);
        return null;
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É
      const trendResult = await this.trendAnalysisService.adaptRecommendedPrice(
        query, 
        originalPrice, 
        categoryKey
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
      if (trendResult.shouldUpdate) {
        await this.updateQueryRecommendedPrice(categoryKey, query, trendResult.adaptedRecommendedPrice);
      }

      return trendResult;

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è "${query}":`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω
   */
  async getUpdateStats(): Promise<{
    lastUpdate: Date;
    totalQueries: number;
    updatedQueries: number;
    errorQueries: number;
  }> {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    return {
      lastUpdate: new Date(),
      totalQueries: 0,
      updatedQueries: 0,
      errorQueries: 0
    };
  }
}
