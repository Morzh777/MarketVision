import { Injectable } from '@nestjs/common';
import { OzonApiClient } from '../grpc-clients/ozon-api.client';
import { WbApiClient } from '../grpc-clients/wb-api.client';
import { ProductRequestDto } from '../dto/product-request.dto';
import { fileLogger } from '../utils/logger';
import { DbConfigService } from './db-config.service';

@Injectable()
export class ProductAggregatorService {
  constructor(
    private readonly ozonApiClient: OzonApiClient,
    private readonly wbApiClient: WbApiClient,
    private readonly dbConfigService: DbConfigService,
  ) {}

  /**
   * –ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ WB –∏ Ozon API –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   * @param request - DTO —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞
   * @returns Promise —Å –º–∞—Å—Å–∏–≤–æ–º –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –æ–±–æ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   */
  async fetchAllProducts(request: ProductRequestDto): Promise<any[]> {
    fileLogger.log(`–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ WB –∏ Ozon –¥–ª—è ${request.queries.length} –∑–∞–ø—Ä–æ—Å–æ–≤`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç–¥–µ–ª—å–Ω–æ
    const allProducts = [];
    for (const query of request.queries) {
      const singleRequest = {
        ...request,
        queries: [query]
      };
      
      const [wbProducts, ozonProducts] = await Promise.all([
        this.getProductsFromApi(singleRequest, this.wbApiClient, 'wb'),
        this.getProductsFromApi(singleRequest, this.ozonApiClient, 'ozon')
      ]);
      
      allProducts.push(...wbProducts, ...ozonProducts);
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    fileLogger.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: ${allProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    
    return allProducts;
  }

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API.
   * @param request - DTO —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞
   * @param client - gRPC-–∫–ª–∏–µ–Ω—Ç (WB –∏–ª–∏ Ozon)
   * @param source - —Å—Ç—Ä–æ–∫–∞-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ('wb' –∏–ª–∏ 'ozon')
   * @returns Promise —Å –º–∞—Å—Å–∏–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º source
   * @throws –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É
   */
  private async getProductsFromApi(
    request: ProductRequestDto,
    client: { filterProducts: Function },
    source: string
  ): Promise<any[]> {
    const allProducts: any[] = [];
    for (const query of request.queries) {
      let lastError = null;
      let success = false;
      for (let attempt = 1; attempt <= 3; attempt++) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ë–î
          let category = request.category;
          let extra: any = {};
          if (source === 'wb') {
            // –î–ª—è WB API category - —ç—Ç–æ wb_id (—á–∏—Å–ª–æ)
            const wbCategoryId = await this.dbConfigService.getWbCategoryId(request.category);
            category = wbCategoryId || request.category;
            extra.categoryKey = request.category;
            
            // –ü–æ–ª—É—á–∞–µ–º exactmodels –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –ë–î
            const queryExactmodels = await this.dbConfigService.getExactModelsForQuery(request.category, query, 'wb');
            if (queryExactmodels) {
              extra.exactmodels = queryExactmodels;
            }
          }
          if (source === 'ozon') {
            // –î–ª—è Ozon API category - —ç—Ç–æ ozon_id (—Å—Ç—Ä–æ–∫–∞, category_slug)
            const ozonCategoryId = await this.dbConfigService.getOzonCategoryId(request.category);
            category = ozonCategoryId || request.category;
            extra.categoryKey = request.category;
            
            // platform_id –∏ exactmodels - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Ozon API
            if (request.platform_id) {
              extra.platform_id = request.platform_id;
            }
            if (request.exactmodels) {
              extra.exactmodels = request.exactmodels;
            }
          }
          console.log(`üîç DEBUG - request.exactmodels: "${request.exactmodels}"`);
          console.log(`üîç DEBUG - extra.exactmodels: "${extra.exactmodels}"`);
          
          const response = await client.filterProducts({
            query,
            all_queries: [query],
            category,
            exactmodels: request.exactmodels || extra.exactmodels,
            platform_id: request.platform_id || extra.platform_id,
            exclude_keywords: request.exclude_keywords || []
          });
          if (response.products && Array.isArray(response.products) && response.products.length > 0) {
            const productsWithSource = response.products.map((product: any) => ({
              ...product,
              source
            }));
            allProducts.push(...productsWithSource);
            success = true;
            break; // —É—Å–ø–µ—Ö ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ retry-—Ü–∏–∫–ª–∞
          } else {
            throw new Error('API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
          }
        } catch (error) {
          lastError = error;
          fileLogger.error(`–û—à–∏–±–∫–∞ ${source.toUpperCase()} API (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}) –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "${query}": ${error}`);
          if (attempt < 3) {
            await new Promise(res => setTimeout(res, 2000)); // –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
          }
        }
      }
      if (!success && lastError) {
        fileLogger.error(`‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è ${source.toUpperCase()} API –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}": ${lastError}`);
      }
    }
    return allProducts;
  }
} 