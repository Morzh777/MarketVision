import { Injectable, Logger } from '@nestjs/common';
import { DbApiHttpClient } from '../http-clients/db-api.client';

export interface PriceTrend {
  direction: 'up' | 'down' | 'stable';
  percentage: number; // –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  confidence: number; // —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç—Ä–µ–Ω–¥–µ (0-1)
  period: number; // –¥–Ω–µ–π –∞–Ω–∞–ª–∏–∑–∞
  volatility: number; // –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
  dataPoints: number; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö
}

export interface TrendAnalysisResult {
  originalRecommendedPrice: number;
  adaptedRecommendedPrice: number;
  dynamicTolerance: number;
  trend: PriceTrend;
  shouldUpdate: boolean; // –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É
}

@Injectable()
export class TrendAnalysisService {
  private readonly logger = new Logger(TrendAnalysisService.name);

  constructor(private readonly dbApiClient: DbApiHttpClient) {}

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥ —Ü–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
   */
  async analyzePriceTrend(query: string, days: number = 30): Promise<PriceTrend> {
    this.logger.log(`üîç –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: "${query}" –∑–∞ ${days} –¥–Ω–µ–π`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω (–±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)
      const priceHistory = await this.dbApiClient.getPriceHistory(query, days * 2);
      
      if (priceHistory.length < 5) {
        this.logger.warn(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞: ${priceHistory.length} –∑–∞–ø–∏—Å–µ–π`);
        return {
          direction: 'stable',
          percentage: 0,
          confidence: 0.1,
          period: days,
          volatility: 0,
          dataPoints: priceHistory.length
        };
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - days);
      
      const recentData = priceHistory.filter(record => 
        new Date(record.created_at) >= cutoffDate
      );

      if (recentData.length < 3) {
        this.logger.warn(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö: ${recentData.length} –∑–∞–ø–∏—Å–µ–π`);
        return {
          direction: 'stable',
          percentage: 0,
          confidence: 0.2,
          period: days,
          volatility: this.calculateVolatility(recentData.map(r => r.price)),
          dataPoints: recentData.length
        };
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
      recentData.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());

      const prices = recentData.map(r => r.price);
      const trend = this.calculateTrend(prices);
      const volatility = this.calculateVolatility(prices);

      this.logger.log(`üìä –¢—Ä–µ–Ω–¥: ${trend.direction}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${trend.percentage.toFixed(2)}%, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${trend.confidence.toFixed(2)}`);

      return {
        ...trend,
        period: days,
        volatility,
        dataPoints: recentData.length
      };

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è "${query}":`, error);
      return {
        direction: 'stable',
        percentage: 0,
        confidence: 0.1,
        period: days,
        volatility: 0,
        dataPoints: 0
      };
    }
  }

  /**
   * –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞
   */
  async adaptRecommendedPrice(
    query: string, 
    originalRecommendedPrice: number,
    category: string
  ): Promise<TrendAnalysisResult> {
    this.logger.log(`üîÑ –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è "${query}": ${originalRecommendedPrice}‚ÇΩ`);

    try {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥
      const trend = await this.analyzePriceTrend(query, 30);

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É
      const adaptedPrice = this.calculateAdaptedPrice(originalRecommendedPrice, trend);
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–æ–ø—É—Å–∫
      const dynamicTolerance = this.calculateDynamicTolerance(trend);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É
      const shouldUpdate = this.shouldUpdateRecommendedPrice(trend, originalRecommendedPrice, adaptedPrice);

      const result: TrendAnalysisResult = {
        originalRecommendedPrice,
        adaptedRecommendedPrice: adaptedPrice,
        dynamicTolerance,
        trend,
        shouldUpdate
      };

      this.logger.log(`‚úÖ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${originalRecommendedPrice}‚ÇΩ ‚Üí ${adaptedPrice}‚ÇΩ (${((adaptedPrice - originalRecommendedPrice) / originalRecommendedPrice * 100).toFixed(2)}%)`);

      return result;

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ü–µ–Ω—ã –¥–ª—è "${query}":`, error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      return {
        originalRecommendedPrice,
        adaptedRecommendedPrice: originalRecommendedPrice,
        dynamicTolerance: 0.3, // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–æ–ø—É—Å–∫
        trend: {
          direction: 'stable',
          percentage: 0,
          confidence: 0.1,
          period: 30,
          volatility: 0,
          dataPoints: 0
        },
        shouldUpdate: false
      };
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å—Å–∏–≤–∞ —Ü–µ–Ω
   */
  private calculateTrend(prices: number[]): { direction: 'up' | 'down' | 'stable'; percentage: number; confidence: number } {
    if (prices.length < 2) {
      return { direction: 'stable', percentage: 0, confidence: 0 };
    }

    // –ü—Ä–æ—Å—Ç–æ–π –ª–∏–Ω–µ–π–Ω—ã–π —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    const n = prices.length;
    const x = Array.from({ length: n }, (_, i) => i);
    const y = prices;

    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
    const sumX = x.reduce((a, b) => a + b, 0);
    const sumY = y.reduce((a, b) => a + b, 0);
    const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);
    const sumXX = x.reduce((sum, xi) => sum + xi * xi, 0);

    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);
    const intercept = (sumY - slope * sumX) / n;

    // –í—ã—á–∏—Å–ª—è–µ–º R¬≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    const yMean = sumY / n;
    const ssRes = y.reduce((sum, yi, i) => {
      const predicted = slope * i + intercept;
      return sum + Math.pow(yi - predicted, 2);
    }, 0);
    const ssTot = y.reduce((sum, yi) => sum + Math.pow(yi - yMean, 2), 0);
    const rSquared = 1 - (ssRes / ssTot);

    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    const startPrice = intercept;
    const endPrice = slope * (n - 1) + intercept;
    const percentage = ((endPrice - startPrice) / startPrice) * 100;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    const confidence = Math.max(0, Math.min(1, rSquared));
    const threshold = 2; // 2% –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

    let direction: 'up' | 'down' | 'stable';
    if (Math.abs(percentage) < threshold) {
      direction = 'stable';
    } else if (percentage > 0) {
      direction = 'up';
    } else {
      direction = 'down';
    }

    return {
      direction,
      percentage: Math.abs(percentage),
      confidence
    };
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
   */
  private calculateVolatility(prices: number[]): number {
    if (prices.length < 2) return 0;

    const mean = prices.reduce((a, b) => a + b, 0) / prices.length;
    const variance = prices.reduce((sum, price) => sum + Math.pow(price - mean, 2), 0) / prices.length;
    return Math.sqrt(variance);
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É
   */
  private calculateAdaptedPrice(originalPrice: number, trend: PriceTrend): number {
    if (trend.confidence < 0.5) {
      // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ç—Ä–µ–Ω–¥–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
      return originalPrice;
    }

    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞
    const adjustment = originalPrice * (trend.percentage / 100);
    
    if (trend.direction === 'up') {
      return originalPrice + adjustment;
    } else if (trend.direction === 'down') {
      return originalPrice - adjustment;
    } else {
      return originalPrice;
    }
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–æ–ø—É—Å–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞
   */
  private calculateDynamicTolerance(trend: PriceTrend): number {
    const baseTolerance = 0.3; // 30% –±–∞–∑–æ–≤—ã–π –¥–æ–ø—É—Å–∫

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ–ø—É—Å–∫ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    const volatilityFactor = Math.min(trend.volatility / 10000, 0.2); // –º–∞–∫—Å +20%

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ–ø—É—Å–∫ –ø—Ä–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–¥–∞
    const instabilityFactor = trend.confidence < 0.7 ? 0.1 : 0;

    // –£–º–µ–Ω—å—à–∞–µ–º –¥–æ–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–º —Ç—Ä–µ–Ω–¥–µ
    const stabilityFactor = trend.direction === 'stable' && trend.confidence > 0.8 ? -0.05 : 0;

    const finalTolerance = baseTolerance + volatilityFactor + instabilityFactor + stabilityFactor;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ–ø—É—Å–∫ —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
    return Math.max(0.15, Math.min(0.6, finalTolerance)); // –æ—Ç 15% –¥–æ 60%
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É
   */
  private shouldUpdateRecommendedPrice(
    trend: PriceTrend, 
    originalPrice: number, 
    adaptedPrice: number
  ): boolean {
    // –û–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏:
    // 1. –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç—Ä–µ–Ω–¥–µ (>70%)
    // 2. –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (>5%)
    // 3. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (>10 —Ç–æ—á–µ–∫)
    
    const priceChangePercent = Math.abs((adaptedPrice - originalPrice) / originalPrice) * 100;
    
    return trend.confidence > 0.7 && 
           priceChangePercent > 5 && 
           trend.dataPoints > 10;
  }
}
