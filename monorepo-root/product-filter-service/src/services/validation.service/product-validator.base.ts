import { Injectable, Logger } from '@nestjs/common';

export interface ValidationResult {
  isValid: boolean;
  reason: string;
  confidence?: number;
}

export interface ValidationCheck {
  passed: boolean;
  reason: string;
  confidence: number;
}

export interface ValidationRules {
  accessoryWords?: string[];
  minNameLength?: number;
  price?: number;
  product?: any;
  recommendedPrice?: number;
  dynamicTolerance?: number;
}

export interface StrictTokenMatchOptions {
  disallowPrevAlnum?: boolean;
  disallowNextLetter?: boolean;
}

export type ProductCategory = string;

@Injectable()
export abstract class ProductValidatorBase {
  protected readonly logger = new Logger(this.constructor.name);

  constructor() {
    this.logger.log(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞: ${this.constructor.name}`);
  }

  // ===== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –í–ê–õ–ò–î–ê–¶–ò–ò =====

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –∫–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å–≤–æ—é –ª–æ–≥–∏–∫—É
   */
  protected abstract validateProduct(query: string, name: string, rules: ValidationRules): ValidationResult;

  /**
   * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞—Ö
   */
  protected validateProductStandard(query: string, name: string, rules: ValidationRules): ValidationResult {
    this.logValidation(query, name);

    const normalizedName = this.normalize(name);
    const normalizedQuery = this.normalize(query);

    const checks: ValidationCheck[] = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
    if (rules.accessoryWords && this.isAccessory(normalizedName, rules.accessoryWords)) {
      checks.push({ passed: false, reason: 'accessory', confidence: 0.9 });
    } else {
      checks.push({ passed: true, reason: 'not-accessory', confidence: 0.9 });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–∞
    checks.push({ passed: true, reason: 'single-model', confidence: 0.9 });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–ø—Ä–æ—Å–∞
    if (!this.validateNameQueryMatch(normalizedName, normalizedQuery)) {
      checks.push({ passed: false, reason: 'no-match', confidence: 0.7 });
    } else {
      checks.push({ passed: true, reason: 'query-match', confidence: 0.8 });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π –æ—Ç –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–æ–≤
    const otherModels = this.getOtherModels();
    if (otherModels.length > 0) {
      const categoryName = this.getValidatorCategory();
      const otherModelsChecks = this.checkOtherModels(normalizedQuery, normalizedName, otherModels, categoryName);
      checks.push(...otherModelsChecks);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å—é
    if (rules.recommendedPrice && rules.product?.price) {
      const tolerance = rules.dynamicTolerance || 0.3; // –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏–ª–∏ 30% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const priceCheck = this.validatePriceByRecommended(rules.product.price, rules.recommendedPrice, tolerance);
      checks.push(priceCheck);
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    return this.analyzeValidationChecks(checks);
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
   */
  async validateSingleProduct(query: string, productName: string, category: string, product?: any, adaptedPriceData?: { price: number; tolerance: number }): Promise<ValidationResult> {
    const rules = this.getCategoryRules(category);
    if (!rules) {
      return this.createResult(false, 'unknown-category', 0.1);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É, —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–¥—É–∫—Ç –≤ –ø—Ä–∞–≤–∏–ª–∞
    const enhancedRules = {
      ...rules,
      recommendedPrice: adaptedPriceData?.price,
      dynamicTolerance: adaptedPriceData?.tolerance,
      product
    };
    
    // –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é, –∞ –Ω–µ –≤—Å–µ–≥–¥–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é
    return this.validateProduct(query, productName, enhancedRules);
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
   */
  async groupAndValidateByQuery(products: any[], category: string, adaptedPrices?: Map<string, { price: number; tolerance: number }>): Promise<ValidationResult[]> {
    const results: ValidationResult[] = [];
    
    for (const product of products) {
      const query = product.query;
      const name = product.name;
      
      if (!query || !name) {
        results.push(this.createResult(false, 'missing-query-or-name', 0.1));
        continue;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –∏ —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      const adaptedPriceData = adaptedPrices?.get(query);
      
      const result = await this.validateSingleProduct(query, name, category, product, adaptedPriceData);
      results.push(result);
    }
    
    return results;
  }

  // ===== –ê–ë–°–¢–†–ê–ö–¢–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ù–ê–°–õ–ï–î–ù–ò–ö–û–í =====

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –∫–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–≤–æ–∏ –ø—Ä–∞–≤–∏–ª–∞
   */
  protected abstract getCategoryRules(category: string): ValidationRules;

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
   */
  protected abstract getValidatorCategory(): string;

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ - –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
   * @returns –º–∞—Å—Å–∏–≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
   */
  protected getOtherModels(): string[] {
    return [];
  }

  // ===== –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –í–ê–õ–ò–î–ê–¶–ò–ò =====

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ - —É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
   */
  protected normalize(str: string): string {
    return str.toLowerCase().replace(/\s+/g, '');
  }

  /**
   * –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏.
   * –£—Å–ª–æ–≤–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:
   *  - –ø–µ—Ä–µ–¥ —Ç–æ–∫–µ–Ω–æ–º –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã
   *  - —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—É–∫–≤—ã ("B760M" –Ω–µ –ø—Ä–æ–π–¥—ë—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "B760")
   */
  protected isStrictTokenMatch(
    productName: string,
    token: string,
    options: StrictTokenMatchOptions = { disallowPrevAlnum: true, disallowNextLetter: true }
  ): boolean {
    const nameLower = productName.toLowerCase();
    const queryToken = token.toLowerCase().trim();

    const idx = nameLower.indexOf(queryToken);
    if (idx === -1) return false;

    const prevChar = idx > 0 ? nameLower[idx - 1] : '';
    const nextChar = idx + queryToken.length < nameLower.length ? nameLower[idx + queryToken.length] : '';

    if (options.disallowPrevAlnum && /[a-z0-9]/.test(prevChar)) {
      return false;
    }

    if (options.disallowNextLetter && /[a-z]/.test(nextChar)) {
      return false;
    }

    return true;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å–∞ - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
   */
  protected validateNameQueryMatch(normalizedName: string, normalizedQuery: string): boolean {
    return normalizedName.includes(normalizedQuery);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ –∏–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è–º–∏
   * –ò—Å–∫–ª—é—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã —Å —Å–∏–º–≤–æ–ª–∞–º–∏: ‚âà, ~, vs, –∏–ª–∏, or
   * –ù–ï –∏—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ (5070 5070) –∏–ª–∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
   */
  protected hasMultipleModels(normalizedName: string): boolean {
    const comparisonPatterns = [
      '‚âà', '~', 'vs', '–∏–ª–∏', 'or', 'vs.', '—Å—Ä–∞–≤–Ω', 'comparison',
      '–∞–Ω–∞–ª–æ–≥', '–∫–∞–∫', 'like', '–ø–æ–¥–æ–±–Ω', 'similar', '–ø—Ä–æ—Ç–∏–≤', 'against'
    ];
    
    return comparisonPatterns.some(pattern => 
      normalizedName.includes(this.normalize(pattern))
    );
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã - –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
   */
  protected isAccessory(normalizedName: string, accessoryWords: string[]): boolean {
    return accessoryWords.some(word => normalizedName.includes(this.normalize(word)));
  }

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
   * @param normalizedQuery - –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
   * @param normalizedName - –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
   * @param otherModels - —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns true –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å
   */
  protected hasOtherModel(normalizedQuery: string, normalizedName: string, otherModels: string[]): boolean {
    return otherModels.some(model => 
      model !== normalizedQuery && 
      !normalizedQuery.includes(model) && 
      normalizedName.includes(model)
    );
  }


  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º ValidationCheck
   * @param normalizedQuery - –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
   * @param normalizedName - –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
   * @param otherModels - —Å–ø–∏—Å–æ–∫ –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @param categoryName - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è reason
   * @returns ValidationCheck –º–∞—Å—Å–∏–≤
   */
  protected checkOtherModels(
    normalizedQuery: string, 
    normalizedName: string, 
    otherModels: string[], 
    categoryName: string
  ): ValidationCheck[] {
    const checks: ValidationCheck[] = [];

    if (this.hasOtherModel(normalizedQuery, normalizedName, otherModels)) {
      checks.push({ 
        passed: false, 
        reason: `other-${categoryName}-model`, 
        confidence: 0.9 
      });
    } else {
      checks.push({ 
        passed: true, 
        reason: `no-other-${categoryName}-models`, 
        confidence: 0.9 
      });
    }

    return checks;
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –¥–æ–ø—É—Å–∫–æ–º
   * @param productPrice - —Ü–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
   * @param recommendedPrice - —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
   * @param tolerance - –¥–æ–ø—É—Å–∫ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0.3 = 30%)
   * @returns ValidationCheck —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  protected validatePriceByRecommended(productPrice: number, recommendedPrice: number, tolerance: number = 0.3): ValidationCheck {
    const minPrice = recommendedPrice * (1 - tolerance);
    const maxPrice = recommendedPrice * (1 + tolerance);

    const isWithinRange = productPrice >= minPrice && productPrice <= maxPrice;
    
    if (isWithinRange) {
      return {
        passed: true,
        reason: 'price-within-recommended-range',
        confidence: 0.8
      };
    } else {
      const deviation = Math.abs(productPrice - recommendedPrice) / recommendedPrice;
      const reason = productPrice < minPrice ? 'price-below-recommended' : 'price-above-recommended';
      
      return {
        passed: false,
        reason: reason,
        confidence: 0.9
      };
    }
  }

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
   */
  private analyzeValidationChecks(checks: ValidationCheck[]): ValidationResult {
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –Ω–µ—É–¥–∞—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ç–æ–≤–∞—Ä –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
    const failedChecks = checks.filter(check => !check.passed);
    if (failedChecks.length > 0) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–µ—É–¥–∞—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å –Ω–∞–∏–≤—ã—Å—à–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
      const mostConfidentFailed = failedChecks.reduce((prev, current) => 
        current.confidence > prev.confidence ? current : prev
      );
      return this.createResult(false, mostConfidentFailed.reason, mostConfidentFailed.confidence);
    }

    // –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
    const avgConfidence = checks.reduce((sum, check) => sum + check.confidence, 0) / checks.length;
    return this.createResult(true, 'all-checks-passed', avgConfidence);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  protected createResult(isValid: boolean, reason: string, confidence: number = 0.5): ValidationResult {
    return { isValid, reason, confidence };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–æ–¥–µ–ª–∏ (–±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤)
   * @param query - –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
   * @param name - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
   * @param modelPatterns - –º–∞—Å—Å–∏–≤ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
   * @param hasSuffixes - —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
   * @returns true –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–æ–¥–µ–ª–∏
   */
  protected hasExactModelMatch(
    query: string,
    name: string,
    modelPatterns: string[],
    hasSuffixes: (name: string) => boolean
  ): boolean {
    // –ò—â–µ–º —Ç–æ—á–Ω—É—é –º–æ–¥–µ–ª—å –≤ –∑–∞–ø—Ä–æ—Å–µ
    const queryModel = modelPatterns.find(pattern => query.includes(pattern));
    if (!queryModel) return true; // –ï—Å–ª–∏ –Ω–µ –º–æ–¥–µ–ª—å - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ—á–Ω–∞—è –º–æ–¥–µ–ª—å –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: –∏—â–µ–º –º–æ–¥–µ–ª—å –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    const hasModel = name.includes(queryModel);
    const hasInvalidSuffixes = hasSuffixes(name);
    
    return hasModel && !hasInvalidSuffixes;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–æ–¥–µ–ª—å –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
   * @param normalizedQuery - –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
   * @param modelPatterns - –º–∞—Å—Å–∏–≤ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
   * @returns –Ω–∞–π–¥–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –∏–ª–∏ null
   */
  protected extractModelFromQuery(normalizedQuery: string, modelPatterns: RegExp[]): string | null {
    for (const pattern of modelPatterns) {
      const matches = normalizedQuery.match(pattern);
      if (matches && matches.length > 0) {
        return matches[0];
      }
    }
    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª–∏–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –º–æ–¥–µ–ª–µ–π –≤ —Å–∫–æ–±–∫–∞—Ö
   * @param normalizedName - –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
   * @param modelPattern - –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
   * @param maxModels - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –≤ —Å–∫–æ–±–∫–∞—Ö
   * @returns true –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º–æ–¥–µ–ª–µ–π
   */
  protected hasTooManyModelsInParentheses(
    normalizedName: string, 
    modelPattern: RegExp, 
    maxModels: number = 3
  ): boolean {
    const parenthesesContent = normalizedName.match(/\(([^)]+)\)/g);
    if (parenthesesContent) {
      for (const content of parenthesesContent) {
        const modelCount = (content.match(modelPattern) || []).length;
        if (modelCount > maxModels) {
          return true;
        }
      }
    }
    return false;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
   * @param normalizedName - –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
   * @param modelPattern - –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
   * @returns true –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
   */
  protected hasMultipleModelsInParentheses(
    normalizedName: string, 
    modelPattern: RegExp
  ): boolean {
    const parenthesesContent = normalizedName.match(/\(([^)]+)\)/g);
    if (parenthesesContent) {
      for (const content of parenthesesContent) {
        // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –≤ —Å–∫–æ–±–∫–∞—Ö
        const comparisonPatterns = [
          '‚âà', '~', 'vs', '–∏–ª–∏', 'or', 'vs.', '—Å—Ä–∞–≤–Ω', 'comparison',
          '–∞–Ω–∞–ª–æ–≥', '–∫–∞–∫', 'like', '–ø–æ–¥–æ–±–Ω', 'similar', '–ø—Ä–æ—Ç–∏–≤', 'against'
        ];
        
        if (comparisonPatterns.some(pattern => 
          content.toLowerCase().includes(this.normalize(pattern))
        )) {
          return true;
        }
      }
    }
    return false;
  }

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
   * @param normalizedQuery - –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
   * @param normalizedName - –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
   * @param modelPatterns - –º–∞—Å—Å–∏–≤ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
   * @param hasSuffixes - —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
   * @returns ValidationResult —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  protected validateModelMatch(
    normalizedQuery: string,
    normalizedName: string,
    modelPatterns: RegExp[],
    hasSuffixes: (name: string) => boolean
  ): ValidationResult {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const queryModel = this.extractModelFromQuery(normalizedQuery, modelPatterns);
    
    if (!queryModel) {
      // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
      return { isValid: true, reason: 'no-model-in-query', confidence: 0.5 };
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–∑ –º–æ–¥–µ–ª–∏ (5070 –∏–∑ rtx5070)
    const modelNumbers = queryModel.match(/\d{4}/);
    const modelDigits = modelNumbers ? modelNumbers[0] : null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –º–æ–¥–µ–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (5070)
    const hasModelDigits = modelDigits && normalizedName.includes(modelDigits);
    
    if (!hasModelDigits) {
      return {
        isValid: false,
        confidence: 0.9,
        reason: 'no-match'
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã —Ç–æ–ª—å–∫–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è (–¥–æ —Å–∫–æ–±–æ–∫)
    const mainPart = normalizedName.split('(')[0];
    if (hasSuffixes(mainPart)) {
      return {
        isValid: false,
        confidence: 0.9,
        reason: 'model-suffix-mismatch'
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    const multipleModelsResult = this.checkMultipleModels(normalizedName, modelPatterns);
    if (!multipleModelsResult.isValid) {
      return multipleModelsResult;
    }
    
    return { isValid: true, reason: 'model-match', confidence: 0.9 };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
   * @param normalizedName - –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
   * @param modelPatterns - –º–∞—Å—Å–∏–≤ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
   * @returns ValidationResult —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  protected checkMultipleModels(normalizedName: string, modelPatterns: RegExp[]): ValidationResult {
    // –ò—â–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, –Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã–µ –º–æ–¥–µ–ª–∏ (RTX, GTX, RX)
    const fullModelMatches: string[] = [];
    for (const pattern of modelPatterns) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
      if (pattern.source === '\\b\\d{4}\\b') {
        continue;
      }
      const matches = normalizedName.match(pattern);
      if (matches) {
        fullModelMatches.push(...matches);
      }
    }
    
    if (fullModelMatches.length > 1) {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–æ–¥–µ–ª–∏ (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
      const normalizedModels = fullModelMatches.map(m => m.toLowerCase().replace(/\s+/g, ''));
      const uniqueModels = [...new Set(normalizedModels)];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏, –∞ –Ω–µ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
      // –ù–∞–ø—Ä–∏–º–µ—Ä, "geforce" –∏ "rtx5070" - —ç—Ç–æ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å, –∞ –Ω–µ —Ä–∞–∑–Ω—ã–µ
      const hasDifferentModels = uniqueModels.some(model => {
        const otherModels = uniqueModels.filter(m => m !== model);
        return otherModels.some(other => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞
          return !model.includes(other) && !other.includes(model);
        });
      });
      
      if (hasDifferentModels) {
        return {
          isValid: false,
          confidence: 0.9,
          reason: 'multiple-models'
        };
      }
    }
    
    return { isValid: true, reason: 'single-model', confidence: 0.9 };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ –º–æ–¥–µ–ª–∏ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
   * @param name - –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns true –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã
   */
  protected hasModelSuffixes(name: string): boolean {
    return false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—É—Ñ—Ñ–∏–∫—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  protected logValidation(query: string, name: string): void {
    // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    // console.log(`[${this.constructor.name} DEBUG]`, {
    //   query,
    //   name,
    //   normalizedQuery: this.normalize(query),
    //   normalizedName: this.normalize(name)
    // });
  }
} 