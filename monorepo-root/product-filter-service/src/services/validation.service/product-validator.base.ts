import { Injectable, Logger } from '@nestjs/common';
import { CategoryConfigService } from '../../config/categories.config';

export interface ValidationResult {
  isValid: boolean;
  reason: string;
  confidence?: number;
}

export interface ValidationRules {
  accessoryWords?: string[];
  minNameLength?: number;
  price?: number;
  product?: any;
}

export type ProductCategory = string; // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –±–µ—Ä–µ—Ç—Å—è –∏–∑ CategoryConfigService.getAllCategories()

@Injectable()
export abstract class ProductValidatorBase {
  protected readonly logger = new Logger(this.constructor.name);

  constructor() {
    this.logger.log(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞: ${this.constructor.name}`);
  }

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –∫–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å–≤–æ—é –ª–æ–≥–∏–∫—É
   */
  protected abstract validateProduct(query: string, name: string, rules: ValidationRules): ValidationResult;

  /**
   * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞—Ö
   */
  protected validateProductStandard(query: string, name: string, rules: ValidationRules): ValidationResult {
    this.logValidation(query, name);

    const normalizedName = this.normalize(name);
    const normalizedQuery = this.normalize(query);

    if (rules.accessoryWords && this.isAccessory(normalizedName, rules.accessoryWords)) {
      return this.createResult(false, 'accessory', 0.9);
    }

    if (!this.validateNameQueryMatch(normalizedName, normalizedQuery)) {
      return this.createResult(false, 'no-match', 0.7);
    }

    return this.createResult(true, 'all-checks-passed', 0.95);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –∫–∞–∂–¥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–≤–æ–∏ –ø—Ä–∞–≤–∏–ª–∞
   */
  protected abstract getCategoryRules(category: string): ValidationRules;

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
   */
  protected abstract getValidatorCategory(): string;

  // ===== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´-–£–¢–ò–õ–ò–¢–´ =====

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ - —É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
   */
  protected normalize(str: string): string {
    return str.toLowerCase().replace(/\s+/g, '');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å–∞ - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
   */
  protected validateNameQueryMatch(normalizedName: string, normalizedQuery: string): boolean {
    return normalizedName.includes(normalizedQuery);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã - –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
   */
  protected isAccessory(normalizedName: string, accessoryWords: string[]): boolean {
    return accessoryWords.some(word => normalizedName.includes(this.normalize(word)));
  }


  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  protected createResult(isValid: boolean, reason: string, confidence: number = 0.5): ValidationResult {
    return { isValid, reason, confidence };
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  protected logValidation(query: string, name: string): void {
    console.log(`[${this.constructor.name} DEBUG]`, {
      query,
      name,
      normalizedQuery: this.normalize(query),
      normalizedName: this.normalize(name)
    });
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
   */
  async validateSingleProduct(query: string, productName: string, category: string): Promise<ValidationResult> {
    const rules = this.getCategoryRules(category);
    if (!rules) {
      return this.createResult(false, 'unknown-category', 0.1);
    }
    return this.validateProductStandard(query, productName, rules);
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
   */
  async groupAndValidateByQuery(products: any[], category: string): Promise<ValidationResult[]> {
    const results: ValidationResult[] = [];
    
    for (const product of products) {
      const query = product.query;
      const name = product.name;
      
      if (!query || !name) {
        results.push(this.createResult(false, 'missing-query-or-name', 0.1));
        continue;
      }
      
      const result = await this.validateSingleProduct(query, name, category);
      results.push(result);
    }
    
    return results;
  }

} 