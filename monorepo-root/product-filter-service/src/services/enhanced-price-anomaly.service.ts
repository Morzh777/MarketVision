import { Injectable, Logger } from '@nestjs/common';

export interface PriceAnomalyConfig {
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –∫–∞–∫ –∞–Ω–æ–º–∞–ª–∏—è
  minPercentageDifference: number;
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  minProductsForAnalysis: number;
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –¥–µ—à—ë–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º
  maxSuspiciousPrice: number;
  // –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏
  zScoreThreshold: number;
  iqrMultiplier: number;
}

const DEFAULT_CONFIG: PriceAnomalyConfig = {
  minPercentageDifference: 0.3, // 30%
  minProductsForAnalysis: 2,
  maxSuspiciousPrice: 1000, // –¥–æ 1000 —Ä—É–±–ª–µ–π —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–µ—à—ë–≤—ã–º
  zScoreThreshold: 2.0, // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
  iqrMultiplier: 1.5
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const CATEGORY_CONFIGS: Record<string, Partial<PriceAnomalyConfig>> = {
  videocards: {
    minPercentageDifference: 0.4, // –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –∏–º–µ—é—Ç –±–æ–ª—å—à–∏–π —Ä–∞–∑–±—Ä–æ—Å —Ü–µ–Ω
    maxSuspiciousPrice: 5000,
    zScoreThreshold: 2.5
  },
  processors: {
    minPercentageDifference: 0.35,
    maxSuspiciousPrice: 3000,
    zScoreThreshold: 2.0
  },
  motherboards: {
    minPercentageDifference: 0.3,
    maxSuspiciousPrice: 2000,
    zScoreThreshold: 2.0
  },
  playstation: {
    minPercentageDifference: 0.25, // –∫–æ–Ω—Å–æ–ª–∏ –∏–º–µ—é—Ç –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
    maxSuspiciousPrice: 10000,
    zScoreThreshold: 1.8
  },
  nintendo_switch: {
    minPercentageDifference: 0.25,
    maxSuspiciousPrice: 8000,
    zScoreThreshold: 1.8
  }
};

export interface AnomalyDetectionResult {
  anomalousProducts: Array<{
    id: string;
    price: number;
    anomalyType: 'statistical_outlier' | 'too_cheap' | 'percentage_difference';
    confidence: number;
    explanation: string;
  }>;
  statistics: {
    mean: number;
    median: number;
    std: number;
    q1: number;
    q3: number;
    iqr: number;
    priceRange: { min: number; max: number };
  };
}

@Injectable()
export class EnhancedPriceAnomalyService {
  private readonly logger = new Logger(EnhancedPriceAnomalyService.name);

  /**
   * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
   */
  detectAnomalies(products: any[], category: string): AnomalyDetectionResult {
    if (products.length < 2) {
      return this.createEmptyResult();
    }

    const config = this.getConfigForCategory(category);
    const prices = products.map(p => p.price).filter(p => p > 0);
    
    if (prices.length < config.minProductsForAnalysis) {
      return this.createEmptyResult();
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const statistics = this.calculateStatistics(prices);

    // –ù–æ–≤—ã–π best practice: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ IQR –∏ trimmed mean
    const iqrFilteredPrices = this.getIQRFilteredPrices(prices, statistics.q1, statistics.q3, statistics.iqr);
    const trimmedMean = this.getTrimmedMean(iqrFilteredPrices, 0.1);
    const robustMedian = this.getMedian(iqrFilteredPrices);

    const anomalousProducts: AnomalyDetectionResult['anomalousProducts'] = [];

    // –ú–µ—Ç–æ–¥ 1: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–±—Ä–æ—Å—ã (Z-score) ‚Äî —Ç–µ–ø–µ—Ä—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ trimmedMean
    const zScoreAnomalies = this.detectZScoreAnomalies(products, { ...statistics, mean: trimmedMean, std: statistics.std }, config);
    anomalousProducts.push(...zScoreAnomalies);

    // –ú–µ—Ç–æ–¥ 2: IQR (Interquartile Range)
    const iqrAnomalies = this.detectIQRAnomalies(products, statistics, config);
    anomalousProducts.push(...iqrAnomalies);

    // –ú–µ—Ç–æ–¥ 3: –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
    const percentageAnomalies = this.detectPercentageAnomalies(products, config);
    anomalousProducts.push(...percentageAnomalies);

    // –ú–µ—Ç–æ–¥ 4: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–µ—à—ë–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
    const tooCh–µapAnomalies = this.detectTooCh–µapProducts(products, config, category);
    anomalousProducts.push(...tooCh–µapAnomalies);

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏
    const uniqueAnomalies = this.removeDuplicatesAndRank(anomalousProducts);

    this.logger.log(
      `üîç [PriceAnomaly] –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}, —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}, ` +
      `–∞–Ω–æ–º–∞–ª–∏–π: ${uniqueAnomalies.length}, trimmedMean –ø–æ IQR: ${trimmedMean.toFixed(0)}‚ÇΩ, –º–µ–¥–∏–∞–Ω–∞ –ø–æ IQR: ${robustMedian.toFixed(0)}‚ÇΩ, IQR: [${statistics.q1.toFixed(0)}, ${statistics.q3.toFixed(0)}]`
    );

    return {
      anomalousProducts: uniqueAnomalies,
      statistics: {
        ...statistics,
        mean: trimmedMean, // –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        median: robustMedian
      }
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  private getConfigForCategory(category: string): PriceAnomalyConfig {
    const categoryConfig = CATEGORY_CONFIGS[category] || {};
    return { ...DEFAULT_CONFIG, ...categoryConfig };
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ —Ü–µ–Ω
   */
  private calculateStatistics(prices: number[]) {
    const sorted = [...prices].sort((a, b) => a - b);
    const n = sorted.length;
    
    const mean = prices.reduce((sum, price) => sum + price, 0) / n;
    const median = n % 2 === 0 
      ? (sorted[n/2 - 1] + sorted[n/2]) / 2 
      : sorted[Math.floor(n/2)];
    
    const variance = prices.reduce((sum, price) => sum + Math.pow(price - mean, 2), 0) / n;
    const std = Math.sqrt(variance);
    
    const q1Index = Math.floor(n * 0.25);
    const q3Index = Math.floor(n * 0.75);
    const q1 = sorted[q1Index];
    const q3 = sorted[q3Index];
    const iqr = q3 - q1;
    
    return {
      mean,
      median,
      std,
      q1,
      q3,
      iqr,
      priceRange: { min: sorted[0], max: sorted[n-1] }
    };
  }

  /**
   * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –ø–æ Z-score
   */
  private detectZScoreAnomalies(products: any[], statistics: any, config: PriceAnomalyConfig) {
    const anomalies: AnomalyDetectionResult['anomalousProducts'] = [];
    
    for (const product of products) {
      if (product.price <= 0) continue;
      
      const zScore = Math.abs((product.price - statistics.mean) / statistics.std);
      
      if (zScore > config.zScoreThreshold) {
        const confidence = Math.min(0.95, zScore / config.zScoreThreshold * 0.7);
        anomalies.push({
          id: product.id,
          price: product.price,
          anomalyType: 'statistical_outlier',
          confidence,
          explanation: `Z-score: ${zScore.toFixed(2)} (–ø–æ—Ä–æ–≥: ${config.zScoreThreshold})`
        });
      }
    }
    
    return anomalies;
  }

  /**
   * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –ø–æ IQR
   */
  private detectIQRAnomalies(products: any[], statistics: any, config: PriceAnomalyConfig) {
    const anomalies: AnomalyDetectionResult['anomalousProducts'] = [];
    const lowerBound = statistics.q1 - (config.iqrMultiplier * statistics.iqr);
    const upperBound = statistics.q3 + (config.iqrMultiplier * statistics.iqr);
    
    for (const product of products) {
      if (product.price <= 0) continue;
      
      if (product.price < lowerBound || product.price > upperBound) {
        const distanceFromBound = product.price < lowerBound 
          ? lowerBound - product.price 
          : product.price - upperBound;
        const confidence = Math.min(0.9, distanceFromBound / statistics.iqr * 0.5);
        
        anomalies.push({
          id: product.id,
          price: product.price,
          anomalyType: 'statistical_outlier',
          confidence,
          explanation: `IQR –≤—ã–±—Ä–æ—Å: —Ü–µ–Ω–∞ ${product.price < lowerBound ? '–Ω–∏–∂–µ' : '–≤—ã—à–µ'} –≥—Ä–∞–Ω–∏—Ü [${lowerBound.toFixed(0)}, ${upperBound.toFixed(0)}]`
        });
      }
    }
    
    return anomalies;
  }

  /**
   * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü–µ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  private detectPercentageAnomalies(products: any[], config: PriceAnomalyConfig) {
    const anomalies: AnomalyDetectionResult['anomalousProducts'] = [];
    
    if (products.length < 2) return anomalies;
    
    const sorted = [...products].sort((a, b) => a.price - b.price);
    const cheapest = sorted[0];
    const secondCheapest = sorted[1];
    
    if (secondCheapest.price > 0) {
      const difference = (secondCheapest.price - cheapest.price) / secondCheapest.price;
      
      if (difference > config.minPercentageDifference) {
        anomalies.push({
          id: cheapest.id,
          price: cheapest.price,
          anomalyType: 'percentage_difference',
          confidence: Math.min(0.9, difference * 1.5),
          explanation: `${(difference * 100).toFixed(1)}% –¥–µ—à–µ–≤–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ (${secondCheapest.price}‚ÇΩ)`
        });
      }
    }
    
    return anomalies;
  }

  /**
   * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–µ—à—ë–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
   */
  private detectTooCh–µapProducts(products: any[], config: PriceAnomalyConfig, category: string) {
    const anomalies: AnomalyDetectionResult['anomalousProducts'] = [];
    
    for (const product of products) {
      if (product.price > 0 && product.price < config.maxSuspiciousPrice) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–∞—è —Ü–µ–Ω–∞
        const suspicionLevel = this.calculateSuspicionLevel(product, category);
        
        if (suspicionLevel > 0.6) {
          anomalies.push({
            id: product.id,
            price: product.price,
            anomalyType: 'too_cheap',
            confidence: suspicionLevel,
            explanation: `–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∑–∫–∞—è —Ü–µ–Ω–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}: ${product.price}‚ÇΩ`
          });
        }
      }
    }
    
    return anomalies;
  }

  /**
   * –†–∞—Å—á—ë—Ç —É—Ä–æ–≤–Ω—è –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –¥–ª—è –¥–µ—à—ë–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
   */
  private calculateSuspicionLevel(product: any, category: string): number {
    let suspicion = 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–æ–ª–Ω—ã–π —Ç–æ–≤–∞—Ä
    const suspiciousWords = [
      '–∑–∞–ø—á–∞—Å—Ç—å', '–¥–µ—Ç–∞–ª—å', '—Ä–µ–º–æ–Ω—Ç', '–±/—É', '–ø–æ–ª–æ–º–∞–Ω–Ω—ã–π', '–Ω–µ—Ä–∞–±–æ—á–∏–π',
      'for parts', 'broken', 'repair', 'spare', 'used'
    ];
    
    const name = product.name.toLowerCase();
    const hasSuspiciousWords = suspiciousWords.some(word => name.includes(word));
    
    if (hasSuspiciousWords) {
      return 0.2; // –ù–∏–∑–∫–∞—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∏–∑–∫–æ–π —Ü–µ–Ω—ã
    }
    
    // –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ü–µ–Ω—ã
    const categoryBasePrices: Record<string, number> = {
      videocards: 15000,
      processors: 8000,
      motherboards: 5000,
      playstation: 40000,
      nintendo_switch: 25000
    };
    
    const basePrice = categoryBasePrices[category] || 5000;
    const priceRatio = product.price / basePrice;
    
    if (priceRatio < 0.1) suspicion += 0.8; // –ú–µ–Ω—å—à–µ 10% –æ—Ç –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã
    else if (priceRatio < 0.2) suspicion += 0.6; // –ú–µ–Ω—å—à–µ 20%
    else if (priceRatio < 0.3) suspicion += 0.4; // –ú–µ–Ω—å—à–µ 30%
    
    return Math.min(1.0, suspicion);
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
   */
  private removeDuplicatesAndRank(anomalies: AnomalyDetectionResult['anomalousProducts']) {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ ID —Ç–æ–≤–∞—Ä–∞
    const grouped = new Map<string, AnomalyDetectionResult['anomalousProducts'][0]>();
    
    for (const anomaly of anomalies) {
      const existing = grouped.get(anomaly.id);
      if (!existing || anomaly.confidence > existing.confidence) {
        grouped.set(anomaly.id, anomaly);
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ confidence (—É–±—ã–≤–∞–Ω–∏–µ)
    return Array.from(grouped.values()).sort((a, b) => b.confidence - a.confidence);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
   */
  private createEmptyResult(): AnomalyDetectionResult {
    return {
      anomalousProducts: [],
      statistics: {
        mean: 0,
        median: 0,
        std: 0,
        q1: 0,
        q3: 0,
        iqr: 0,
        priceRange: { min: 0, max: 0 }
      }
    };
  }

  // --- –ù–æ–≤—ã–π –∫–æ–¥ –¥–ª—è trimmed mean –∏ IQR ---
  private getIQRFilteredPrices(prices: number[], q1: number, q3: number, iqr: number) {
    const lower = q1 - 1.5 * iqr;
    const upper = q3 + 1.5 * iqr;
    return prices.filter(p => p >= lower && p <= upper);
  }

  private getTrimmedMean(prices: number[], trimPercent = 0.1) {
    if (prices.length === 0) return 0;
    const sorted = [...prices].sort((a, b) => a - b);
    const trimCount = Math.floor(sorted.length * trimPercent);
    const trimmed = sorted.slice(trimCount, sorted.length - trimCount);
    if (trimmed.length === 0) return this.getMedian(sorted);
    return trimmed.reduce((a, b) => a + b, 0) / trimmed.length;
  }

  private getMedian(prices: number[]) {
    const sorted = [...prices].sort((a, b) => a - b);
    const mid = Math.floor(sorted.length / 2);
    return sorted.length % 2 === 0
      ? (sorted[mid - 1] + sorted[mid]) / 2
      : sorted[mid];
  }
} 