import { Injectable, Logger, BadRequestException } from '@nestjs/common';
import { ProductRequestDto } from '../dto/product-request.dto';
import { ProductAggregatorService } from './product-aggregator.service';
import { ProductValidationService } from './product-validation.service';
import { ProductGroupingService } from './product-grouping.service';
import { ProductNormalizerService } from './product-normalizer.service';
import { ProductResponse } from '../types/product.types';
import { DbApiClient } from '../grpc-clients/db-api.client';
import { PhotoService } from './photo.service';
import { OpenAiValidationService } from './openai.service';

@Injectable()
export class ProductsService {
  private readonly logger = new Logger(ProductsService.name);

  constructor(
    private readonly aggregator: ProductAggregatorService,
    private readonly validator: ProductValidationService,
    private readonly grouper: ProductGroupingService,
    private readonly normalizer: ProductNormalizerService,
    private readonly dbApiClient: DbApiClient,
    private readonly photoService: PhotoService,
    private readonly openaiService: OpenAiValidationService,
  ) {}

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π orchestration-–º–µ—Ç–æ–¥: –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç, –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã.
   * @param request - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ (–º–∞—Å—Å–∏–≤ query, –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ —Ç.–¥.)
   * @returns ProductResponse —Å –∏—Ç–æ–≥–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
   * @throws BadRequestException –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   */
  async getProducts(request: ProductRequestDto): Promise<ProductResponse> {
    if (!request.queries || !Array.isArray(request.queries) || request.queries.length === 0) {
      throw new BadRequestException('–ù–µ —É–∫–∞–∑–∞–Ω—ã –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞');
    }
    if (!request.category) {
      throw new BadRequestException('–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è');
    }
    const startTime = Date.now();
    const queries = Array.isArray(request.queries) ? request.queries : [];
    const queriesStr = queries.length === 1
      ? queries[0]
      : queries.join(', ');
    this.logger.log(`üîç –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤: "${queriesStr}" –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${request.category}"`);
    let t = Date.now();

    // 1. –ê–≥—Ä–µ–≥–∞—Ü–∏—è
    const allProducts = await this.aggregator.fetchAllProducts(request);
    this.logger.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ ${allProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (+${Date.now() - t}ms)`);
    t = Date.now();

    // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è
    const validationResults = await this.validator.validateProducts(allProducts, request.category as import('../validation.product/utils/validation-utils').ProductCategory);
    // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç
    allProducts.forEach((product, i) => {
      if (validationResults[i]) {
        Object.assign(product, validationResults[i]);
        if (!validationResults[i].isValid) {
          this.logger.warn(`[VALIDATION][FAIL] id:${product.id} name:"${product.name}" price:${product.price} query:"${product.query}" reason:"${validationResults[i].reason}"`);
        } else {
          this.logger.log(`[VALIDATION][OK] id:${product.id} name:"${product.name}" price:${product.price} query:"${product.query}" reason:"${validationResults[i].reason}"`);
        }
      }
    });
    this.logger.log(`‚è±Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ ${Date.now() - t}ms`);
    const validProducts = allProducts.filter((_, i) => validationResults[i]?.isValid);
    this.logger.log(`‚úÖ –ü—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é: ${validProducts.length}/${allProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
    t = Date.now();

    // 3. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ (–ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É)
    const groupedProducts = this.grouper.groupAndSelectCheapest(
      validProducts,
      (product) => this.normalizer.getModelKey(product),
      request.category
    );
    this.logger.log(`‚è±Ô∏è –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–Ω—è–ª–∞ ${Date.now() - t}ms`);
    this.logger.log(`üìä –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ ${groupedProducts.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`);
    t = Date.now();

    // 3.1. –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–µ –∏ —Ç—Ä–µ–±—É—é—â–∏–µ AI
    const aiNeeded = groupedProducts.filter(
      p => p.toAI === true || p.reason === 'to-ai' || p.reason === 'price-anomaly'
    );
    const passed = groupedProducts.filter(p => !aiNeeded.includes(p));

    // 3.2. –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è AI ‚Äî –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∏—Ö —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
    let aiResults: any[] = [];
    let aiError: any = null;
    if (aiNeeded.length > 0) {
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏, —á—Ç–æ –∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        const allResults = await this.validator.validateProducts(aiNeeded, request.category as import('../validation.product/utils/validation-utils').ProductCategory);
        aiResults = allResults.filter((r: any) => r.isValid);
        this.logger.log(`[AI] –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ AI: ${aiNeeded.length}, —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏: ${aiResults.length}`);
      } catch (err) {
        aiError = err;
        this.logger.error(`[AI] –û—à–∏–±–∫–∞ AI-–≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${err?.message || err}`);
      }
    }
    this.logger.log(`‚è±Ô∏è AI/–¥–æ–ø.–≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ ${Date.now() - t}ms`);
    t = Date.now();

    // –ü–æ–¥–º–µ–Ω—è–µ–º category –Ω–∞ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    for (const product of passed) {
      product.category = request.category;
      if (product.source === 'wb') {
        product.image_url = await this.photoService.findProductPhoto(product.id) || product.image_url;
      }
    }
    for (const product of aiResults) {
      product.category = request.category;
      if (product.source === 'wb') {
        product.image_url = await this.photoService.findProductPhoto(product.id) || product.image_url;
      }
    }
    this.logger.log(`‚è±Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∑–∞–Ω—è–ª–æ ${Date.now() - t}ms`);
    t = Date.now();

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ query
    const productsByQuery: Record<string, any[]> = {};
    validProducts.forEach(product => {
      if (!productsByQuery[product.query]) productsByQuery[product.query] = [];
      productsByQuery[product.query].push(product);
    });

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ query —Å—á–∏—Ç–∞–µ–º marketStats –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    for (const [query, products] of Object.entries(productsByQuery)) {
      if (!products.length) continue;
      // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —ç—Ç–æ–≥–æ query
      const cheapest = products.reduce((min, p) => (p.price < min.price ? p : min), products[0]);
      const stats = cheapest.marketStats;
      const market_stats = stats ? {
        min: stats.min,
        max: stats.max,
        mean: stats.mean,
        median: stats.median,
        iqr: stats.iqr,
        query: cheapest.query,
        category: cheapest.category,
        source: cheapest.source,
        total_count: products.length,
        product_id: cheapest.id,
        created_at: new Date().toISOString()
      } : undefined;
      this.logger.log('market_stats for query:', query, market_stats);
      await this.dbApiClient.batchCreateProducts({
        products: [cheapest],
        market_stats
      });
      this.logger.log(`DB-API: inserted cheapest product for query="${query}"`);
    }

    const processingTimeMs = Date.now() - startTime;
    this.logger.log(`‚úÖ –ì–æ—Ç–æ–≤–æ: ${validProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞ ${processingTimeMs}ms`);

    // –§–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥ –ø–æ AI (–≤—Å–µ–≥–¥–∞)
    if (aiNeeded.length === 0) {
      this.logger.log(`[AI][FINAL] –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ AI: 0, —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏: 0`);
    } else if (aiError) {
      this.logger.error(`[AI][FINAL] –û—à–∏–±–∫–∞ AI-–≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${aiError?.message || aiError}`);
    } else {
      this.logger.log(`[AI][FINAL] –ó–∞–ø—Ä–æ—Å–æ–≤ –∫ AI: ${aiNeeded.length}, —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏: ${aiResults.length}`);
    }

    return {
      products: [...passed, ...aiResults],
      total_queries: request.queries.length,
      total_products: passed.length + aiResults.length,
      processing_time_ms: processingTimeMs,
      cache_hits: 0,
      cache_misses: 0
    };
  }
}