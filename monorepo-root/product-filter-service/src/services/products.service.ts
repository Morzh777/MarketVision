import { Injectable, Logger, BadRequestException } from '@nestjs/common';
import { ProductRequestDto } from '../dto/product-request.dto';
import { ProductAggregatorService } from './product-aggregator.service';
import { ProductValidationService } from './product-validation.service';
import { ProductGroupingService } from './product-grouping.service';
import { ProductNormalizerService } from './product-normalizer.service';
import { ProductResponse } from '../types/product.types';
import { DbApiClient } from '../grpc-clients/db-api.client';

@Injectable()
export class ProductsService {
  private readonly logger = new Logger(ProductsService.name);

  constructor(
    private readonly aggregator: ProductAggregatorService,
    private readonly validator: ProductValidationService,
    private readonly grouper: ProductGroupingService,
    private readonly normalizer: ProductNormalizerService,
    private readonly dbApiClient: DbApiClient,
  ) {}

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π orchestration-–º–µ—Ç–æ–¥: –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç, –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã.
   * @param request - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ (–º–∞—Å—Å–∏–≤ query, –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ —Ç.–¥.)
   * @returns ProductResponse —Å –∏—Ç–æ–≥–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
   * @throws BadRequestException –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   */
  async getProducts(request: ProductRequestDto): Promise<ProductResponse> {
    if (!request.queries || !Array.isArray(request.queries) || request.queries.length === 0) {
      throw new BadRequestException('–ù–µ —É–∫–∞–∑–∞–Ω—ã –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞');
    }
    if (!request.category) {
      throw new BadRequestException('–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è');
    }
    const startTime = Date.now();
    this.logger.log(`üîç –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${request.queries.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${request.category}`);

    // 1. –ê–≥—Ä–µ–≥–∞—Ü–∏—è
    const allProducts = await this.aggregator.fetchAllProducts(request);
    this.logger.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ ${allProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤`);

    // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è
    const validProducts = this.validator.filterValid(allProducts, request.category);
    this.logger.log(`‚úÖ –ü—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é: ${validProducts.length}/${allProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);

    // 3. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ (–ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É)
    const groupedProducts = this.grouper.groupAndSelectCheapest(
      validProducts,
      (product) => this.normalizer.getModelKey(product)
    );
    this.logger.log(`üìä –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ ${groupedProducts.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`);

    // 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –≤ db-api (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    this.dbApiClient.batchCreateProducts(groupedProducts)
      .then(res => this.logger.log(`DB-API: inserted=${res.inserted}`))
      .catch(err => this.logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ db-api', err));

    const processingTimeMs = Date.now() - startTime;
    this.logger.log(`‚úÖ –ì–æ—Ç–æ–≤–æ: ${groupedProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞ ${processingTimeMs}ms`);

    return {
      products: groupedProducts,
      total_queries: request.queries.length,
      total_products: groupedProducts.length,
      processing_time_ms: processingTimeMs,
      cache_hits: 0,
      cache_misses: 0
    };
  }
}