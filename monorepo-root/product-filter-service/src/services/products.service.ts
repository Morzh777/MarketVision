import { Injectable, Logger, BadRequestException } from '@nestjs/common';
import { ProductRequestDto } from '../dto/product-request.dto';
import { ProductAggregatorService } from './product-aggregator.service';
import { ValidationFactoryService } from './validation.service/validation-factory.service';
import { ProductGroupingService } from './product-grouping.service';
import { ProductNormalizerService } from './product-normalizer.service';
import { ProductResponse } from '../types/product.types';
import { DbApiClient } from '../grpc-clients/db-api.client';
import { PhotoService } from './photo.service';
import { CategoryConfigService } from '../config/categories.config';


@Injectable()
export class ProductsService {
  private readonly logger = new Logger(ProductsService.name);

  constructor(
    private readonly aggregator: ProductAggregatorService,
    private readonly validationFactory: ValidationFactoryService,
    private readonly grouper: ProductGroupingService,
    private readonly normalizer: ProductNormalizerService,
    private readonly dbApiClient: DbApiClient,
    private readonly photoService: PhotoService,
  ) {}

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π orchestration-–º–µ—Ç–æ–¥: –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç, –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã.
   * @param request - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ (–º–∞—Å—Å–∏–≤ query, –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ —Ç.–¥.)
   * @returns ProductResponse —Å –∏—Ç–æ–≥–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
   * @throws BadRequestException –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   */
  async getProducts(request: ProductRequestDto, skipSave: boolean = false): Promise<ProductResponse> {
    if (!request.queries || !Array.isArray(request.queries) || request.queries.length === 0) {
      throw new BadRequestException('–ù–µ —É–∫–∞–∑–∞–Ω—ã –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞');
    }
    if (!request.category) {
      throw new BadRequestException('–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è');
    }
    const startTime = Date.now();
    const queries = Array.isArray(request.queries) ? request.queries : [];
    const queriesStr = queries.length === 1
      ? queries[0]
      : queries.join(', ');
    this.logger.log(`üîç –ó–∞–ø—Ä–æ—Å: "${queriesStr}" (${request.category})`);
    let t = Date.now();

    // 1. –ê–≥—Ä–µ–≥–∞—Ü–∏—è
    const allProducts = await this.aggregator.fetchAllProducts(request);
    this.logger.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ ${allProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
    t = Date.now();

    // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ ValidationFactoryService
    const validationResults = await this.validationFactory.validateProducts(allProducts, request.category as any);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const invalidProducts = validationResults.filter((result, index) => !result.isValid);
    const validProducts = allProducts.filter((product, index) => validationResults[index].isValid);
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –ø—Ä–∏—á–∏–Ω—É
    if (invalidProducts.length > 0) {
      invalidProducts.forEach((result, index) => {
        const product = allProducts[validationResults.indexOf(result)];
        this.logger.log(`‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π: ${product.name} - ${result.reason}`);
      });
    }
    
    this.logger.log(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: ${validProducts.length}/${allProducts.length}`);
    t = Date.now();

    // 3. –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ (–ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É)
    const groupedProducts = this.grouper.groupAndSelectCheapest(
      validProducts,
      (product) => this.normalizer.getModelKey(product),
      request.category
    );
    this.logger.log(`üìä –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ ${groupedProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ç–æ–≤–∞—Ä–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    if (groupedProducts.length > 0) {
      const lastProduct = groupedProducts[groupedProducts.length - 1];
      this.logger.log(`üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "${lastProduct.name}" (${lastProduct.price}‚ÇΩ, ${lastProduct.source})`);
    }
    t = Date.now();

    // –ü–æ–¥–º–µ–Ω—è–µ–º category –Ω–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–µ–ª–æ–≤–µ–∫–æ‚Äë—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–µ –ª–æ–º–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã: –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∫–ª—é—á—É)
    for (const product of groupedProducts) {
      const aggregated = CategoryConfigService.getSuperCategoryDisplay(request.category);
      product.category = aggregated || CategoryConfigService.getCategoryDisplay(request.category) || request.category;
      if (product.source === 'wb') {
        product.image_url = await this.photoService.findProductPhoto(product.id) || product.image_url;
      }
    }
    // this.logger.log(`üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã`);
    t = Date.now();

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ query
    const productsByQuery: Record<string, any[]> = {};
    validProducts.forEach(product => {
      if (!productsByQuery[product.query]) productsByQuery[product.query] = [];
      productsByQuery[product.query].push(product);
    });

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ query —Å—á–∏—Ç–∞–µ–º marketStats –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º (–µ—Å–ª–∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
    if (!skipSave) {
      for (const [query, products] of Object.entries(productsByQuery)) {
        if (!products.length) continue;
        // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —ç—Ç–æ–≥–æ query
        const cheapest = products.reduce((min, p) => (p.price < min.price ? p : min), products[0]);
        const stats = cheapest.marketStats;
        const aggregatedCheapest = CategoryConfigService.getSuperCategoryDisplay(cheapest.category)
          || CategoryConfigService.getCategoryDisplay(cheapest.category)
          || cheapest.category;
        const market_stats = stats ? {
          min: stats.min,
          max: stats.max,
          mean: stats.mean,
          median: stats.median,
          iqr: stats.iqr,
          query: cheapest.query,
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ RU-–∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏/–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã/–∏ —Ç.–ø.)
          category: aggregatedCheapest,
          source: cheapest.source,
          total_count: products.length,
          product_id: cheapest.id,
          created_at: new Date().toISOString(),
          // –ù–æ–≤–æ–µ –ø–æ–ª–µ: –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏")
          super_category: CategoryConfigService.getSuperCategoryDisplay(cheapest.category)
        } : undefined;
        const cheapestForSave = {
          ...cheapest,
          category: aggregatedCheapest,
        };
        const dbResult = await this.dbApiClient.batchCreateProducts({
          products: [cheapestForSave],
          market_stats
        });
        this.logger.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: ${dbResult.inserted} —Ç–æ–≤–∞—Ä–æ–≤`);
      }
    } else {
      this.logger.log(`‚è≠Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–æ`);
    }

    const processingTimeMs = Date.now() - startTime;
    this.logger.log(`‚úÖ –ì–æ—Ç–æ–≤–æ: ${groupedProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ ${processingTimeMs}ms`);

    return {
      products: groupedProducts,
      total_queries: request.queries.length,
      total_products: groupedProducts.length,
      total_validated: validProducts.length,
      total_raw: allProducts.length,
      processing_time_ms: processingTimeMs,
      cache_hits: 0,
      cache_misses: 0
    };
  }
}