import { Injectable, Logger } from '@nestjs/common';
import { RedisService } from './redis.service';
import { PhotoService } from './photo.service';
import { OzonApiClient } from '../grpc-clients/ozon-api.client';
import { WbApiClient } from '../grpc-clients/wb-api.client';
import { fileLogger } from '../utils/logger';

interface ProductResult {
  id: string;
  stableId: string;
  name: string;
  price: number;
  photoUrl?: string;
  productUrl?: string; // üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞
  previousPrice?: number;
  discount?: number;
  query: string;
  supplier?: string;
  brand?: string;
  source: 'wb' | 'ozon'; // üÜï –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
}

export interface ProductRequest {
  queries: string[];
  category: string;
  exclude_keywords?: string[];
}

export interface ProductResponse {
  products: ProcessedProduct[];
  total_queries: number;
  total_products: number;
  processing_time_ms: number;
  cache_hits: number;
  cache_misses: number;
}

export interface ProcessedProduct {
  id: string;
  name: string;
  price: number;
  image_url: string;
  product_url: string;
  category: string;
  source: string;
  query: string;
  discount_percent?: number;
  is_new?: boolean;
}

@Injectable()
export class ProductsService {
  private readonly logger = new Logger(ProductsService.name);

  // üéØ –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–´–ï –ó–ê–ü–†–û–°–´: –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ WB-API –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
  private readonly VIDEOCARD_QUERIES = [
    // üéÆ –ö–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç
    'RTX4090',
    'RTX4080', 
    'RTX4070',
    'RX7900XTX',
    'RX7900XT'
  ];

  private readonly PROCESSOR_QUERIES = [
    // üîß –ö–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
    '14900KF',
    '14900K',
    '14700KF', 
    '14700K',
    '7800X3D',
    '7700X',
    '7950X'
  ];

  private readonly MOTHERBOARD_QUERIES = [
    // üîå –ö–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏—Ö –ø–ª–∞—Ç
    'Z790',
    'B760',
    'X870E',
    'B850'
  ];

  constructor(
    private readonly redisService: RedisService,
    private readonly photoService: PhotoService,
    private readonly ozonApiClient: OzonApiClient,
    private readonly wbApiClient: WbApiClient
  ) {}

  async getVideocards(testMode = false, limit?: number, showAllMode = false): Promise<ProductResult[]> {
    return this.getProductsByCategory('videocards', testMode, limit, showAllMode);
  }

  async getProcessors(testMode = false, limit?: number, showAllMode = false): Promise<ProductResult[]> {
    return this.getProductsByCategory('processors', testMode, limit, showAllMode);
  }

  async getMotherboards(testMode = false, limit?: number, showAllMode = false): Promise<ProductResult[]> {
    return this.getProductsByCategory('motherboards', testMode, limit, showAllMode);
  }

  private async getProductsByCategory(category: string, testMode = false, limit?: number, showAllMode = false): Promise<ProductResult[]> {
    const startTime = Date.now();
    fileLogger.log(`üöÄ –ó–∞–ø—Ä–æ—Å ${category} —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å gRPC`);

    try {
      // üéØ –í–´–ë–ò–†–ê–ï–ú –ó–ê–ü–†–û–°–´ –î–õ–Ø –ö–ê–¢–ï–ì–û–†–ò–ò
      let queries: string[] = [];
      let xsubject: number = 0;
      
      switch (category) {
        case 'videocards':
          queries = this.VIDEOCARD_QUERIES;
          xsubject = 3274;
          break;
        case 'processors':
          queries = this.PROCESSOR_QUERIES;
          xsubject = 3698;
          break;
        case 'motherboards':
          queries = this.MOTHERBOARD_QUERIES;
          xsubject = 3690;
          break;
        default:
          fileLogger.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}`);
          return [];
      }

      fileLogger.log(`üîç –í—ã–ø–æ–ª–Ω—è—é ${queries.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è ${category} —á–µ—Ä–µ–∑ gRPC...`);

      // üéØ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ï –ó–ê–ü–†–û–°–´ –ö WB API –ò OZON API
      const allProducts: any[] = [];

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è gRPC
      const gRPCRequests = queries.map(query => ({
        products: [], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —Ç–∞–∫ –∫–∞–∫ –ø–∞—Ä—Å–µ—Ä—ã —Å–∞–º–∏ –ø–æ–ª—É—á–∞—é—Ç –¥–∞–Ω–Ω—ã–µ
        query: query, // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è WB API
        all_queries: [query], // –ú–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        exclude_keywords: [],
        config: {},
        source: 'wb',
        category
      }));

      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ WB API –∏ Ozon API
      const wbPromises = gRPCRequests.map(async (request) => {
        try {
          fileLogger.debug(`üîç WB API –∑–∞–ø—Ä–æ—Å: ${request.query}`);
          const response = await this.wbApiClient.filterProducts(request);
          
          if (!response.products || !Array.isArray(response.products)) {
            fileLogger.warn(`‚ö†Ô∏è WB API "${request.query}": –ø–æ–ª—É—á–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö`);
            return [];
          }
          
          fileLogger.log(`üì¶ WB API "${request.query}": –Ω–∞–π–¥–µ–Ω–æ ${response.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
          
          // –ü–∞—Ä—Å–µ—Ä—ã —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç query, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ source
          return response.products.map((p: any) => ({ 
            ...p, 
            source: 'wb' as const
            // query —É–∂–µ –µ—Å—Ç—å –≤ p –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞
          }));
        } catch (error) {
          fileLogger.error(`‚ùå –û—à–∏–±–∫–∞ WB API –∑–∞–ø—Ä–æ—Å–∞ "${request.query}":`, error);
          return [];
        }
      });

      const ozonPromises = gRPCRequests.map(async (request) => {
        try {
          fileLogger.debug(`üîç Ozon API –∑–∞–ø—Ä–æ—Å: ${request.query}`);
          const response = await this.ozonApiClient.filterProducts(request);
          
          if (!response.products || !Array.isArray(response.products)) {
            fileLogger.warn(`‚ö†Ô∏è Ozon API "${request.query}": –ø–æ–ª—É—á–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö`);
            return [];
          }
          
          fileLogger.log(`üì¶ Ozon API "${request.query}": –Ω–∞–π–¥–µ–Ω–æ ${response.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ —Ç–æ–≤–∞—Ä—ã —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Ozon
          if (response.products.length > 0) {
            const firstProduct = response.products[0];
            fileLogger.debug(`üîç Ozon API "${request.query}" - –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä: "${firstProduct.name}" (${firstProduct.price}‚ÇΩ)`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏—Å–∫–æ–º—ã–π –∑–∞–ø—Ä–æ—Å
            const matchingProducts = response.products.filter((p: any) => 
              p.name?.toLowerCase().includes(request.query.toLowerCase())
            );
            fileLogger.warn(`‚ö†Ô∏è Ozon API "${request.query}": —Ç–æ–ª—å–∫–æ ${matchingProducts.length} –∏–∑ ${response.products.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç "${request.query}" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏!`);
          }
          
          // –ü–∞—Ä—Å–µ—Ä—ã —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç query, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ source
          return response.products.map((p: any) => ({ 
            ...p, 
            source: 'ozon' as const
            // query —É–∂–µ –µ—Å—Ç—å –≤ p –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞
          }));
        } catch (error) {
          fileLogger.error(`‚ùå –û—à–∏–±–∫–∞ Ozon API –∑–∞–ø—Ä–æ—Å–∞ "${request.query}":`, error);
          return [];
        }
      });

      // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç—ã –æ—Ç –æ–±–æ–∏—Ö API
      const [wbResults, ozonResults] = await Promise.all([
        Promise.all(wbPromises),
        Promise.all(ozonPromises)
      ]);

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      wbResults.forEach(products => allProducts.push(...products));
      ozonResults.forEach(products => allProducts.push(...products));

      const wbTotal = wbResults.flat().length;
      const ozonTotal = ozonResults.flat().length;
      
      // üéØ –ö–†–ê–°–ò–í–´–ô –û–¢–ß–ï–¢ –ü–û API
      fileLogger.log(`\nüìä –û–¢–ß–ï–¢ –ü–û API –î–õ–Ø ${category.toUpperCase()}:`);
      fileLogger.log(`üì° WB API: ${wbTotal} —Ç–æ–≤–∞—Ä–æ–≤`);
      fileLogger.log(`üì° Ozon API: ${ozonTotal} —Ç–æ–≤–∞—Ä–æ–≤`);
      fileLogger.log(`üì¶ –í–°–ï–ì–û: ${allProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
      
      // üéØ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú: –°–Ω–∞—á–∞–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è, –ø–æ—Ç–æ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
      
      // 1. –°–Ω–∞—á–∞–ª–∞ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
      const validProducts: any[] = [];
      let validationFailed = 0;
      let cacheFiltered = 0;
      let priceFiltered = 0;
      let discountFiltered = 0;

      fileLogger.log(`üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º ${allProducts.length} —Ç–æ–≤–∞—Ä–æ–≤...`);

      for (const product of allProducts) {
        const processed = await this.processProductWithCache(product, category, testMode, showAllMode);
        
        if (processed) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
          validProducts.push({
            ...product,
            processedResult: processed
          });
        } else {
          // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—ã –æ—Ç—Å–µ–≤–∞
          const productName = product.name || '';
          const price = product.price || 0;
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç—Å–µ–≤–∞
          const validation = this.validateProduct(product, category);
          if (!validation.isValid) {
            validationFailed++;
          } else if (price <= 0 || price > 1000000) {
            priceFiltered++;
          } else {
            // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—Å–µ—è–Ω—ã –∏–∑-–∑–∞ –∫–µ—à–∞ (—Ü–µ–Ω–∞ –Ω–µ —Å–Ω–∏–∑–∏–ª–∞—Å—å)
            cacheFiltered++;
          }
        }
      }

      fileLogger.log(`‚úÖ –ü—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é: ${validProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ ${allProducts.length}`);
      
      // 2. –¢–µ–ø–µ—Ä—å –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ
      const cheapestProducts = this.selectCheapestFromSimilarProducts(validProducts);
      fileLogger.log(`üîÑ –ì–†–£–ü–ü–ò–†–û–í–ö–ê: ${cheapestProducts.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–±—ã–ª–æ ${validProducts.length})`);
      
      // 3. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const processedProducts: ProductResult[] = cheapestProducts.map(p => p.processedResult);

              fileLogger.log(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò:`);
        fileLogger.log(`   üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç API: ${allProducts.length}`);
        fileLogger.log(`   ‚úÖ –ü—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é: ${validProducts.length}`);
        fileLogger.log(`   üîÑ –ü–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: ${processedProducts.length}`);
                  fileLogger.log(`   ‚ùå –û—Ç—Å–µ—è–Ω–æ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${allProducts.length - validProducts.length}`);
          fileLogger.log(`     ‚îú‚îÄ –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞: ${validationFailed}`);
          fileLogger.log(`     ‚îú‚îÄ –¶–µ–Ω–∞ –Ω–µ —Å–Ω–∏–∑–∏–ª–∞—Å—å (–∫–µ—à): ${cacheFiltered}`);
          fileLogger.log(`     ‚îî‚îÄ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ü–µ–Ω–∞: ${priceFiltered}`);

      if (processedProducts.length === 0) {
        fileLogger.warn(`‚ö†Ô∏è –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏!`);
        return [];
      }

      const finalProducts = processedProducts;

      // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö) –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      let limitedProducts = finalProducts;
      const maxLimit = limit || (testMode ? 50 : 1000); // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –¥–æ 50, –æ–±—ã—á–Ω—ã–π: –¥–æ 1000 (–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
      
      if (finalProducts.length > maxLimit) {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ –∏ –±–µ—Ä–µ–º —Ç–æ–ø —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö
        limitedProducts = finalProducts
          .sort((a, b) => a.price - b.price)
          .slice(0, maxLimit);
        
        fileLogger.log(`üéØ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞: ${finalProducts.length} ‚Üí ${limitedProducts.length} —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö (–ª–∏–º–∏—Ç: ${maxLimit})`);
      } else {
        // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        limitedProducts = finalProducts.sort((a, b) => a.price - b.price);
        fileLogger.log(`üìä –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ ${limitedProducts.length} —Ç–æ–≤–∞—Ä–æ–≤ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ü–µ–Ω–µ)`);
      }

      const totalTime = (Date.now() - startTime) / 1000;
      
      // üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
      fileLogger.log(`\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ${category.toUpperCase()}:`);
      fileLogger.log(`‚úÖ –ì–û–¢–û–í–û –î–õ–Ø –ë–û–¢–ê: ${limitedProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
      fileLogger.log(`üì¶ –û–ë–†–ê–ë–û–¢–ê–ù–û: ${processedProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
      fileLogger.log(`‚ùå –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–û: ${validationFailed} —Ç–æ–≤–∞—Ä–æ–≤`);
      fileLogger.log(`‚è±Ô∏è –í–†–ï–ú–Ø: ${totalTime.toFixed(1)}—Å`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
      if (limitedProducts.length > 0) {
        fileLogger.log(`\nüèÜ –ò–¢–û–ì–û–í–´–ï –¢–û–í–ê–†–´:`);
        limitedProducts.forEach((product, index) => {
          const discountText = product.discount ? ` (-${product.discount}%)` : '';
          const sourceText = product.source === 'wb' ? 'üü¶' : 'üüß';
          fileLogger.log(`  ${index + 1}. ${sourceText} ${product.name} - ${product.price}‚ÇΩ${discountText}`);
        });
      }

      return limitedProducts;
    } catch (error) {
      fileLogger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ${category}:`, error);
      return [];
    }
  }

  // üéØ –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å –∫–µ—à–µ–º —Ü–µ–Ω (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ WB-API)
  private async processProductWithCache(
    product: any, 
    category: string,
    testMode = false,
    showAllMode = false
  ): Promise<ProductResult | null> {
    const productName = product.name || '';
    const query = product.query || '';
    const price = product.price || 0;
    const source = product.source || 'unknown';

    // üêõ –î–ï–ë–ê–ì: –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    fileLogger.debug(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞: "${productName}" (${price}‚ÇΩ, query: "${query}", source: ${source})`);

    // 1Ô∏è‚É£ –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–≤–∞—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const validation = this.validateProduct(product, category);
    fileLogger.debug(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è "${productName}" (query: "${product.query}")`);
    
    if (!validation.isValid) {
      fileLogger.warn(`‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞: "${productName}" - ${validation.reason}`);
      if (!testMode) {
        return null;
      } else {
        fileLogger.warn(`üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é`);
      }
    } else {
      fileLogger.debug(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞: "${productName}"`);
    }

    // 2Ô∏è‚É£ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –¶–ï–ù–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω–∞ —Ä–∞–∑—É–º–Ω–∞—è
    if (price <= 0 || price > 1000000) {
      fileLogger.debug(`üí∞ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ü–µ–Ω–∞: "${productName}" - ${price}‚ÇΩ`);
      return null;
    }

    // 3Ô∏è‚É£ –°–†–ê–í–ù–ï–ù–ò–ï –° –ö–ï–®–ï–ú: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
    let shouldUpdate = true;
    let priceDifference = 0;
    
    if (!testMode && !showAllMode) {
      const cacheKey = `product:${category}:${query}`;
      const cachedData = await this.redisService.get(cacheKey);
      
      if (cachedData) {
        try {
          const cachedProduct = JSON.parse(cachedData);
          const cachedPrice = cachedProduct.price || 0;
          
          if (cachedPrice > 0) {
            priceDifference = ((cachedPrice - price) / cachedPrice) * 100;
            
            if (price >= cachedPrice) {
              fileLogger.debug(`üìà –¶–µ–Ω–∞ –Ω–µ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å: "${productName}" - ${price}‚ÇΩ (–≤ –∫–µ—à–µ: ${cachedPrice}‚ÇΩ)`);
              shouldUpdate = false;
            } else {
              fileLogger.debug(`üí∞ –¶–µ–Ω–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å: "${productName}" - ${price}‚ÇΩ (–±—ã–ª–æ: ${cachedPrice}‚ÇΩ, -${priceDifference.toFixed(1)}%)`);
            }
          }
        } catch (e) {
          fileLogger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–µ—à–∞ –¥–ª—è "${productName}"`);
        }
      } else {
        fileLogger.debug(`üÜï –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è query "${query}": "${productName}"`);
      }
    } else {
      fileLogger.debug(`üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–µ—à–∞ –¥–ª—è "${productName}"`);
    }
    
    if (!shouldUpdate && !testMode && !showAllMode) {
      return null;
    }

    // 5Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê
    const result: ProductResult = {
      id: product.id || this.generateStableId(productName),
      stableId: product.stableId || this.generateStableId(productName),
      name: productName,
      price: price,
      photoUrl: product.photoUrl || product.image || '',
      productUrl: product.productUrl || product.url || '',
      previousPrice: product.previousPrice || product.oldPrice || 0,
      discount: product.discount || 0,
      query: query,
      supplier: product.supplier || product.brand || '',
      brand: product.brand || '',
      source: source as 'wb' | 'ozon'
    };

    // 4Ô∏è‚É£ –ö–ï–®–ò–†–û–í–ê–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à –ø–æ query
    if (!testMode) {
      const cacheKey = `product:${category}:${query}`;
      await this.redisService.set(cacheKey, JSON.stringify(result));
      fileLogger.debug(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–µ—à –ø–æ query "${query}": "${productName}" - ${price}‚ÇΩ`);
    }

    fileLogger.debug(`‚úÖ –¢–æ–≤–∞—Ä –ø—Ä–æ—à–µ–ª –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã: "${productName}" (${price}‚ÇΩ)`);
    return result;
  }

  // üéØ –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –ú–û–î–ï–õ–ò: –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π —Ç–æ–≤–∞—Ä –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
  private selectCheapestFromSimilarProducts(products: any[]): any[] {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –º–æ–¥–µ–ª–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
    const groups = new Map<string, any[]>();
    
    fileLogger.log(`üîç –ù–∞—á–∏–Ω–∞—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É ${products.length} —Ç–æ–≤–∞—Ä–æ–≤...`);
    
    for (const product of products) {
      if (!product.name || !product.price || product.price <= 0) {
        fileLogger.debug(`‚õîÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä "${product.name}" - –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ —Ü–µ–Ω—ã`);
        continue;
      }
      
      // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      const modelKey = this.getModelKey(product);
      
      // ‚õîÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –ø—É—Å—Ç—ã–º –∫–ª—é—á–æ–º (—Å–ª–∏—à–∫–æ–º –æ–±—â–∏–µ –∏–ª–∏ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ)
      if (!modelKey) {
        fileLogger.debug(`‚õîÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä "${product.name}" - –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ`);
        continue;
      }
      

      
      if (!groups.has(modelKey)) {
        groups.set(modelKey, []);
      }
      groups.get(modelKey)!.push(product);
    }
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∞—Ö
    fileLogger.log(`üîç –°–æ–∑–¥–∞–Ω–æ ${groups.size} –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤:`);
    for (const [modelKey, groupProducts] of groups) {
      fileLogger.log(`  ${modelKey}: ${groupProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
      

      
      if (groupProducts.length > 1) {
        groupProducts.forEach(p => {
          fileLogger.debug(`    - "${p.name}" (${p.price}‚ÇΩ, query: "${p.query}", source: ${p.source})`);
        });
      }
    }
    
    const selectedProducts: any[] = [];
    let deduplicatedCount = 0;
    
    // –ò–∑ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
    for (const [modelKey, groupProducts] of groups) {
      
      if (groupProducts.length === 0) {
        fileLogger.warn(`‚ö†Ô∏è –ì–†–£–ü–ü–ê ${modelKey}: –ü–£–°–¢–ê–Ø! –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏`);
        continue;
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const sampleProducts = groupProducts.slice(0, 3);
      sampleProducts.forEach((p, index) => {
        fileLogger.debug(`   ${index + 1}. "${p.name}" (${p.price}‚ÇΩ, query: "${p.query}", source: ${p.source})`);
      });
      
      if (groupProducts.length > 3) {
        fileLogger.debug(`   ... –∏ –µ—â–µ ${groupProducts.length - 3} —Ç–æ–≤–∞—Ä–æ–≤`);
      }
      
      if (groupProducts.length === 1) {
        selectedProducts.push(groupProducts[0]);
        fileLogger.log(`‚úÖ –í—ã–±—Ä–∞–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –≥—Ä—É–ø–ø—ã ${modelKey}: "${groupProducts[0].name}" (${groupProducts[0].price}‚ÇΩ)`);
        

      } else {
        // –ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ - –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π
        const cheapest = groupProducts.reduce((min, product) => {
          return product.price < min.price ? product : min;
        });
        
        // üéØ –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ query —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–æ–¥–µ–ª–∏
        // –ï—Å–ª–∏ query –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–æ–¥–µ–ª–∏, –∏—â–µ–º —Ç–æ–≤–∞—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º query
        const matchingQueryProduct = groupProducts.find(product => {
          const productQuery = product.query?.toLowerCase() || '';
          const modelKeyLower = modelKey.toLowerCase();
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–æ–¥–µ–ª–∏ –≤ query
          // –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è modelKey "rtx5090" –∏—â–µ–º "rtx 5090" –≤ query
          const modelNumber = modelKeyLower.replace(/^(rtx|gtx|rx)/, '');
          const prefix = modelKeyLower.replace(modelNumber, '');
          const expectedQuery = `${prefix} ${modelNumber}`;
          
          const matches = productQuery.includes(expectedQuery);
          
          // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
          if (groupProducts.length > 1) {
            fileLogger.debug(`üîç –ì—Ä—É–ø–ø–∞ ${modelKey}: "${product.name}" (query: "${product.query}") - –æ–∂–∏–¥–∞–µ–º "${expectedQuery}" - —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${matches}`);
          }
          
          return matches;
        });
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–≤–∞—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º query, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω, –∏–Ω–∞—á–µ —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π
        const selectedProduct = matchingQueryProduct || cheapest;
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±–æ—Ä–µ
        if (groupProducts.length > 1) {
          fileLogger.debug(`‚úÖ –í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: "${selectedProduct.name}" —Å query: "${selectedProduct.query}" –¥–ª—è –º–æ–¥–µ–ª–∏ ${modelKey}`);
        }
        

        
        selectedProducts.push(selectedProduct);
        deduplicatedCount += groupProducts.length - 1;
      }
    }
    
    if (deduplicatedCount > 0) {
      fileLogger.log(`üîÑ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: —É–¥–∞–ª–µ–Ω–æ ${deduplicatedCount} –¥—É–±–ª–µ–π, –æ—Å—Ç–∞–ª–æ—Å—å ${selectedProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    }
    

    
    return selectedProducts;
  }

  // üîç –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–ø—Ä–æ—Å—É
  private validateProduct(product: any, category: string): { isValid: boolean; reason?: string } {
    const productName = product.name || '';
    const query = product.query || '';

    // üéØ –ü–†–û–°–¢–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–≤–∞—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É
    const productUpper = productName.toUpperCase();
    const queryUpper = query.toUpperCase();
    
    // –ò—â–µ–º –∑–∞–ø—Ä–æ—Å –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
    if (productUpper.includes(queryUpper)) {
      this.logger.log(`[VALIDATION] ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É "${query}": "${productName}"`);
      return { isValid: true, reason: '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É' };
    }
    
    this.logger.log(`[VALIDATION] ‚ùå –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É "${query}": "${productName}"`);
    return { isValid: false, reason: '–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É' };
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ ID (fallback –µ—Å–ª–∏ WB-API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª)
  private generateStableId(name: string): string {
    return name
      .toLowerCase()
      .replace(/[^a-z0-9]/gi, '');
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—Ç –±–æ—Ç–∞
   * 1. –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç WB API –∏ Ozon API
   * 2. –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º
   * 3. –í—ã–±–∏—Ä–∞–µ—Ç —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
   * 4. –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –∫—ç—à–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ—Å–ª–∏ —Ü–µ–Ω–∞ –ª—É—á—à–µ
   * 5. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   */
  async getProducts(request: ProductRequest): Promise<ProductResponse> {
    const startTime = Date.now();
    this.logger.log(`üîç –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${request.queries.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${request.category}`);

    let cacheHits = 0;
    let cacheMisses = 0;
    const allProducts: ProcessedProduct[] = [];

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤—Å–µ—Ö API –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const [wbProducts, ozonProducts] = await Promise.all([
      this.getProductsFromWbApi(request),
      this.getProductsFromOzonApi(request)
    ]);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    allProducts.push(...wbProducts, ...ozonProducts);
    this.logger.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ ${allProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (WB: ${wbProducts.length}, Ozon: ${ozonProducts.length})`);

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
    const validProducts = await this.validateProducts(allProducts, request);
    this.logger.log(`‚úÖ –ü—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é: ${validProducts.length}/${allProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π
    const groupedProducts = this.groupByQueryAndSelectCheapest(validProducts);
    this.logger.log(`üìä –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ ${groupedProducts.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—ç—à –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    const finalProducts: ProcessedProduct[] = [];
    
    for (const product of groupedProducts) {
      const cacheResult = await this.processCacheForProduct(product);
      
      if (cacheResult.shouldReturn) {
        finalProducts.push(cacheResult.product);
        if (cacheResult.fromCache) {
          cacheHits++;
        } else {
          cacheMisses++;
        }
      }
    }

    const processingTimeMs = Date.now() - startTime;
    
    this.logger.log(`‚úÖ –ì–æ—Ç–æ–≤–æ: ${finalProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞ ${processingTimeMs}ms (–∫—ç—à: ${cacheHits} hits, ${cacheMisses} misses)`);

    return {
      products: finalProducts,
      total_queries: request.queries.length,
      total_products: finalProducts.length,
      processing_time_ms: processingTimeMs,
      cache_hits: cacheHits,
      cache_misses: cacheMisses
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –æ—Ç WB API
   */
  private async getProductsFromWbApi(request: ProductRequest): Promise<ProcessedProduct[]> {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç–¥–µ–ª—å–Ω–æ –∫ WB API
      const allProducts: ProcessedProduct[] = [];
      
      for (const query of request.queries) {
        try {
          const response = await this.wbApiClient.filterProducts({
            query: query, // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
            all_queries: [query], // –ú–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            category: request.category,
            exclude_keywords: request.exclude_keywords || []
          });

          if (response.products && Array.isArray(response.products)) {
            // –ü–∞—Ä—Å–µ—Ä—ã —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç query, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ source
            const productsWithSource = response.products.map((product: any) => ({
              ...product,
              source: 'wb'
              // query —É–∂–µ –µ—Å—Ç—å –≤ product –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞
            }));
            allProducts.push(...productsWithSource);
          }
        } catch (error) {
          this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ "${query}" –∫ WB API:`, error);
        }
      }

      this.logger.log(`üì¶ WB API –≤–µ—Ä–Ω—É–ª ${allProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
      return allProducts;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç WB API:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –æ—Ç Ozon API
   */
  private async getProductsFromOzonApi(request: ProductRequest): Promise<ProcessedProduct[]> {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç–¥–µ–ª—å–Ω–æ –∫ Ozon API
      const allProducts: ProcessedProduct[] = [];
      
      for (const query of request.queries) {
        try {
          const response = await this.ozonApiClient.filterProducts({
            query: query, // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
            all_queries: [query], // –ú–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            category: request.category,
            exclude_keywords: request.exclude_keywords || []
          });

          if (response.products && Array.isArray(response.products)) {
            // –ü–∞—Ä—Å–µ—Ä—ã —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç query, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ source
            const productsWithSource = response.products.map((product: any) => ({
              ...product,
              source: 'ozon'
              // query —É–∂–µ –µ—Å—Ç—å –≤ product –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞
            }));
            allProducts.push(...productsWithSource);
          }
        } catch (error) {
          this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ "${query}" –∫ Ozon API:`, error);
        }
      }

      this.logger.log(`üì¶ Ozon API –≤–µ—Ä–Ω—É–ª ${allProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
      return allProducts;
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç Ozon API:', error);
      return [];
    }
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ –Ω–∞—à–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
   */
  private async validateProducts(products: ProcessedProduct[], request: ProductRequest): Promise<ProcessedProduct[]> {
    if (products.length === 0) return [];

    this.logger.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${request.category}`);

    const validProducts: ProcessedProduct[] = [];

    for (const product of products) {
      // üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –í–ê–õ–ò–î–ê–¢–û–†–´
      const validation = this.validateProduct(product, request.category);
      
      if (validation.isValid) {
        validProducts.push(product);
        this.logger.log(`‚úÖ –ü—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: ${product.name} (${product.source})`);
      } else {
        this.logger.log(`‚ùå –ù–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: ${product.name} - ${validation.reason} (${product.source})`);
      }
    }

    this.logger.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validProducts.length}/${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—Ä–æ—à–ª–∏`);
    return validProducts;
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ query –∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π
   * üéØ –ì–†–£–ü–ü–ò–†–û–í–ö–ê –¢–û–õ–¨–ö–û –ü–û QUERY: –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å = –æ–¥–Ω–∞ –≥—Ä—É–ø–ø–∞
   */
  private groupByQueryAndSelectCheapest(products: ProcessedProduct[]): ProcessedProduct[] {
    if (products.length === 0) return [];

    this.logger.log(`üîç –£–º–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤...`);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ modelKey (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)
    const groups = new Map<string, ProcessedProduct[]>();
    
    for (const product of products) {
      if (!product.name || !product.price || product.price <= 0) {
        this.logger.debug(`‚õîÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä "${product.name}" - –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ —Ü–µ–Ω—ã`);
        continue;
      }
      
      // üéØ –ì–†–£–ü–ü–ò–†–û–í–ö–ê –¢–û–õ–¨–ö–û –ü–û QUERY
      const modelKey = this.getModelKey(product);
      
      if (!modelKey) {
        this.logger.warn(`‚õîÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä "${product.name}" - –Ω–µ—Ç query –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏`);
        continue;
      }
      
      if (!groups.has(modelKey)) {
        groups.set(modelKey, []);
      }
      groups.get(modelKey)!.push(product);
    }
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∞—Ö
    this.logger.log(`üîç –°–æ–∑–¥–∞–Ω–æ ${groups.size} –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤:`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    const sourceStats = new Map<string, number>();
    
    for (const [modelKey, groupProducts] of groups) {
      this.logger.log(`  ${modelKey}: ${groupProducts.length} —Ç–æ–≤–∞—Ä–æ–≤`);
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
      groupProducts.forEach(p => {
        const source = p.source || 'unknown';
        sourceStats.set(source, (sourceStats.get(source) || 0) + 1);
      });
      
      if (groupProducts.length > 1) {
        groupProducts.forEach(p => {
          this.logger.debug(`    - "${p.name}" (${p.price}‚ÇΩ, query: "${p.query}", source: ${p.source})`);
        });
      }
    }
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    this.logger.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:`);
    for (const [source, count] of sourceStats) {
      this.logger.log(`  ${source}: ${count} —Ç–æ–≤–∞—Ä–æ–≤`);
    }
    
    const selectedProducts: ProcessedProduct[] = [];
    
    // –ò–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π —Ç–æ–≤–∞—Ä
    for (const [modelKey, groupProducts] of groups) {
      if (groupProducts.length === 0) {
        this.logger.warn(`‚ö†Ô∏è –ì–†–£–ü–ü–ê ${modelKey}: –ü–£–°–¢–ê–Ø!`);
        continue;
      }
      
      if (groupProducts.length === 1) {
        selectedProducts.push(groupProducts[0]);
        this.logger.log(`‚úÖ –í—ã–±—Ä–∞–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –≥—Ä—É–ø–ø—ã ${modelKey}: "${groupProducts[0].name}" (${groupProducts[0].price}‚ÇΩ)`);
      } else {
        // –ù–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ - –≤—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π
        const cheapest = groupProducts.reduce((min, product) => {
          return product.price < min.price ? product : min;
        });
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±–æ—Ä–µ
        const allPrices = groupProducts.map(p => `${p.price}‚ÇΩ (${p.source})`).join(', ');
        this.logger.log(`üí∞ –í—ã–±—Ä–∞–Ω —Å–∞–º—ã–π –¥–µ—à–µ–≤—ã–π –∏–∑ –≥—Ä—É–ø–ø—ã ${modelKey}: "${cheapest.name}" –∑–∞ ${cheapest.price}‚ÇΩ (${cheapest.source})`);
        this.logger.debug(`   –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: ${allPrices}`);
        selectedProducts.push(cheapest);
      }
    }

    this.logger.log(`üìä –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${selectedProducts.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`);
    return selectedProducts;
  }

  /**
   * üéØ –ì–†–£–ü–ü–ò–†–û–í–ö–ê –¢–û–õ–¨–ö–û –ü–û QUERY: –ø–æ–ª—É—á–∞–µ–º modelKey –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
   */
  private getModelKey(product: ProcessedProduct): string {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –ø–æ query - –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —É–Ω–∏–∫–∞–ª–µ–Ω
    const query = product.query || '';
    if (query) {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º query –¥–ª—è –ª—É—á—à–µ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
      const normalizedQuery = this.normalizeQuery(query);
      this.logger.debug(`üîç –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ query: "${query}" ‚Üí "${normalizedQuery}"`);
      return normalizedQuery;
    }
    
    // –ï—Å–ª–∏ query –Ω–µ—Ç - —Ç–æ–≤–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω
    this.logger.warn(`‚ö†Ô∏è –¢–æ–≤–∞—Ä –±–µ–∑ query –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω: "${product.name}" (${product.source})`);
    return null;
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è query –¥–ª—è –ª—É—á—à–µ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
   */
  private normalizeQuery(query: string): string {
    let norm = query.toLowerCase().trim();
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã
    norm = norm.replace(/\s+/g, ' ').trim();
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º RTX –º–æ–¥–µ–ª–∏
    norm = norm.replace(/rtx\s*(\d+)/i, 'rtx$1');
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
    norm = norm.replace(/(\d+)\s*k\s*f?/i, '$1k');
    norm = norm.replace(/(\d+)\s*x\s*(\d+)/i, '$1x$2');
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã
    norm = norm.replace(/([a-z])\s*(\d+)/i, '$1$2');
    
    return norm;
  }



  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫—ç—à –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω—É–∂–Ω–æ –æ—Ç–¥–∞—Ç—å –±–æ—Ç—É
   */
  private async processCacheForProduct(product: ProcessedProduct): Promise<{
    shouldReturn: boolean;
    product: ProcessedProduct;
    fromCache: boolean;
  }> {
    const cacheKey = `product:${product.category}:${product.query}:${product.id}`;
    
    // –ï—Å–ª–∏ —ç—Ç–æ WB API —Ç–æ–≤–∞—Ä - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
    if (product.source === 'wb' && product.image_url) {
      try {
        this.logger.log(`üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è WB —Ç–æ–≤–∞—Ä–∞: ${product.name}`);
        const processedImageUrl = await this.photoService.processImageUrl(product.image_url);
        product.image_url = processedImageUrl;
        this.logger.log(`‚úÖ –§–æ—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedImageUrl}`);
      } catch (error) {
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: ${error.message}`);
      }
    }
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É
      const cachedData = await this.redisService.get(cacheKey);
      
      if (!cachedData) {
        // –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä - –∫—ç—à–∏—Ä—É–µ–º –∏ –æ—Ç–¥–∞–µ–º
        await this.redisService.set(cacheKey, product.price.toString());
        this.logger.debug(`üÜï –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä: ${product.name} –∑–∞ ${product.price}‚ÇΩ`);
        
        return {
          shouldReturn: true,
          product: { ...product, is_new: true },
          fromCache: false
        };
      }

      const cachedPrice = parseInt(cachedData);
      
      if (product.price < cachedPrice) {
        // –¶–µ–Ω–∞ —Å—Ç–∞–ª–∞ –ª—É—á—à–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏ –æ—Ç–¥–∞–µ–º
        await this.redisService.set(cacheKey, product.price.toString());
        const discountPercent = ((cachedPrice - product.price) / cachedPrice) * 100;
        
        this.logger.log(`üìâ –¶–µ–Ω–∞ —É–ø–∞–ª–∞: ${product.name} —Å ${cachedPrice}‚ÇΩ –¥–æ ${product.price}‚ÇΩ (—Å–∫–∏–¥–∫–∞ ${discountPercent.toFixed(1)}%)`);
        
        return {
          shouldReturn: true,
          product: { ...product, discount_percent: discountPercent },
          fromCache: false
        };
      } else if (product.price === cachedPrice) {
        // –¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å - –Ω–µ –æ—Ç–¥–∞–µ–º
        this.logger.debug(`‚û°Ô∏è –¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: ${product.name} - ${product.price}‚ÇΩ`);
        
        return {
          shouldReturn: false,
          product,
          fromCache: true
        };
      } else {
        // –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ - –Ω–µ –æ—Ç–¥–∞–µ–º
        this.logger.debug(`üìà –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞: ${product.name} —Å ${cachedPrice}‚ÇΩ –¥–æ ${product.price}‚ÇΩ`);
        
        return {
          shouldReturn: false,
          product,
          fromCache: true
        };
      }
      
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—ç—à–∞ –¥–ª—è ${product.id}:`, error);
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∫—ç—à–∞ - –æ—Ç–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
      return {
        shouldReturn: true,
        product,
        fromCache: false
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ query –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
   */
  async getQueryStatistics(request: ProductRequest): Promise<{
    total_queries: number;
    total_products: number;
    queries_stats: Array<{
      query: string;
      total_products: number;
      wb_products: number;
      ozon_products: number;
      cheapest_price?: number;
      cheapest_source?: string;
    }>;
  }> {
    this.logger.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è ${request.queries.length} –∑–∞–ø—Ä–æ—Å–æ–≤`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤—Å–µ—Ö API –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const [wbProducts, ozonProducts] = await Promise.all([
      this.getProductsFromWbApi(request),
      this.getProductsFromOzonApi(request)
    ]);

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    const allProducts = [...wbProducts, ...ozonProducts];

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ query
    const queryGroups = new Map<string, ProcessedProduct[]>();
    
    for (const product of allProducts) {
      const query = product.query || 'unknown';
      if (!queryGroups.has(query)) {
        queryGroups.set(query, []);
      }
      queryGroups.get(query)!.push(product);
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const queriesStats = [];
    
    for (const [query, products] of queryGroups) {
      const wbProducts = products.filter(p => p.source === 'wb');
      const ozonProducts = products.filter(p => p.source === 'ozon');
      
      let cheapestPrice: number | undefined;
      let cheapestSource: string | undefined;
      
      if (products.length > 0) {
        const cheapest = products.reduce((min, p) => p.price < min.price ? p : min);
        cheapestPrice = cheapest.price;
        cheapestSource = cheapest.source;
      }

      queriesStats.push({
        query,
        total_products: products.length,
        wb_products: wbProducts.length,
        ozon_products: ozonProducts.length,
        cheapest_price: cheapestPrice,
        cheapest_source: cheapestSource
      });
    }

    return {
      total_queries: request.queries.length,
      total_products: allProducts.length,
      queries_stats: queriesStats
    };
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫—ç—à –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async clearCacheForCategory(category: string): Promise<number> {
    try {
      const pattern = `product:${category}:*`;
      const deletedKeys = await this.redisService.deleteByPattern(pattern);
      this.logger.log(`üóëÔ∏è –û—á–∏—â–µ–Ω –∫—ç—à –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}: ${deletedKeys} –∫–ª—é—á–µ–π`);
      return deletedKeys;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}:`, error);
      return 0;
    }
  }
} 