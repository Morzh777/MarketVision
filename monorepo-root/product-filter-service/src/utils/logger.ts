import * as fs from 'fs';
import * as path from 'path';

class FileLogger {
  private logStream: fs.WriteStream;
  private logFile: string;

  constructor() {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º process.cwd() –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
    const logsDir = path.join(process.cwd(), 'logs');
    if (!fs.existsSync(logsDir)) {
      fs.mkdirSync(logsDir, { recursive: true });
    }

    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞
    this.logFile = path.join(logsDir, `product-filter-${new Date().toISOString().split('T')[0]}.log`);
    this.logStream = fs.createWriteStream(this.logFile, { flags: 'a' });
    
    console.log(`üìù –õ–æ–≥–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤: ${this.logFile}`);
  }

  log(message: string, context?: string) {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] LOG [${context || 'ProductFilterService'}] ${message}\n`;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    this.logStream.write(logMessage);
    
    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log(`[${context || 'ProductFilterService'}] ${message}`);
  }

  error(message: string, context?: string) {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] ERROR [${context || 'ProductFilterService'}] ${message}\n`;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    this.logStream.write(logMessage);
    
    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    console.error(`[${context || 'ProductFilterService'}] ${message}`);
  }

  warn(message: string, context?: string) {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] WARN [${context || 'ProductFilterService'}] ${message}\n`;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    this.logStream.write(logMessage);
    
    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    console.warn(`[${context || 'ProductFilterService'}] ${message}`);
  }

  debug(message: string, context?: string) {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] DEBUG [${context || 'ProductFilterService'}] ${message}\n`;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    this.logStream.write(logMessage);
    
    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    console.debug(`[${context || 'ProductFilterService'}] ${message}`);
  }

  getLogFilePath(): string {
    return this.logFile;
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
export const fileLogger = new FileLogger(); 