import { Controller, Post, Body, Logger, UsePipes, ValidationPipe } from '@nestjs/common';
import { ProductsService } from '../services/products.service';
import { DbApiHttpClient } from '../http-clients/db-api.client';
import { DbConfigService } from '../services/db-config.service';

interface ParsingTriggerDto {
  categoryKey: string;
  queryText?: string; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
}

@Controller('parsing')
export class ParsingController {
  private readonly logger = new Logger(ParsingController.name);

  constructor(
    private readonly productsService: ProductsService,
    private readonly dbApiClient: DbApiHttpClient,
    private readonly dbConfigService: DbConfigService
  ) {}

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
   */
  private async clearCache(): Promise<void> {
    try {
      // –û—á–∏—â–∞–µ–º –∫—ç—à —á–µ—Ä–µ–∑ MarketVision API
      const response = await fetch('http://marketvision-frontend-dev:3006/api/cache/clear', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      if (!result.success) {
        throw new Error(result.message || 'Cache clear failed');
      }
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: ${error.message}`);
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * POST /parsing/trigger
   * 
   * @param request - DTO —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
   */
  @Post('trigger')
  @UsePipes(new ValidationPipe({ 
    transform: true,
    whitelist: true,
    forbidNonWhitelisted: true,
    forbidUnknownValues: true
  }))
  async triggerParsing(@Body() request: ParsingTriggerDto) {
    this.logger.log(`üöÄ –ü–æ–ª—É—á–µ–Ω–æ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${request.categoryKey}`);
    
    const startTime = Date.now();
    
    try {
      // 1. –ó–∞–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ DB API
      this.logger.log(`üì• –ó–∞–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${request.categoryKey} –∏–∑ DB API`);
      const queriesResponse = await this.dbApiClient.getQueriesForCategory(request.categoryKey);
      const queries = queriesResponse.queries || [];
      
      if (!queries || queries.length === 0) {
        this.logger.warn(`‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${request.categoryKey}`);
        return {
          success: false,
          message: `–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${request.categoryKey}`,
          data: { queries_found: 0 }
        };
      }

      this.logger.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${queries.length} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞`);

      // 2. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö ID
      const categoryConfig = await this.dbConfigService.getCategoryConfig(request.categoryKey);
      if (!categoryConfig) {
        this.logger.error(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${request.categoryKey}`);
        return {
          success: false,
          message: `–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${request.categoryKey}`,
          data: { queries_found: 0 }
        };
      }

      this.logger.log(`üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: WB ID=${categoryConfig.wb_id}, Ozon ID=${categoryConfig.ozon_id}`);

      // 3. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º query –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
      const uniqueQueries = new Map();
      for (const query of queries) {
        if (!uniqueQueries.has(query.query)) {
          uniqueQueries.set(query.query, []);
        }
        uniqueQueries.get(query.query).push(query);
      }
      
      this.logger.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${uniqueQueries.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞`);
      
      const results = [];
      for (const [queryText, queryConfigs] of uniqueQueries) {
        this.logger.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞: "${queryText}" (${queryConfigs.length} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π)`);
        
        const queryRequest = {
          queries: [queryText],
          category: request.categoryKey, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
          platform_id: undefined, // –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ ProductAggregatorService
          exactmodels: undefined // –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ ProductAggregatorService
        };
        
        const result = await this.productsService.getProducts(queryRequest);
        results.push({
          query: queryText,
          platforms: queryConfigs.map(q => q.platform).join(', '),
          products_found: result.products.length
        });
      }

      const processingTime = Date.now() - startTime;
      const totalProducts = results.reduce((sum, r) => sum + r.products_found, 0);
      
      this.logger.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${processingTime}ms, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${queries.length} –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–∞–π–¥–µ–Ω–æ ${totalProducts} —Ç–æ–≤–∞—Ä–æ–≤`);
      
      // 4. –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
      try {
        this.logger.log(`üßπ –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞...`);
        await this.clearCache();
        this.logger.log(`‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω`);
      } catch (cacheError) {
        this.logger.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à: ${cacheError.message}`);
      }
      
      return {
        success: true,
        message: '–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –∑–∞–≤–µ—Ä—à–µ–Ω',
        data: {
          category: request.categoryKey,
          queries_processed: queries.length,
          total_products_found: totalProducts,
          processing_time_ms: processingTime,
          results
        }
      };
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${error.message}`, error.stack);
      
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞',
        error: error.message
      };
    }
  }
}
