import { Controller, Post, Body, Get, Query, Logger, UsePipes, ValidationPipe } from '@nestjs/common';
import { ProductsService } from '../services/products.service';
import { ProductRequestDto } from '../dto/product-request.dto';

@Controller('products')
export class ProductsController {
  private readonly logger = new Logger(ProductsController.name);

  constructor(private readonly productsService: ProductsService) {}

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   * POST /products/search
   * 
   * @param request - DTO —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞
   * @returns ProductResponse —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
   */
  @Post('search')
  @UsePipes(new ValidationPipe({ 
    transform: true,
    whitelist: true,
    forbidNonWhitelisted: true,
    forbidUnknownValues: true
  }))
  async searchProducts(@Body() request: ProductRequestDto) {
    this.logger.log(`üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${request.queries?.join(', ')} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${request.category}`);
    
    const startTime = Date.now();
    const result = await this.productsService.getProducts(request);
    const processingTime = Date.now() - startTime;
    
    this.logger.log(`‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${processingTime}ms, –Ω–∞–π–¥–µ–Ω–æ ${result.products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    
    return {
      ...result,
      processing_time_ms: processingTime
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
   * GET /products/cache/stats
   */
  @Get('cache/stats')
  async getCacheStats() {
    return {
      cache_hits: 0,
      cache_misses: 0,
      cache_size: 0,
      cache_ttl: 300
    };
  }
} 