/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * –ó–∞–ø—É—Å–∫: node test-new-validation.js
 */

// –ò–º–∏—Ç–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
class MockOpenAiService {
  async validateProducts(products, category) {
    // –ò–º–∏—Ç–∞—Ü–∏—è AI –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    return products.map(product => ({
      id: product.id,
      isValid: !product.name.toLowerCase().includes('–∫–∞–±–µ–ª—å'),
      reason: product.name.toLowerCase().includes('–∫–∞–±–µ–ª—å') ? '–∞–∫—Å–µ—Å—Å—É–∞—Ä' : '–ø—Ä–æ—à—ë–ª AI –≤–∞–ª–∏–¥–∞—Ü–∏—é'
    }));
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É (–±–µ–∑ TypeScript –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
const testProducts = [
  {
    id: '1',
    name: 'MSI RTX 5080 Gaming X Trio 16GB',
    price: 85000,
    query: 'RTX 5080',
    source: 'wb'
  },
  {
    id: '2', 
    name: '–ö–∞–±–µ–ª—å DisplayPort –¥–ª—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã',
    price: 500,
    query: 'RTX 5080',
    source: 'wb'
  },
  {
    id: '3',
    name: 'AMD Ryzen 7 7800X3D',
    price: 32000,
    query: '7800X3D',
    source: 'ozon'
  },
  {
    id: '4',
    name: 'AMD Ryzen 7 7800X3D OEM',
    price: 8000, // –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–µ—à—ë–≤—ã–π
    query: '7800X3D', 
    source: 'wb'
  }
];

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏\n');

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
console.log('üìã –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
try {
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  const videocardConfig = {
    enabled: true,
    displayName: '–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã',
    rules: {
      requiredKeywords: ['rtx', 'gtx', 'rx'],
      brands: ['msi', 'palit', 'gigabyte'],
      minFeatures: 2
    }
  };
  console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ videocards –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
  console.log('   –¢—Ä–µ–±—É–µ–º—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:', videocardConfig.rules.requiredKeywords.join(', '));
  console.log('   –ë—Ä–µ–Ω–¥—ã:', videocardConfig.rules.brands.join(', '));
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
console.log('\nüí∞ –¢–µ—Å—Ç 2: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω');
const processorProducts = testProducts.filter(p => p.query === '7800X3D');
console.log('–¢–æ–≤–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–Ω:');
processorProducts.forEach(p => {
  console.log(`  - ${p.name}: ${p.price}‚ÇΩ`);
});

// –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π
const prices = processorProducts.map(p => p.price);
const mean = prices.reduce((sum, price) => sum + price, 0) / prices.length;
const suspicious = prices.filter(price => price < mean * 0.3); // –¶–µ–Ω—ã –Ω–∏–∂–µ 30% –æ—Ç —Å—Ä–µ–¥–Ω–µ–π

console.log(`–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${mean.toFixed(0)}‚ÇΩ`);
console.log(`–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–Ω—ã (< 30% –æ—Ç —Å—Ä–µ–¥–Ω–µ–π): ${suspicious.join(', ')}‚ÇΩ`);
if (suspicious.length > 0) {
  console.log('‚úÖ –ê–Ω–æ–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!');
} else {
  console.log('‚ÑπÔ∏è –ê–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
console.log('\nüîç –¢–µ—Å—Ç 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤');
const accessoryWords = ['–∫–∞–±–µ–ª—å', '–ø–æ–¥—Å—Ç–∞–≤–∫–∞', '–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä', '—á–µ—Ö–æ–ª'];
testProducts.forEach(product => {
  const isAccessory = accessoryWords.some(word => 
    product.name.toLowerCase().includes(word)
  );
  console.log(`${isAccessory ? '‚ùå' : '‚úÖ'} ${product.name} - ${isAccessory ? '–ê–ö–°–ï–°–°–£–ê–†' : '–¢–û–í–ê–†'}`);
});

// –¢–µ—Å—Ç 4: –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
console.log('\nüîÑ –¢–µ—Å—Ç 4: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏');

function mockValidateProduct(product, category) {
  // –§–∞–∑–∞ 1: Accessory filter
  const accessoryWords = ['–∫–∞–±–µ–ª—å', '–ø–æ–¥—Å—Ç–∞–≤–∫–∞', '–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä'];
  if (accessoryWords.some(word => product.name.toLowerCase().includes(word))) {
    return { isValid: false, reason: 'accessory-words', confidence: 1.0 };
  }

  // –§–∞–∑–∞ 2: Price anomaly
  if (product.price < 10000 && category === 'processors') {
    return { isValid: true, reason: 'price-anomaly', confidence: 0.5, needsAI: true };
  }

  // –§–∞–∑–∞ 3: Code validation
  const categoryRules = {
    videocards: {
      keywords: ['rtx', 'gtx', 'rx'],
      brands: ['msi', 'palit', 'gigabyte']
    },
    processors: {
      keywords: ['amd', 'intel', 'ryzen'],
      brands: ['amd', 'intel']
    }
  };

  const rules = categoryRules[category];
  if (rules) {
    const hasKeyword = rules.keywords.some(k => 
      product.name.toLowerCase().includes(k) || product.query.toLowerCase().includes(k)
    );
    const hasBrand = rules.brands.some(b => 
      product.name.toLowerCase().includes(b)
    );

    if (hasKeyword && hasBrand) {
      return { isValid: true, reason: 'code-validated', confidence: 0.9 };
    } else if (hasKeyword) {
      return { isValid: true, reason: 'needs-ai', confidence: 0.6, needsAI: true };
    }
  }

  return { isValid: false, reason: 'validation-failed', confidence: 0.3 };
}

// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
const groupedByCategory = {
  videocards: testProducts.filter(p => p.query.includes('RTX')),
  processors: testProducts.filter(p => p.query.includes('7800X3D'))
};

for (const [category, products] of Object.entries(groupedByCategory)) {
  if (products.length === 0) continue;
  
  console.log(`\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}`);
  
  let needsAI = [];
  let validated = [];
  let rejected = [];

  products.forEach(product => {
    const result = mockValidateProduct(product, category);
    
    if (!result.isValid) {
      rejected.push({ product, result });
    } else if (result.needsAI) {
      needsAI.push({ product, result });
    } else {
      validated.push({ product, result });
    }
  });

  console.log(`  ‚úÖ –ü—Ä–æ—à–ª–∏ code validation: ${validated.length}`);
  validated.forEach(({ product, result }) => {
    console.log(`     - ${product.name} (${result.reason}, confidence: ${result.confidence})`);
  });

  console.log(`  ü§ñ –¢—Ä–µ–±—É—é—Ç AI –≤–∞–ª–∏–¥–∞—Ü–∏—é: ${needsAI.length}`);
  needsAI.forEach(({ product, result }) => {
    console.log(`     - ${product.name} (${result.reason})`);
  });

  console.log(`  ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã: ${rejected.length}`);
  rejected.forEach(({ product, result }) => {
    console.log(`     - ${product.name} (${result.reason})`);
  });
}

console.log('\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
console.log('\nüìä –°–≤–æ–¥–∫–∞ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:');
console.log('  ‚úÖ –ï–¥–∏–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
console.log('  ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é');
console.log('  ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω');
console.log('  ‚úÖ –≠—Ç–∞–ø–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å confidence scores');
console.log('  ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ AI –∑–∞–ø—Ä–æ—Å—ã');

console.log('\nüöÄ –î–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–Ω:');
console.log('  1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
console.log('  2. –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
console.log('  3. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º');
console.log('  4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏'); 