import { NextRequest, NextResponse } from 'next/server';
import { API_CONFIG } from '@/config/settings';

const PRODUCT_FILTER_URL = API_CONFIG.PRODUCT_FILTER_URL;

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { categoryKey } = body;

    if (!categoryKey) {
      return NextResponse.json(
        { success: false, message: 'categoryKey is required' },
        { status: 400 }
      );
    }

    console.log(`üöÄ MarketVision API: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryKey}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ –≤ Product-Filter —Å–µ—Ä–≤–∏—Å —á–µ—Ä–µ–∑ nginx
    const response = await fetch(`${PRODUCT_FILTER_URL}/parsing/trigger`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ categoryKey }),
    });

    const result = await response.json();

    if (!response.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç Product-Filter:`, result);
      return NextResponse.json(
        { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞', error: result },
        { status: response.status }
      );
    }

    console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryKey}`);
    
    return NextResponse.json({
      success: true,
      message: '–£–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ',
      data: result.data
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ MarketVision API:', error);
    return NextResponse.json(
      { success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message },
      { status: 500 }
    );
  }
}
