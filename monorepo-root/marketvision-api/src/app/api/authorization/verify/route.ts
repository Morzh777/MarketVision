import { NextRequest, NextResponse } from 'next/server';

import { API_CONFIG } from '@/config/settings';

export async function GET(request: NextRequest) {
  try {
    console.log('üîç API verify: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω...');
    const token = request.cookies.get('auth-token')?.value;
    console.log('üç™ –¢–æ–∫–µ–Ω –∏–∑ cookie:', token ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
    
    if (!token) {
      console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ cookie');
      return NextResponse.json(
        { success: false, message: '–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 401 }
      );
    }

    const response = await fetch(`${API_CONFIG.EXTERNAL_API_BASE_URL}/api/admin/verify`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
    });

    const data = await response.json();
    
    if (response.ok && data.success) {
      return NextResponse.json(data, { status: response.status });
    } else {
      return NextResponse.json(
        { success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' },
        { status: 401 }
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    return NextResponse.json(
      { success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
