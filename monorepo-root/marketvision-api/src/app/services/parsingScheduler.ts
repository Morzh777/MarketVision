// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ product-filter-service
// –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

const PRODUCT_FILTER_URL = process.env.PRODUCT_FILTER_SERVICE_URL || 'http://localhost:3001';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ç–µ—Å—Ç–µ)
const PARSING_CONFIG = {
  videocards: [
    'rtx 5070',
    'rtx 5070 ti',
    'rtx 5080',
    'rtx 5090'
  ],
  processors: [
    '7800x3d',
    '9800x3d',
    '9950x3d'
  ],
  motherboards: [
    'Z790',
    'B760',
    'X870E',
    'B850',
    'B760M-K'
  ],
  playstation: [
    'playstation 5',
    'playstation 5 pro'
  ],
  nintendo_switch: [
    'nintendo switch 2',
  ],
  steam_deck: [
    'steam deck oled'
  ],
  iphone: [
    'iphone 16 pro',
  ]
};

class ParsingScheduler {
  private isRunning = false;
  private schedulerInterval: NodeJS.Timeout | null = null;
  private isParsing = false;
  private activeCategories: Record<string, boolean> = {
    videocards: true,    // —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
    processors: true,    // —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
    motherboards: true,  // —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
    playstation: true,      // –≤–∫–ª—é—á–µ–Ω–∞
    nintendo_switch: true, // —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
    steam_deck: true,    // —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
    iphone: true,        // —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
  };

  constructor() {
    console.log('üóìÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
   */
  start() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    this.isRunning = true;
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    setTimeout(() => {
      this.runScheduledParsing();
    }, 60000);

    // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    this.schedulerInterval = setInterval(() => {
      this.runScheduledParsing();
    }, 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç

    console.log('‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç');
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
   */
  stop() {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    this.isRunning = false;
    if (this.schedulerInterval) {
      clearInterval(this.schedulerInterval);
      this.schedulerInterval = null;
    }
    console.log('‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  async runScheduledParsing() {
    if (this.isParsing) {
      console.log('‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return;
    }

    this.isParsing = true;
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π');

    try {
      const startTime = Date.now();
      let totalProducts = 0;
      let totalCategories = 0;

      // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å)

      for (const [categoryKey, queries] of Object.entries(PARSING_CONFIG)) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (!this.activeCategories[categoryKey]) {
          console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${categoryKey} (–æ—Ç–∫–ª—é—á–µ–Ω–∞)`);
          continue;
        }

        try {
          console.log(`üì¶ –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryKey}`);
          
          const products = await this.parseCategory(categoryKey, queries);
          totalProducts += products.length;
          totalCategories++;

          console.log(`‚úÖ ${categoryKey}: –Ω–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
          
          // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
          await this.delay(2000);
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryKey}:`, error instanceof Error ? error.message : String(error));
        }
      }

      const duration = Date.now() - startTime;
      console.log(`üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: ${totalProducts} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ ${totalCategories} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞ ${duration}ms`);

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error instanceof Error ? error.message : String(error));
    } finally {
      this.isParsing = false;
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ REST API
   */
  private async parseCategory(categoryKey: string, queries: string[]) {
    console.log(`üîç –ü–∞—Ä—Å–∏–Ω–≥ ${categoryKey}: ${queries.join(', ')}`);

    try {
      const response = await fetch(`${PRODUCT_FILTER_URL}/products/search`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          queries,
          category: categoryKey
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json() as { products?: unknown[] };
      console.log(`‚úÖ ${categoryKey}: –ø–æ–ª—É—á–µ–Ω–æ ${result.products?.length || 0} —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ REST API`);

      return result.products || [];
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${categoryKey}:`, error instanceof Error ? error.message : String(error));
      return [];
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async runParsingNow() {
    console.log('‚ö° –ó–∞–ø—É—Å–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞');
    await this.runScheduledParsing();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      isParsing: this.isParsing,
      nextRun: this.getNextRunTime(),
      config: PARSING_CONFIG,
      activeCategories: this.activeCategories
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  updateActiveCategories(categories: Record<string, boolean>) {
    this.activeCategories = { ...categories };
    console.log('üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', this.activeCategories);
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
   */
  private getNextRunTime(): Date {
    const now = new Date();
    const nextRun = new Date(now);
    
    // –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    nextRun.setMinutes(nextRun.getMinutes() + 30);
    nextRun.setSeconds(0);
    nextRun.setMilliseconds(0);
    
    return nextRun;
  }

  /**
   * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
const parsingScheduler = new ParsingScheduler();

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è (—Ç–æ–ª—å–∫–æ –≤ production)
if (process.env.NODE_ENV === 'production') {
  parsingScheduler.start();
}

export default parsingScheduler; 