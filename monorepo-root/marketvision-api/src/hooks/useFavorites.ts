import { useState, useEffect } from 'react'

import { normalizeQueryForFavorites } from '../app/utils/transliteration'

import { useAuth } from './useAuth'

interface Favorite {
  id: number
  query: string
  created_at: string
}

export function useFavorites() {
  const [favorites, setFavorites] = useState<Favorite[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const { user, isAuthenticated } = useAuth()

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const getFavorites = async (): Promise<void> => {
    if (!isAuthenticated || !user?.telegram_id) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ')
      return
    }

    try {
      setIsLoading(true)
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–æ—É—Ç —Å telegram_id
      const response = await fetch(`/api/auth/favorites/${user.telegram_id}`)
      
      if (response.ok) {
        const data = await response.json()
        if (data.success) {
          setFavorites(data.favorites)
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error)
    } finally {
      setIsLoading(false)
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  const addToFavorites = async (query: string): Promise<boolean> => {
    if (!isAuthenticated || !user?.telegram_id) {
      console.log('‚ùå useFavorites: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', {
        isAuthenticated,
        user,
        telegram_id: user?.telegram_id
      })
      return false
    }

    try {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º query –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      const normalizedQuery = normalizeQueryForFavorites(query)
      console.log('üîç useFavorites: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è query:', { 
        original: query, 
        normalized: normalizedQuery,
        telegram_id: user.telegram_id
      })

      const response = await fetch('/api/auth/favorites', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ telegram_id: user.telegram_id, query: normalizedQuery }),
      })

      if (response.ok) {
        const data = await response.json()
        if (data.success) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
          await getFavorites()
          return true
        }
      }
      return false
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', error)
      return false
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const removeFromFavorites = async (query: string): Promise<boolean> => {
    if (!isAuthenticated || !user?.telegram_id) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ')
      return false
    }

    try {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º query –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      const normalizedQuery = normalizeQueryForFavorites(query)
      console.log('üîç useFavorites: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è query –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', { original: query, normalized: normalizedQuery })

      const response = await fetch('/api/auth/favorites', {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ telegram_id: user.telegram_id, query: normalizedQuery }),
      })

      if (response.ok) {
        const data = await response.json()
        if (data.success) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
          await getFavorites()
          return true
        }
      }
      return false
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error)
      return false
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const checkFavorite = async (query: string): Promise<boolean> => {
    if (!isAuthenticated || !user?.telegram_id) {
      console.log('‚ùå useFavorites: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', {
        isAuthenticated,
        user,
        telegram_id: user?.telegram_id
      })
      return false
    }

    try {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º query –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      const normalizedQuery = normalizeQueryForFavorites(query)
      console.log('üîç useFavorites: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è query –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', { 
        original: query, 
        normalized: normalizedQuery,
        telegram_id: user.telegram_id
      })

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º path-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –º–∞—Ä—à—Ä—É—Ç—É Next API
      const response = await fetch(`/api/auth/favorites/${user.telegram_id}/check/${encodeURIComponent(normalizedQuery)}`)
      
      if (response.ok) {
        const data = await response.json()
        return data.success && data.isFavorite
      }
      return false
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error)
      return false
    }
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (–¥–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å)
  const toggleFavorite = async (query: string): Promise<boolean> => {
    const isFavorite = await checkFavorite(query)
    
    if (isFavorite) {
      return await removeFromFavorites(query)
    } else {
      return await addToFavorites(query)
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (isAuthenticated && user?.telegram_id) {
      getFavorites()
    }
  }, [isAuthenticated, user?.telegram_id])

  return {
    favorites,
    isLoading,
    addToFavorites,
    removeFromFavorites,
    checkFavorite,
    toggleFavorite,
    getFavorites,
  }
}
