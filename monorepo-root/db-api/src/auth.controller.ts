import { Controller, Post, Body, Get, Param, Req } from '@nestjs/common';
import { Request } from 'express';
import { UserService } from './services/userService';
import { TelegramInitDto } from './dto/telegram.dto';

interface AuthUser {
  id: string;
  username: string;
  role: string;
}

@Controller('auth')
export class AuthController {
  constructor(private userService: UserService) {}

  @Get('verify')
  async verify(@Req() request: Request) {
    try {
      const authHeader = request.headers.authorization;
      if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return {
          success: false,
          message: '–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω',
        };
      }

      const token = authHeader.substring(7);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
      if (!token) {
        return {
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω',
        };
      }

      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id (—Ç–æ–∫–µ–Ω—É)
      // eslint-disable-next-line @typescript-eslint/no-unsafe-call
      const user = (await this.userService.getUserById(
        token,
      )) as AuthUser | null;
      if (!user) {
        return {
          success: false,
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω',
        };
      }

      return {
        success: true,
        message: '–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω',
        user: {
          id: user.id,
          username: user.username,
          role: user.role,
        },
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞',
      };
    }
  }

  @Post('logout')
  logout() {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
      // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
      return {
        success: true,
        message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞',
      };
    }
  }

  @Post('login')
  async login(@Body() body: { username: string; password: string }) {
    console.log('üîç –õ–æ–≥–∏–Ω –∑–∞–ø—Ä–æ—Å:', {
      username: body.username,
      password: body.password ? '***' : 'empty',
    });

    const user = await this.userService.validateUser(
      body.username,
      body.password,
    );

    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç validateUser:', user);

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      return { success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' };
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º id –∫–∞–∫ —Ç–æ–∫–µ–Ω
    const token = user.id;

    console.log('‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω, —Ç–æ–∫–µ–Ω:', token);

    return {
      success: true,
      user: { id: user.id, username: user.username, role: user.role },
      token: token,
    };
  }

  @Post('init')
  async init() {
    await this.userService.createAdmin();
    return { success: true, message: '–ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω' };
  }

  @Post('telegram')
  async saveTelegramUser(@Body() telegramUser: TelegramInitDto) {
    try {
      const user = await this.userService.saveTelegramUser(telegramUser);
      return {
        success: true,
        message: 'Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
        user,
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      };
    }
  }

  @Get('telegram')
  async checkTelegramAuth(@Req() request: Request) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ cookie
      const cookies = request.headers.cookie;
      if (!cookies) {
        return {
          success: false,
          message: 'Cookie –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        };
      }

      // –ü–∞—Ä—Å–∏–º cookie –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è telegram_id
      const cookiePairs = cookies
        .split(';')
        .map((pair) => pair.trim().split('='));
      const telegramIdCookie = cookiePairs.find(
        ([key]) => key === 'telegram_id',
      );

      if (!telegramIdCookie || !telegramIdCookie[1]) {
        return {
          success: false,
          message: 'telegram_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ cookie',
        };
      }

      const telegramId = telegramIdCookie[1];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const user = await this.userService.getTelegramUser(telegramId);
      if (!user) {
        return {
          success: false,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        };
      }

      return {
        success: true,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
        user,
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
      };
    }
  }

  @Get('telegram/:telegram_id')
  async getTelegramUser(@Param('telegram_id') telegramId: string) {
    try {
      const user = await this.userService.getTelegramUser(telegramId);
      if (!user) {
        return {
          success: false,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        };
      }
      return {
        success: true,
        message: 'Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω',
        user,
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      };
    }
  }

  @Post('favorites/add')
  async addToFavorites(@Body() body: { telegram_id: string; query: string }) {
    try {
      const favorite = await this.userService.addToFavorites(
        body.telegram_id,
        body.query,
      );
      return {
        success: true,
        message: '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
        favorite,
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
      };
    }
  }

  @Post('favorites/remove')
  async removeFromFavorites(
    @Body() body: { telegram_id: string; query: string },
  ) {
    try {
      const result = await this.userService.removeFromFavorites(
        body.telegram_id,
        body.query,
      );
      return {
        success: true,
        message: '–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
        result,
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
      };
    }
  }

  @Get('favorites/:telegram_id')
  async getFavorites(@Param('telegram_id') telegramId: string) {
    try {
      const favorites = await this.userService.getFavorites(telegramId);
      return {
        success: true,
        message: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–æ',
        favorites,
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
      };
    }
  }

  @Get('favorites/:telegram_id/check/:query')
  async checkFavorite(
    @Param('telegram_id') telegramId: string,
    @Param('query') query: string,
  ) {
    try {
      const isFavorite = await this.userService.isFavorite(telegramId, query);
      return {
        success: true,
        message: '–°—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω',
        isFavorite,
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
      };
    }
  }

  @Get('users/:username')
  async getUser(@Param('username') username: string) {
    const user = await this.userService.getUserByUsername(username);

    if (!user) {
      return { success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }

    return {
      success: true,
      user: { id: user.id, username: user.username, role: user.role },
    };
  }
}
