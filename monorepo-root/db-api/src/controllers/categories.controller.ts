import {
  Body,
  Controller,
  Delete,
  Get,
  Param,
  Post,
  Put,
  Query,
  Req,
  UnauthorizedException,
} from '@nestjs/common';
import { CategoriesService } from '../services/categories.service';
import { QueriesService } from '../services/queries.service';
import { JwtService } from '../services/jwt.service';
import { Request } from 'express';

@Controller('categories')
export class CategoriesController {
  constructor(
    private readonly service: CategoriesService,
    private readonly queriesService: QueriesService,
    private readonly jwtService: JwtService,
  ) {}

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  @Get()
  async getAllCategories() {
    console.log('[CategoriesController] getAllCategories called');
    const categories = await this.service.getAllCategories();
    console.log('[CategoriesController] Found categories:', categories.length);
    return categories;
  }

  // Aggregate config for product-filter-service
  @Get('config')
  async getCategoryConfig(@Query('categoryKey') categoryKey: string) {
    const categories = (await this.service.listCategories()) as Array<{
      key: string;
    }>;
    const found = categories.find((c) => c.key === categoryKey);
    const category = (found ?? null) as { key: string } | null;
    const queries = (await this.queriesService.listQueryConfigs(
      categoryKey,
    )) as any[];
    const minPriceRules = (await this.service.listMinPriceRules(
      categoryKey,
    )) as any[];
    return { category, queries, minPriceRules };
  }

  // REST API –¥–ª—è product-filter-service
  @Get(':categoryKey/config')
  async getCategoryConfigForFilter(@Param('categoryKey') categoryKey: string) {
    console.log('[REST] getCategoryConfigForFilter called with:', categoryKey);
    const category = await this.service.getCategoryByKey(categoryKey);
    console.log('[REST] Category from DB:', category);
    const result = {
      category: category
        ? {
            key: category.key,
            display: category.display,
            ozon_id: category.ozon_id || '',
            wb_id: category.wb_id || '',
          }
        : null,
    };
    console.log('[REST] Returning:', result);
    return result;
  }

  // Groups
  @Get('groups')
  listGroups() {
    return this.service.listGroups();
  }

  @Post('groups')
  upsertGroup(@Body() body: { display: string }) {
    return this.service.upsertGroup(body.display);
  }

  // Categories - listCategories –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π –º–∞—Ä—à—Ä—É—Ç

  @Post()
  upsertCategory(
    @Req() request: Request,
    @Body()
    body: {
      key: string;
      display: string;
      ozon_id?: string | null;
      wb_id?: string | null;
      groupDisplay?: string | null;
    },
  ) {
    console.log('POST /categories controller called with:', body);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    const authHeader = request.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('‚ùå Authorization header missing or invalid');
      throw new UnauthorizedException('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const token = authHeader.substring(7);
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω:', token ? 'present' : 'missing');

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    const decoded = this.jwtService.validateToken(token);
    if (!decoded) {
      console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
      throw new UnauthorizedException('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (decoded.role !== 'admin') {
      console.log(
        '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:',
        decoded.role,
      );
      throw new UnauthorizedException(
        '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      );
    }

    console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', decoded.username);

    return this.service.upsertCategory(body);
  }

  @Put(':id')
  updateCategory(
    @Req() request: Request,
    @Param('id') id: string,
    @Body()
    body: {
      key: string;
      display: string;
      ozon_id?: string | null;
      wb_id?: string | null;
      groupDisplay?: string | null;
    },
  ) {
    console.log('PUT /categories/:id controller called with:', { id, body });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('‚ùå Authorization header missing or invalid');
      throw new UnauthorizedException('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const token = authHeader.substring(7);
    console.log(
      'üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:',
      token ? 'present' : 'missing',
    );

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    const decoded = this.jwtService.validateToken(token);
    if (!decoded) {
      console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
      throw new UnauthorizedException('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (decoded.role !== 'admin') {
      console.log(
        '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:',
        decoded.role,
      );
      throw new UnauthorizedException(
        '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      );
    }

    console.log(
      '‚úÖ JWT —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:',
      decoded.username,
    );

    return this.service.updateCategoryById(parseInt(id), body);
  }

  @Delete(':id')
  async deleteCategory(
    @Req() request: Request,
    @Param('id') id: string,
  ): Promise<unknown> {
    console.log('=== DELETE /categories/:id ===');
    console.log('CategoriesController.deleteCategory called with id:', id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('‚ùå Authorization header missing or invalid');
      throw new UnauthorizedException('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const token = authHeader.substring(7);
    console.log(
      'üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
      token ? 'present' : 'missing',
    );

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    const decoded = this.jwtService.validateToken(token);
    if (!decoded) {
      console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
      throw new UnauthorizedException('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (decoded.role !== 'admin') {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', decoded.role);
      throw new UnauthorizedException(
        '–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
      );
    }

    console.log(
      '‚úÖ JWT —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:',
      decoded.username,
    );
    return this.service.removeCategoryById(parseInt(id));
  }

  @Post('remove')
  async removeCategory(
    @Req() request: Request,
    @Body() body: { key: string },
  ): Promise<unknown> {
    console.log('=== POST /categories/remove ===');
    console.log('CategoriesController.removeCategory called with:', body);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authHeader = request.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('‚ùå Authorization header missing or invalid');
      throw new UnauthorizedException('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const token = authHeader.substring(7);
    console.log(
      'üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
      token ? 'present' : 'missing',
    );

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    const decoded = this.jwtService.validateToken(token);
    if (!decoded) {
      console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
      throw new UnauthorizedException('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    }

    console.log(
      '‚úÖ JWT —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:',
      decoded.username,
    );
    return this.service.removeCategoryByKey(body.key);
  }

  // Min price rules
  @Get('min-price')
  listMinPriceRules(@Query('categoryKey') categoryKey?: string) {
    return this.service.listMinPriceRules(categoryKey);
  }

  @Post('min-price')
  upsertMinPriceRule(
    @Body()
    body: {
      categoryKey: string;
      model_key?: string | null;
      query?: string | null;
      min_price: number;
      confidence?: 'high' | 'medium' | 'low';
      source?: 'manual' | 'auto';
    },
  ) {
    return this.service.upsertMinPriceRule(body);
  }
}
