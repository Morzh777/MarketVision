import { Injectable, HttpException, HttpStatus, Logger } from '@nestjs/common';
import { LoginDto, LoginResponseDto } from '../dto/login.dto';
import { JwtService, User } from './jwt.service';
import { PrismaService } from './prisma.service';
import * as bcrypt from 'bcryptjs';

@Injectable()
export class AuthService {
  private readonly logger = new Logger(AuthService.name);

  constructor(
    private readonly jwtService: JwtService,
    private readonly prisma: PrismaService,
  ) {}

  /**
   * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param loginDto - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
   * @returns –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω—ã
   */
  async login(loginDto: LoginDto): Promise<LoginResponseDto> {
    this.logger.log(`üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${loginDto.login}`);

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const user = await this.validateCredentials(
        loginDto.login,
        loginDto.password,
      );

      if (!user) {
        this.logger.warn(
          `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${loginDto.login}`,
        );
        throw new HttpException(
          '–ù–µ–≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
          HttpStatus.UNAUTHORIZED,
        );
      }

      // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã
      const tokens = this.jwtService.createTokenPair(user);

      this.logger.log(
        `‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username}`,
      );

      return {
        success: true,
        auth: tokens.auth,
        refresh_token: tokens.refresh_token,
        user: {
          id: user.id,
          username: user.username,
          role: user.role,
        },
      };
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error instanceof Error ? error.message : 'Unknown error'}`,
      );

      if (error instanceof HttpException) {
        throw error;
      }

      throw new HttpException(
        '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
   * @param refreshToken - refresh —Ç–æ–∫–µ–Ω
   * @returns –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
   */
  refresh(refreshToken: string): LoginResponseDto {
    this.logger.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º refresh —Ç–æ–∫–µ–Ω
      const user = this.jwtService.getUserFromToken(refreshToken);

      if (!user) {
        throw new HttpException(
          '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π refresh —Ç–æ–∫–µ–Ω',
          HttpStatus.UNAUTHORIZED,
        );
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
      const tokens = this.jwtService.createTokenPair(user);

      this.logger.log(`‚úÖ –¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username}`);

      return {
        success: true,
        auth: tokens.auth,
        refresh_token: tokens.refresh_token,
        user: {
          id: user.id,
          username: user.username,
          role: user.role,
        },
      };
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${error instanceof Error ? error.message : 'Unknown error'}`,
      );

      if (error instanceof HttpException) {
        throw error;
      }

      throw new HttpException(
        '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param login - –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param password - –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null
   */
  private async validateCredentials(
    login: string,
    password: string,
  ): Promise<User | null> {
    try {
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const user = await this.prisma.user.findUnique({
        where: { username: login },
      });

      if (!user) {
        this.logger.warn(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${login}`);
        return null;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é bcrypt
      const isPasswordValid = await bcrypt.compare(password, user.password);
      if (!isPasswordValid) {
        this.logger.warn(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${login}`);
        return null;
      }

      this.logger.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î: ${user.username}`);

      return {
        id: user.id,
        username: user.username,
        role: user.role,
      };
    } catch (error) {
      this.logger.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: ${error instanceof Error ? error.message : 'Unknown error'}`,
      );
      return null;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
   * @param token - JWT —Ç–æ–∫–µ–Ω
   * @returns –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null
   */
  validateToken(token: string): User | null {
    return this.jwtService.getUserFromToken(token);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
   * @param token - JWT —Ç–æ–∫–µ–Ω
   * @returns true –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω
   */
  isTokenValid(token: string): boolean {
    return this.jwtService.isTokenValid(token);
  }

  createTestToken(user: User): LoginResponseDto {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    const auth = this.jwtService.createToken(user, '30s');
    const refresh_token = this.jwtService.createToken(user, '7d');
    
    return {
      success: true,
      auth,
      refresh_token,
      user,
    };
  }
}
