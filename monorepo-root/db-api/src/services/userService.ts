import { PrismaClient } from '@prisma/client';
import { TelegramInitDto } from '../dto/telegram.dto';

export interface User {
  id: string;
  username: string;
  role: string;
}

const prisma = new PrismaClient();

export class UserService {
  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async validateUser(username: string, password: string) {
    console.log('üîç validateUser –≤—ã–∑–≤–∞–Ω —Å:', { username, password: password ? '***' : 'empty' });
    
    const user = await prisma.user.findUnique({
      where: { username },
    });

    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user ? { id: user.id, username: user.username, role: user.role } : null);

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    }

    if (user.password !== password) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      return null;
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∞–ª–∏–¥–µ–Ω');
    return {
      id: user.id,
      username: user.username,
      role: user.role,
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
  async getUserById(id: string): Promise<User | null> {
    console.log('üîç getUserById –≤—ã–∑–≤–∞–Ω —Å:', { id });
    
    const user = await prisma.user.findUnique({
      where: { id },
    });

    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ ID:', user ? { id: user.id, username: user.username, role: user.role } : null);

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID');
      return null;
    }

    return {
      id: user.id,
      username: user.username,
      role: user.role,
    };
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞
  async createAdmin() {
    const existing = await prisma.user.findUnique({
      where: { username: 'pavlishev' },
    });

    if (!existing) {
      await prisma.user.create({
        data: {
          username: 'pavlishev',
          password: '171989Bkmz',
          role: 'admin',
        },
      });
      console.log('‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω');
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async saveTelegramUser(telegramUser: TelegramInitDto) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = await prisma.telegramUser.findUnique({
        where: { telegram_id: telegramUser.telegram_id },
      });

      if (existingUser) {
        console.log(
          '‚úÖ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:',
          existingUser.telegram_id,
        );
        return existingUser;
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id
        const newUser = await prisma.telegramUser.create({
          data: {
            telegram_id: telegramUser.telegram_id,
            username: telegramUser.username,
            first_name: telegramUser.first_name,
            last_name: telegramUser.last_name,
          },
        });
        console.log('‚úÖ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', newUser.telegram_id);
        return newUser;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
  async getTelegramUser(telegramId: string) {
    try {
      const user = await prisma.telegramUser.findUnique({
        where: { telegram_id: telegramId },
      });

      if (!user) {
        console.log('‚ùå Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', telegramId);
        return null;
      }

      console.log('‚úÖ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.telegram_id);
      return user;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
  async getUserByUsername(username: string) {
    const user = await prisma.user.findUnique({
      where: { username },
    });

    if (!user) {
      return null;
    }

    return {
      id: user.id,
      username: user.username,
      role: user.role,
    };
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  async addToFavorites(telegramId: string, query: string) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
      const user = await prisma.telegramUser.findUnique({
        where: { telegram_id: telegramId },
      });

      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
      const favorite = await prisma.favorite.create({
        data: {
          telegram_user_id: user.id,
          query: query,
        },
      });

      console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', {
        telegram_id: telegramId,
        query,
      });
      return favorite;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', error);
      throw error;
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  async removeFromFavorites(telegramId: string, query: string) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
      const user = await prisma.telegramUser.findUnique({
        where: { telegram_id: telegramId },
      });

      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      const deleted = await prisma.favorite.deleteMany({
        where: {
          telegram_user_id: user.id,
          query: query,
        },
      });

      console.log('‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', {
        telegram_id: telegramId,
        query,
      });
      return { success: true, deletedCount: deleted.count };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getFavorites(telegramId: string) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
      const user = await prisma.telegramUser.findUnique({
        where: { telegram_id: telegramId },
      });

      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const favorites = await prisma.favorite.findMany({
        where: {
          telegram_user_id: user.id,
        },
        orderBy: {
          created_at: 'desc',
        },
      });

      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramId);
      return favorites;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
  async isFavorite(telegramId: string, query: string) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
      const user = await prisma.telegramUser.findUnique({
        where: { telegram_id: telegramId },
      });

      if (!user) {
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
      const favorite = await prisma.favorite.findFirst({
        where: {
          telegram_user_id: user.id,
          query: query,
        },
      });

      return !!favorite;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
      return false;
    }
  }
}
