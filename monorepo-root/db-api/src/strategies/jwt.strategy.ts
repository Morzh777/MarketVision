import { Injectable, UnauthorizedException } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { ExtractJwt, Strategy } from 'passport-jwt';
import { JWT_SECRET } from '../config/settings';

interface JwtPayload {
  type: string;
  userId: string;
  username: string;
  role: string;
}

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {
  constructor() {
    super({
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      ignoreExpiration: false,
      secretOrKey: JWT_SECRET,
      issuer: 'marketvision-api',
      audience: 'marketvision-client',
    });
  }

  validate(payload: JwtPayload) {
    console.log('üîç JWT Strategy validate called with payload:', payload);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'user' –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
    if (payload.type !== 'user') {
      console.log('‚ùå Invalid token type:', payload.type);
      throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞');
    }

    console.log('‚úÖ JWT token valid for user:', payload.username);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return {
      id: payload.userId,
      username: payload.username,
      role: payload.role,
    };
  }
}
