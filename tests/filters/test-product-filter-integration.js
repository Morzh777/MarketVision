const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const PRODUCT_FILTER_URL = 'http://localhost:3001';
const TEST_QUERIES = {
  videocards: ['rtx 4090', 'rtx 5090', 'rx 7900 xtx'],
  processors: ['14900kf', '14600kf', 'ryzen 7 7800x3d'],
  motherboards: ['X870E', 'B850', 'Z890']
};

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π endpoint –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */
async function testProductSearch() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...\n');

  for (const [category, queries] of Object.entries(TEST_QUERIES)) {
    console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ${category}`);
    console.log(`üîç –ó–∞–ø—Ä–æ—Å—ã: ${queries.join(', ')}`);

    try {
      const response = await axios.post(`${PRODUCT_FILTER_URL}/products/search`, {
        queries: queries,
        category: category,
        exclude_keywords: ['–∫–∞–±–µ–ª—å', '–∞–¥–∞–ø—Ç–µ—Ä', '–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è']
      });

      const data = response.data;
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${data.total_products} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${data.processing_time_ms}ms`);
      console.log(`üìä –ö—ç—à: ${data.cache_hits} hits, ${data.cache_misses} misses`);
      
      if (data.products.length > 0) {
        console.log('üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã:');
        data.products.forEach((product, index) => {
          const discount = product.discount_percent ? ` (—Å–∫–∏–¥–∫–∞ ${product.discount_percent.toFixed(1)}%)` : '';
          const isNew = product.is_new ? ' üÜï' : '';
          console.log(`  ${index + 1}. ${product.name} - ${product.price}‚ÇΩ${discount}${isNew} [${product.source}]`);
        });
      } else {
        console.log('‚ùå –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}:`, error.response?.data || error.message);
    }
    
    console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç health check
 */
async function testHealthCheck() {
  console.log('üè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...\n');

  try {
    const response = await axios.get(`${PRODUCT_FILTER_URL}/products/health`);
    const data = response.data;
    
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${data.status}`);
    console.log(`üïê –í—Ä–µ–º—è: ${data.timestamp}`);
    console.log('üîß –°–µ—Ä–≤–∏—Å—ã:');
    console.log(`  - Redis: ${data.services.redis.status}`);
    console.log(`  - WB API: ${data.services.wb_api.status}`);
    console.log(`  - Ozon API: ${data.services.ozon_api.status}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ health check:', error.response?.data || error.message);
  }
  
  console.log('');
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞
 */
async function testCacheClear() {
  console.log('üóëÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞...\n');

  for (const category of Object.keys(TEST_QUERIES)) {
    try {
      const response = await axios.post(`${PRODUCT_FILTER_URL}/products/cache/clear/${category}`);
      const data = response.data;
      
      console.log(`‚úÖ ${data.message}`);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –¥–ª—è ${category}:`, error.response?.data || error.message);
    }
  }
  
  console.log('');
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
 */
async function testCacheStats() {
  console.log('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞...\n');

  try {
    const response = await axios.get(`${PRODUCT_FILTER_URL}/products/cache/stats`);
    const data = response.data;
    
    console.log(`üìà –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: ${data.total_keys}`);
    console.log('üìã –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
    Object.entries(data.categories).forEach(([category, count]) => {
      console.log(`  - ${category}: ${count}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.response?.data || error.message);
  }
  
  console.log('');
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞
 */
async function testCacheBehavior() {
  console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∫—ç—à–∞...\n');

  const testQuery = {
    queries: ['rtx 4090'],
    category: 'videocards'
  };

  console.log('üìã –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å cache miss):');
  try {
    const response1 = await axios.post(`${PRODUCT_FILTER_URL}/products/search`, testQuery);
    const data1 = response1.data;
    console.log(`  - –ü—Ä–æ–¥—É–∫—Ç–æ–≤: ${data1.total_products}`);
    console.log(`  - –ö—ç—à: ${data1.cache_hits} hits, ${data1.cache_misses} misses`);
  } catch (error) {
    console.error('  ‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
  }

  console.log('\nüìã –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å cache hit):');
  try {
    const response2 = await axios.post(`${PRODUCT_FILTER_URL}/products/search`, testQuery);
    const data2 = response2.data;
    console.log(`  - –ü—Ä–æ–¥—É–∫—Ç–æ–≤: ${data2.total_products}`);
    console.log(`  - –ö—ç—à: ${data2.cache_hits} hits, ${data2.cache_misses} misses`);
  } catch (error) {
    console.error('  ‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
  }
  
  console.log('');
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Product Filter Service Integration\n');
  console.log('=' .repeat(60));

  try {
    await testHealthCheck();
    await testProductSearch();
    await testCacheBehavior();
    await testCacheStats();
    await testCacheClear();
    
    console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = {
  testProductSearch,
  testHealthCheck,
  testCacheClear,
  testCacheStats,
  testCacheBehavior
}; 