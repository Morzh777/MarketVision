#!/bin/bash

# ‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ MarketVision

echo "üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ MarketVision"
echo "================================================"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ —Å–µ—Ä–≤–∏—Å—ã
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤..."

# Ozon API
if curl -s http://localhost:3005/health > /dev/null 2>&1; then
    echo "‚úÖ Ozon API –∑–∞–ø—É—â–µ–Ω"
    ozon_running=true
else
    echo "‚ùå Ozon API –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    ozon_running=false
fi

# DB API
if curl -s http://localhost:3003/health > /dev/null 2>&1; then
    echo "‚úÖ DB API –∑–∞–ø—É—â–µ–Ω"
    db_running=true
else
    echo "‚ùå DB API –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    db_running=false
fi

# PostgreSQL
if docker exec postgres pg_isready -U user -d marketvision > /dev/null 2>&1; then
    echo "‚úÖ PostgreSQL –∑–∞–ø—É—â–µ–Ω"
    postgres_running=true
else
    echo "‚ùå PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    postgres_running=false
fi

echo ""
if [ "$ozon_running" = false ] || [ "$db_running" = false ] || [ "$postgres_running" = false ]; then
    echo "üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
    echo "   docker-compose -f docker-compose.ozon.yml up -d"
    echo "   docker-compose -f docker-compose.db.yml up -d"
    echo ""
    echo "‚ö†Ô∏è –¢–µ—Å—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
fi

echo ""
echo "üìä –¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
echo "=================================="

# CPU –∏ RAM
cpu_usage=$(top -l 1 | grep "CPU usage" | awk '{print $3}' | sed 's/%//')
ram_usage=$(top -l 1 | grep "PhysMem" | awk '{print $2}' | sed 's/[A-Z]//g')

echo "üíª CPU: ${cpu_usage}%"
echo "üß† RAM: ${ram_usage}MB"

echo ""
echo "üê≥ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
echo "===================="

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}" 2>/dev/null || echo "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"

echo ""
echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É..."
echo "========================"

# –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ health endpoint
echo "1Ô∏è‚É£ –¢–µ—Å—Ç health endpoint..."
if [ "$ozon_running" = true ]; then
    start_time=$(date +%s.%N)
    curl -s http://localhost:3005/health > /dev/null
    end_time=$(date +%s.%N)
    response_time=$(echo "$end_time - $start_time" | bc)
    echo "   ‚è±Ô∏è Ozon API –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${response_time} —Å–µ–∫—É–Ω–¥"
fi

if [ "$db_running" = true ]; then
    start_time=$(date +%s.%N)
    curl -s http://localhost:3003/health > /dev/null
    end_time=$(date +%s.%N)
    response_time=$(echo "$end_time - $start_time" | bc)
    echo "   ‚è±Ô∏è DB API –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${response_time} —Å–µ–∫—É–Ω–¥"
fi

# –¢–µ—Å—Ç 2: –ù–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
echo "2Ô∏è‚É£ –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤..."
start_time=$(date +%s.%N)
if [ "$ozon_running" = true ]; then
    for i in {1..3}; do
        curl -s http://localhost:3005/health > /dev/null &
    done
fi

if [ "$db_running" = true ]; then
    for i in {1..3}; do
        curl -s http://localhost:3003/health > /dev/null &
    done
fi
wait
end_time=$(date +%s.%N)
total_time=$(echo "$end_time - $start_time" | bc)
echo "   ‚è±Ô∏è –í—Ä–µ–º—è 6 –∑–∞–ø—Ä–æ—Å–æ–≤: ${total_time} —Å–µ–∫—É–Ω–¥"

echo ""
echo "üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:"
echo "======================"

# –ê–Ω–∞–ª–∏–∑ CPU
if (( $(echo "$cpu_usage > 80" | bc -l) )); then
    echo "üî• CPU: –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ - –Ω—É–∂–Ω—ã 4+ —è–¥—Ä–∞"
    cpu_recommendation="High C4-M8-D80"
elif (( $(echo "$cpu_usage > 50" | bc -l) )); then
    echo "‚ö° CPU: –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞ - 2-4 —è–¥—Ä–∞"
    cpu_recommendation="High C2-M4-D60"
else
    echo "‚úÖ CPU: –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ - 1-2 —è–¥—Ä–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
    cpu_recommendation="High C1-M2-D20"
fi

# –ê–Ω–∞–ª–∏–∑ RAM
if (( ram_usage > 6000 )); then
    echo "üî• RAM: –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ - –Ω—É–∂–Ω–æ 8+ –ì–ë"
    ram_recommendation="High C4-M8-D80"
elif (( ram_usage > 3000 )); then
    echo "‚ö° RAM: –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞ - 4-8 –ì–ë"
    ram_recommendation="High C2-M4-D60"
else
    echo "‚úÖ RAM: –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ - 2-4 –ì–ë –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
    ram_recommendation="High C1-M2-D20"
fi

echo ""
echo "üèÜ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Å–µ—Ä–≤–µ—Ä—É:"
echo "==========================="
echo "   $cpu_recommendation –∏–ª–∏ $ram_recommendation"

echo ""
echo "üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã:"
echo "========================"
echo "   ./scripts/performance_test.sh full-test  # –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"
echo "   ./scripts/performance_test.sh monitor 60 5  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ 60 —Å–µ–∫" 