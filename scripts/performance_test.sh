#!/bin/bash

# üöÄ –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ MarketVision

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
monitor_resources() {
    local duration=$1
    local interval=$2
    
    print_status "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ ${duration} —Å–µ–∫—É–Ω–¥..."
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    local temp_file=$(mktemp)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
    (
        for ((i=0; i<duration; i+=interval)); do
            # CPU –∏ RAM
            cpu_usage=$(top -l 1 | grep "CPU usage" | awk '{print $3}' | sed 's/%//')
            ram_usage=$(top -l 1 | grep "PhysMem" | awk '{print $2}' | sed 's/[A-Z]//g')
            
            # Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            docker_stats=$(docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" 2>/dev/null || echo "No containers")
            
            echo "$(date '+%H:%M:%S') | CPU: ${cpu_usage}% | RAM: ${ram_usage}MB | Docker: ${docker_stats}" >> "$temp_file"
            
            sleep $interval
        done
    ) &
    
    local monitor_pid=$!
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    wait $monitor_pid
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    echo ""
    print_success "üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:"
    echo "=================================="
    cat "$temp_file"
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    analyze_results "$temp_file"
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    rm "$temp_file"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
analyze_results() {
    local file=$1
    
    print_status "üîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤..."
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU
    max_cpu=$(grep -o "CPU: [0-9.]*%" "$file" | sed 's/CPU: //' | sed 's/%//' | sort -n | tail -1)
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM
    max_ram=$(grep -o "RAM: [0-9]*MB" "$file" | sed 's/RAM: //' | sed 's/MB//' | sort -n | tail -1)
    
    # –°—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU
    avg_cpu=$(grep -o "CPU: [0-9.]*%" "$file" | sed 's/CPU: //' | sed 's/%//' | awk '{sum+=$1} END {print sum/NR}')
    
    # –°—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM
    avg_ram=$(grep -o "RAM: [0-9]*MB" "$file" | sed 's/RAM: //' | sed 's/MB//' | awk '{sum+=$1} END {print sum/NR}')
    
    echo ""
    print_success "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤:"
    echo "=============================================="
    echo "üî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
    echo "   CPU: ${max_cpu}%"
    echo "   RAM: ${max_ram}MB"
    echo ""
    echo "üìà –°—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
    echo "   CPU: ${avg_cpu}%"
    echo "   RAM: ${avg_ram}MB"
    echo ""
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–µ—Ä–≤–µ—Ä—É
    recommend_server "$max_cpu" "$max_ram" "$avg_cpu" "$avg_ram"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Å–µ—Ä–≤–µ—Ä—É
recommend_server() {
    local max_cpu=$1
    local max_ram=$2
    local avg_cpu=$3
    local avg_ram=$4
    
    print_status "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–µ—Ä–≤–µ—Ä—É:"
    echo "================================="
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ CPU
    if (( $(echo "$max_cpu > 80" | bc -l) )); then
        echo "üî• CPU: –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ - –Ω—É–∂–Ω—ã 4+ —è–¥—Ä–∞"
        cpu_recommendation="High C4-M8-D80 (4 —è–¥—Ä–∞)"
    elif (( $(echo "$max_cpu > 50" | bc -l) )); then
        echo "‚ö° CPU: –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞ - 2-4 —è–¥—Ä–∞"
        cpu_recommendation="High C2-M4-D60 (2 —è–¥—Ä–∞)"
    else
        echo "‚úÖ CPU: –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ - 1-2 —è–¥—Ä–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
        cpu_recommendation="High C1-M2-D20 (1 —è–¥—Ä–æ)"
    fi
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ RAM
    if (( max_ram > 6000 )); then
        echo "üî• RAM: –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ - –Ω—É–∂–Ω–æ 8+ –ì–ë"
        ram_recommendation="High C4-M8-D80 (8 –ì–ë)"
    elif (( max_ram > 3000 )); then
        echo "‚ö° RAM: –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞ - 4-8 –ì–ë"
        ram_recommendation="High C2-M4-D60 (4 –ì–ë)"
    else
        echo "‚úÖ RAM: –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ - 2-4 –ì–ë –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
        ram_recommendation="High C1-M2-D20 (2 –ì–ë)"
    fi
    
    echo ""
    echo "üèÜ –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:"
    echo "   $cpu_recommendation –∏–ª–∏ $ram_recommendation"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
test_load() {
    local test_type=$1
    
    print_status "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –Ω–∞–≥—Ä—É–∑–∫–∏: $test_type"
    
    case $test_type in
        "parsing")
            test_parsing_load
            ;;
        "api")
            test_api_load
            ;;
        "full")
            test_full_load
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞: $test_type"
            exit 1
            ;;
    esac
}

# –¢–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
test_parsing_load() {
    print_status "üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞..."
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    for i in {1..5}; do
        (
            print_status "–ó–∞–ø—Ä–æ—Å $i: –ü–∞—Ä—Å–∏–Ω–≥ Ozon..."
            curl -s "http://localhost:3002/health" > /dev/null &
        ) &
    done
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    wait
    
    print_success "‚úÖ –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –¢–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ API
test_api_load() {
    print_status "üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É API..."
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
    for i in {1..10}; do
        (
            print_status "–ó–∞–ø—Ä–æ—Å $i: API –∑–∞–ø—Ä–æ—Å..."
            curl -s "http://localhost:3003/health" > /dev/null &
            curl -s "http://localhost:3001/health" > /dev/null &
        ) &
    done
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    wait
    
    print_success "‚úÖ –¢–µ—Å—Ç API –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏
test_full_load() {
    print_status "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏..."
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    test_parsing_load &
    test_api_load &
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    wait
    
    print_success "‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
start_all_services() {
    print_status "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ docker-compose —Ñ–∞–π–ª—ã
    local compose_files=(
        "docker-compose.ozon.yml"
        "docker-compose.db.yml"
        "docker-compose.product-filter.yml"
        "docker-compose.wb-api.yml"
        "docker-compose.marketvision.yml"
    )
    
    for file in "${compose_files[@]}"; do
        if [ -f "../$file" ]; then
            print_status "üìÅ –ó–∞–ø—É—Å–∫–∞–µ–º $file..."
            docker-compose -f "../$file" up -d
        fi
    done
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ (–æ—Å–æ–±–µ–Ω–Ω–æ PostgreSQL)
    print_status "‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    print_status "   PostgreSQL –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥..."
    sleep 45
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PostgreSQL –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    print_status "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL..."
    local max_attempts=10
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if docker exec postgres pg_isready -U user -d marketvision > /dev/null 2>&1; then
            print_success "‚úÖ PostgreSQL –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
            break
        else
            print_status "   –ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts: PostgreSQL –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤..."
            sleep 10
            attempt=$((attempt + 1))
        fi
    done
    
    if [ $attempt -gt $max_attempts ]; then
        print_warning "‚ö†Ô∏è PostgreSQL –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ –æ–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è"
    fi
    
    print_success "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
stop_all_services() {
    print_status "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã..."
    
    local compose_files=(
        "docker-compose.ozon.yml"
        "docker-compose.db.yml"
        "docker-compose.product-filter.yml"
        "docker-compose.wb-api.yml"
        "docker-compose.marketvision.yml"
    )
    
    for file in "${compose_files[@]}"; do
        if [ -f "../$file" ]; then
            docker-compose -f "../$file" down
        fi
    done
    
    print_success "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-}" in
    "start")
        start_all_services
        ;;
    "stop")
        stop_all_services
        ;;
    "monitor")
        monitor_resources "${2:-60}" "${3:-5}"
        ;;
    "test")
        test_load "${2:-full}"
        ;;
    "full-test")
        start_all_services
        sleep 10
        test_load "full"
        monitor_resources 120 10
        stop_all_services
        ;;
    *)
        echo "üöÄ –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ MarketVision"
        echo ""
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞] [–æ–ø—Ü–∏–∏]"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  start                    - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
        echo "  stop                     - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
        echo "  monitor [—Å–µ–∫] [–∏–Ω—Ç–µ—Ä–≤–∞–ª] - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤"
        echo "  test [—Ç–∏–ø]               - –¢–µ—Å—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ (parsing/api/full)"
        echo "  full-test                - –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"
        echo ""
        echo "–ü—Ä–∏–º–µ—Ä—ã:"
        echo "  $0 start                 # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
        echo "  $0 monitor 60 5          # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ 60 —Å–µ–∫, –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫"
        echo "  $0 test parsing          # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞"
        echo "  $0 full-test             # –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç"
        ;;
esac 