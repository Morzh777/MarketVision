import { NextResponse } from 'next/server';

const services = {
  'db-api': process.env.DB_API_URL || 'http://localhost:3003',
  'product-filter-service': process.env.PRODUCT_FILTER_SERVICE_URL || 'http://localhost:3001',
  'wb-api': process.env.WB_API_URL || 'http://localhost:3006',
  'ozon-api': process.env.OZON_API_URL || 'http://localhost:3005',
};

interface ServiceStatus {
  name: string;
  url: string;
  status: 'online' | 'offline' | 'error';
  responseTime?: number;
  lastCheck: string;
  error?: string;
}

async function checkServiceHealth(name: string, url: string): Promise<ServiceStatus> {
  const startTime = Date.now();
  const lastCheck = new Date().toISOString();

  try {
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const healthEndpoints = [
      `${url}/health`,
      `${url}/api/health`, 
      `${url}/status`,
      `${url}`
    ];

    let response;
    let error;

    for (const endpoint of healthEndpoints) {
      try {
        response = await fetch(endpoint, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' },
          signal: AbortSignal.timeout(5000) // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        });
        
        if (response.ok) {
          break; // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤—ã—Ö–æ–¥–∏–º
        }
      } catch (e) {
        error = e;
        continue; // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
      }
    }

    const responseTime = Date.now() - startTime;

    if (response && response.ok) {
      return {
        name,
        url,
        status: 'online',
        responseTime,
        lastCheck
      };
    } else {
      const httpStatus = response?.status;
      // –õ—é–±–æ–π –Ω–µ-200 HTTP –∫–æ–¥ = —Å–µ—Ä–≤–∏—Å –æ—Ñ–ª–∞–π–Ω/–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      return {
        name,
        url,
        status: 'offline',
        responseTime,
        lastCheck,
        error: httpStatus ? `HTTP ${httpStatus}` : 'No response'
      };
    }
  } catch (error) {
    const responseTime = Date.now() - startTime;
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    
    // –í—Å–µ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –æ—Ñ–ª–∞–π–Ω
    // (—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤—ã–∫–ª—é—á–µ–Ω, –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç)
    return {
      name,
      url,
      status: 'offline',
      responseTime,
      lastCheck,
      error: 'Service unavailable'
    };
  }
}

export async function GET() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const statusPromises = Object.entries(services).map(([name, url]) =>
      checkServiceHealth(name, url)
    );

    const servicesStatus = await Promise.all(statusPromises);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalServices = servicesStatus.length;
    const onlineServices = servicesStatus.filter(s => s.status === 'online').length;
    const offlineServices = servicesStatus.filter(s => s.status === 'offline').length;
    const errorServices = servicesStatus.filter(s => s.status === 'error').length;

    console.log(`‚úÖ –û–Ω–ª–∞–π–Ω: ${onlineServices}, ‚ùå –û—Ñ–ª–∞–π–Ω: ${offlineServices}, üö® –û—à–∏–±–∫–∏: ${errorServices}`);

    return NextResponse.json({
      summary: {
        total: totalServices,
        online: onlineServices,
        offline: offlineServices,
        error: errorServices,
        healthPercentage: Math.round((onlineServices / totalServices) * 100)
      },
      services: servicesStatus,
      lastUpdate: new Date().toISOString()
    }, {
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
        // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!
        'Cache-Control': 'no-store, no-cache, must-revalidate, max-age=0',
        'Pragma': 'no-cache',
        'Expires': '0',
      },
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
    return NextResponse.json(
      { 
        error: 'Failed to check services status',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
} 