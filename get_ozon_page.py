import json
import time
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

def extract_products(items):
    """–ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ items –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è product-filter-service"""
    products = []
    
    for item in items:
        try:
            product = {}
            
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è product-filter-service
            product["id"] = str(item.get("sku", ""))
            product["name"] = ""
            product["price"] = 0
            product["description"] = ""
            product["image_url"] = ""
            product["product_url"] = ""
            product["images"] = []
            product["characteristics"] = {}
            product["category"] = "videocards"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è Ozon
            product["availability"] = "available"
            
            # –°—Å—ã–ª–∫–∞
            if "action" in item and isinstance(item["action"], dict):
                product["product_url"] = "https://www.ozon.ru" + item["action"].get("link", "")
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ mainState
            if "mainState" in item:
                for state in item["mainState"]:
                    if state.get("type") == "textAtom" and state.get("id") == "name":
                        # –ù–∞–∑–≤–∞–Ω–∏–µ
                        product["name"] = state.get("textAtom", {}).get("text", "")
                        
                    elif state.get("type") == "priceV2":
                        # –¶–µ–Ω—ã
                        price_data = state.get("priceV2", {})
                        prices = price_data.get("price", [])
                        
                        for price_item in prices:
                            if price_item.get("textStyle") == "PRICE":
                                # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
                                price_text = price_item.get("text", "0")
                                product["price"] = int(''.join(filter(str.isdigit, price_text)))
                            elif price_item.get("textStyle") == "ORIGINAL_PRICE":
                                # –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                                old_price_text = price_item.get("text", "0")
                                old_price = int(''.join(filter(str.isdigit, old_price_text)))
                                if old_price > 0:
                                    product["characteristics"]["old_price"] = str(old_price)
                        
                        # –°–∫–∏–¥–∫–∞
                        discount_text = price_data.get("discount", "")
                        if discount_text:
                            product["characteristics"]["discount"] = discount_text
                    
                    elif state.get("type") == "labelList":
                        # –ë—Ä–µ–Ω–¥ –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–∫–∏
                        labels = state.get("labelList", {}).get("items", [])
                        for label in labels:
                            title = label.get("title", "")
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±—Ä–µ–Ω–¥ –∏–∑ –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                            if "<b>" in title and "</b>" in title:
                                brand = title.replace("<b>", "").replace("</b>", "").strip()
                                if brand and not any(word in brand.lower() for word in ["–æ—Ä–∏–≥–∏–Ω–∞–ª", "—Ä–µ–π—Ç–∏–Ω–≥"]):
                                    product["characteristics"]["brand"] = brand
            
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if "tileImage" in item:
                images = []
                for img_item in item.get("tileImage", {}).get("items", []):
                    if img_item.get("type") == "image":
                        img_url = img_item.get("image", {}).get("link", "")
                        if img_url:
                            images.append(img_url)
                product["images"] = images
                if images:
                    product["image_url"] = images[0]  # –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ
            
            # –ù–∞–ª–∏—á–∏–µ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏
            if "multiButton" in item:
                button_data = item.get("multiButton", {}).get("ozonButton", {})
                if button_data.get("type") == "addToCart":
                    cart_data = button_data.get("addToCart", {})
                    action_button = cart_data.get("actionButton", {})
                    if action_button:
                        delivery = action_button.get("common", {}).get("title", "")
                        if delivery:
                            product["characteristics"]["delivery"] = delivery
                        
                        # –ü—Ä–æ–¥–∞–≤–µ—Ü (–ø—Ä–µ–º–∏—É–º –∏–ª–∏ –æ–±—ã—á–Ω—ã–π)
                        seller_icon = action_button.get("common", {}).get("sellerIcon", {})
                        if seller_icon:
                            product["characteristics"]["is_premium_seller"] = "true"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            product["supplier"] = "Ozon"
            product["source"] = "ozon"
            
            products.append(product)
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
            continue
    
    return products

def analyze_ozon_data(data):
    """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö Ozon –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    print("\nüìä –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• OZON:")
    print("=" * 60)
    
    if "widgetStates" in data:
        for widget_id, widget_data in data["widgetStates"].items():
            # –ò—â–µ–º tileGridDesktop –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä—ã
            if "tileGridDesktop" in widget_id and isinstance(widget_data, str):
                try:
                    widget_content = json.loads(widget_data)
                    if "items" in widget_content:
                        items = widget_content["items"]
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ {widget_id}: {len(items)}")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã
                        products = extract_products(items)
                        
                        if products:
                            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
                            
                            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è product-filter-service
                            unified_data = {
                                "query": "rtx 5080",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
                                "products": products,
                                "stats": {
                                    "totalInput": len(items),
                                    "totalFiltered": len(products),
                                    "processingTimeMs": 0
                                }
                            }
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                            with open("ozon_all_products.json", "w", encoding="utf-8") as f:
                                json.dump([unified_data], f, ensure_ascii=False, indent=2)
                            print("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ozon_all_products.json –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
                            print("\nüõçÔ∏è –ü–†–ò–ú–ï–†–´ –¢–û–í–ê–†–û–í:")
                            for i, product in enumerate(products[:5], 1):
                                print(f"\n{i}. {product.get('name', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                                print(f"   –ë—Ä–µ–Ω–¥: {product.get('characteristics', {}).get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                                print(f"   –¶–µ–Ω–∞: {product.get('price', 0):,} ‚ÇΩ")
                                if product.get('characteristics', {}).get('old_price'):
                                    old_price = product.get('characteristics', {}).get('old_price')
                                    print(f"   –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_price} ‚ÇΩ")
                                if product.get('characteristics', {}).get('discount'):
                                    print(f"   –°–∫–∏–¥–∫–∞: {product.get('characteristics', {}).get('discount')}")
                                print(f"   URL: {product.get('product_url', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                                print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(product.get('images', []))}")
                                print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {product.get('source', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                            
                            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–Ω
                            prices = [p["price"] for p in products if p.get("price", 0) > 0]
                            if prices:
                                print(f"\nüí∞ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¶–ï–ù:")
                                print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {min(prices):,} ‚ÇΩ")
                                print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {max(prices):,} ‚ÇΩ")
                                print(f"   –°—Ä–µ–¥–Ω—è—è: {sum(prices)//len(prices):,} ‚ÇΩ")
                                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(prices)}")
                            
                            return [unified_data]
                        else:
                            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–æ–≤–∞—Ä—ã")
                            
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–∂–µ—Ç–∞ {widget_id}: {e}")
                    continue
    else:
        print("‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ widgetStates –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ JSON")
    
    return []

def get_ozon_page1_json():
    """–ü–æ–ª—É—á–∏—Ç—å JSON —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Å—Ä–∞–∑—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"""
    
    print("üöÄ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ü–ï–†–í–û–ô —Å—Ç—Ä–∞–Ω–∏—Ü—ã Ozon...")
    
    # URL –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    api_url = "https://www.ozon.ru/api/entrypoint-api.bx/page/json/v2?url=%2Fcategory%2Fvideokarty-15721%2F%3F__rr%3D2%26abt_att%3D1%26deny_category_prediction%3Dtrue%26from_global%3Dtrue%26page%3D1%26sorting%3Dprice%26text%3Drtx%2B5080"
    
    print(f"üì° URL: {api_url[:100]}...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
    options = uc.ChromeOptions()
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
    
    driver = uc.Chrome(options=options)
    
    try:
        driver.get(api_url)
        print("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ JSON...")
        time.sleep(5)
        
        # –ü–æ–ª—É—á–∞–µ–º JSON
        json_text = None
        
        try:
            pre_element = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "pre"))
            )
            json_text = pre_element.text
            print("‚úÖ JSON –Ω–∞–π–¥–µ–Ω!")
        except TimeoutException:
            json_text = driver.find_element(By.TAG_NAME, "body").text
            print("‚úÖ –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ body")
        
        if json_text:
            try:
                data = json.loads(json_text)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä–æ–π JSON
                with open("ozon_page1_response.json", "w", encoding="utf-8") as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
                print("üíæ JSON —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ozon_page1_response.json")
                
                # –°—Ä–∞–∑—É –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã
                products = analyze_ozon_data(data)
                
                return data, products
                
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                with open("ozon_page1_error.txt", "w", encoding="utf-8") as f:
                    f.write(json_text)
                return None, []
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return None, []
        
    finally:
        try:
            driver.quit()
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")

if __name__ == "__main__":
    print("üéØ –ü–æ–ª—É—á–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ Ozon –≤ –æ–¥–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ\n")
    data, products = get_ozon_page1_json()
    
    if products:
        print(f"\nüéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
    else:
        print("\n‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã") 