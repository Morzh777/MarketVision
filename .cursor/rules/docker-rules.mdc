# üê≥ Docker –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

## üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

### **–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç):**
- **@Docker** - –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ Docker
- **@gRPC** - –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏ gRPC —Å–µ—Ä–≤–∏—Å–æ–≤

### **–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ (—Ä–µ–∑–µ—Ä–≤):**
- **[Docker Documentation](https://docs.docker.com/)** - –û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
- **[Docker Compose](https://docs.docker.com/compose/)** - –ú—É–ª—å—Ç–∏–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
- **[Docker Hub](https://hub.docker.com/)** - –†–µ–µ—Å—Ç—Ä –æ–±—Ä–∞–∑–æ–≤
- **[Dockerfile Reference](https://docs.docker.com/engine/reference/builder/)** - –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ Dockerfile
- **[Docker CLI](https://docs.docker.com/engine/reference/commandline/cli/)** - –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
- **[Docker Networking](https://docs.docker.com/network/)** - –°–µ—Ç–µ–≤–∞—è –º–æ–¥–µ–ª—å
- **[Docker Volumes](https://docs.docker.com/storage/volumes/)** - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
- **[Docker Security](https://docs.docker.com/engine/security/)** - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

## üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
- –û–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã
- –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–∞—è —Å–±–æ—Ä–∫–∞
- –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è —Å–ª–æ–µ–≤
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
```
‚îú‚îÄ‚îÄ Dockerfile              # –û—Å–Ω–æ–≤–Ω–æ–π Dockerfile
‚îú‚îÄ‚îÄ docker-compose.yml      # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
‚îú‚îÄ‚îÄ docker-compose.prod.yml # –ü—Ä–æ–¥–∞–∫—à–Ω
‚îú‚îÄ‚îÄ .dockerignore           # –ò—Å–∫–ª—é—á–µ–Ω–∏—è
‚îú‚îÄ‚îÄ docker/
‚îÇ   ‚îú‚îÄ‚îÄ nginx/             # Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚îÇ   ‚îú‚îÄ‚îÄ postgres/          # PostgreSQL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚îÇ   ‚îî‚îÄ‚îÄ redis/             # Redis –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚îî‚îÄ‚îÄ scripts/
    ‚îú‚îÄ‚îÄ docker-build.sh    # –°–∫—Ä–∏–ø—Ç—ã —Å–±–æ—Ä–∫–∏
    ‚îî‚îÄ‚îÄ docker-deploy.sh   # –°–∫—Ä–∏–ø—Ç—ã –¥–µ–ø–ª–æ—è
```

## üìù Dockerfile

### –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã
```dockerfile
# ‚úÖ –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è Node.js
FROM node:18-alpine AS builder

WORKDIR /app

# –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
COPY package*.json ./
RUN npm ci --only=production

# –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
COPY . .
RUN npm run build

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑
FROM node:18-alpine AS production

WORKDIR /app

# –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
COPY package*.json ./

# –°–æ–∑–¥–∞–µ–º –Ω–µ–ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nestjs -u 1001

USER nestjs

EXPOSE 3000

CMD ["node", "dist/main"]
```

### –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–ª–æ–µ–≤
```dockerfile
# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–µ–≤
FROM node:18-alpine

WORKDIR /app

# 1. –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–º–µ–Ω—è—é—Ç—Å—è —Ä–µ–¥–∫–æ)
COPY package*.json ./
RUN npm ci --only=production

# 2. –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
COPY tsconfig*.json ./
COPY nest-cli.json ./

# 3. –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ (–º–µ–Ω—è–µ—Ç—Å—è —á–∞—Å—Ç–æ)
COPY src/ ./src/

# 4. –°–±–æ—Ä–∫–∞ (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–ª–æ–µ)
RUN npm run build

# 5. –û—á–∏—Å—Ç–∫–∞ (—É–¥–∞–ª—è–µ–º dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
RUN npm prune --production

EXPOSE 3000

CMD ["node", "dist/main"]
```

### –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
```dockerfile
# ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π Dockerfile
FROM node:18-alpine

# –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã
RUN apk update && apk upgrade

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
RUN apk add --no-cache dumb-init

WORKDIR /app

# –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
COPY package*.json ./
RUN npm ci --only=production

COPY . .
RUN npm run build

# –°–æ–∑–¥–∞–µ–º –Ω–µ–ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nestjs -u 1001

# –ú–µ–Ω—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ñ–∞–π–ª–æ–≤
RUN chown -R nestjs:nodejs /app
USER nestjs

# –ò—Å–ø–æ–ª—å–∑—É–µ–º dumb-init –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/main"]
```

## üîß Docker Compose

### –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
```yaml
# ‚úÖ docker-compose.yml –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
version: '3.8'

services:
  # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å
  product-filter-service:
    build:
      context: ./product-filter-service
      dockerfile: Dockerfile
      target: development
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./product-filter-service:/app
      - /app/node_modules
    depends_on:
      - redis
      - postgres
    networks:
      - marketvision-network

  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: marketvision
      POSTGRES_USER: marketvision
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - marketvision-network

  # –ö—ç—à
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - marketvision-network

  # Nginx –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - product-filter-service
    networks:
      - marketvision-network

volumes:
  postgres_data:
  redis_data:

networks:
  marketvision-network:
    driver: bridge
```

### –ü—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
```yaml
# ‚úÖ docker-compose.prod.yml
version: '3.8'

services:
  product-filter-service:
    build:
      context: ./product-filter-service
      dockerfile: Dockerfile
      target: production
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://marketvision:password@postgres:5432/marketvision
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - marketvision-network

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: marketvision
      POSTGRES_USER: marketvision
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - marketvision-network

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - marketvision-network

volumes:
  postgres_data:
  redis_data:

networks:
  marketvision-network:
    driver: bridge
```

## üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

### .dockerignore
```dockerignore
# ‚úÖ –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è Docker
node_modules
npm-debug.log
.git
.gitignore
README.md
.env
.nyc_output
coverage
.nyc_output
.coverage
.pytest_cache
__pycache__
*.pyc
*.pyo
*.pyd
.Python
env
pip-log.txt
pip-delete-this-directory.txt
.tox
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.log
.DS_Store
.vscode
.idea
*.swp
*.swo
*~
```

### –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
```bash
# ‚úÖ .env —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞
POSTGRES_PASSWORD=secure_password_here
REDIS_PASSWORD=secure_redis_password
JWT_SECRET=your_jwt_secret_here
NODE_ENV=production
```

## üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

### Health checks
```yaml
# ‚úÖ Health checks –≤ docker-compose
services:
  product-filter-service:
    build: ./product-filter-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U marketvision"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
```

### –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
```yaml
# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
services:
  product-filter-service:
    build: ./product-filter-service
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
```

## üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è

### –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
```dockerfile
# ‚úÖ Dockerfile —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∞—Ä–≥–µ—Ç–∞–º–∏
FROM node:18-alpine AS base
WORKDIR /app
COPY package*.json ./

# Development
FROM base AS development
RUN npm ci
COPY . .
EXPOSE 3001
CMD ["npm", "run", "start:dev"]

# Production build
FROM base AS builder
RUN npm ci
COPY . .
RUN npm run build

# Production
FROM node:18-alpine AS production
WORKDIR /app
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
COPY package*.json ./
RUN npm prune --production
EXPOSE 3001
CMD ["node", "dist/main"]
```

### –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–±—Ä–∞–∑–∞
```dockerfile
# ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑
FROM node:18-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

# –ò—Å–ø–æ–ª—å–∑—É–µ–º distroless –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
FROM gcr.io/distroless/nodejs18-debian11
WORKDIR /app
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/node_modules ./node_modules
EXPOSE 3001
CMD ["dist/main"]
```

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

### –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
```yaml
# ‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
services:
  test-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: test_marketvision
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    ports:
      - "5433:5432"
    tmpfs:
      - /var/lib/postgresql/data

  test-redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    tmpfs:
      - /data
```

### –°–∫—Ä–∏–ø—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
```bash
#!/bin/bash
# ‚úÖ docker-test.sh
set -e

echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ Docker..."

# –°–±–æ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞
docker build -t marketvision-test -f Dockerfile.test .

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
docker run --rm \
  --network test-network \
  -e DATABASE_URL=postgresql://test_user:test_password@test-db:5432/test_marketvision \
  -e REDIS_URL=redis://test-redis:6379 \
  marketvision-test npm run test

echo "‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
```

## üîß Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

### –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
```nginx
# ‚úÖ docker/nginx/nginx.conf
events {
    worker_connections 1024;
}

http {
    upstream product-filter-service {
        server product-filter-service:3001;
    }

    upstream wb-api {
        server wb-api:3000;
    }

    upstream ozon-api {
        server ozon-api:3002;
    }

    server {
        listen 80;
        server_name localhost;

        # –û—Å–Ω–æ–≤–Ω–æ–π API
        location /api/ {
            proxy_pass http://product-filter-service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WB API
        location /wb-api/ {
            proxy_pass http://wb-api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Ozon API
        location /ozon-api/ {
            proxy_pass http://ozon-api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Health check
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
```

## üö® –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏

### –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –ò—Å–ø–æ–ª—å–∑—É–π –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—É—é —Å–±–æ—Ä–∫—É
- –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤
- –ö—ç—à–∏—Ä—É–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
- –ò—Å–ø–æ–ª—å–∑—É–π .dockerignore
- –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π —Ä–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–∞

### –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- –ù–µ –∑–∞–ø—É—Å–∫–∞–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Ç root
- –ò—Å–ø–æ–ª—å–∑—É–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã
- –°–∫–∞–Ω–∏—Ä—É–π –æ–±—Ä–∞–∑—ã –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
- –ù–µ —Ö—Ä–∞–Ω–∏ —Å–µ–∫—Ä–µ—Ç—ã –≤ –æ–±—Ä–∞–∑–∞—Ö
- –û–±–Ω–æ–≤–ª—è–π –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã

### –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å
- –î–æ–±–∞–≤–ª—è–π health checks
- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π restart policies
- –ú–æ–Ω–∏—Ç–æ—Ä—å —Ä–µ—Å—É—Ä—Å—ã
- –õ–æ–≥–∏—Ä—É–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ
- –¢–µ—Å—Ç–∏—Ä—É–π –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö

## üö® –ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å

- ‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π `latest` —Ç–µ–≥–∏
- ‚ùå –ù–µ –∑–∞–ø—É—Å–∫–∞–π –æ—Ç root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- ‚ùå –ù–µ –∫–æ–ø–∏—Ä—É–π –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –æ–±—Ä–∞–∑
- ‚ùå –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ .dockerignore
- ‚ùå –ù–µ —Ö—Ä–∞–Ω–∏ —Å–µ–∫—Ä–µ—Ç—ã –≤ –æ–±—Ä–∞–∑–∞—Ö
- ‚ùå –ù–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π health checks
- ‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –±–æ–ª—å—à–∏–µ –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã
description:
globs:
alwaysApply: false
---
