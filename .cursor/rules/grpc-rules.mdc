# üîó gRPC –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

## üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

### **–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç):**
- **@gRPC** - –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ gRPC
- **@NestJS** - –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ gRPC –≤ NestJS
- **@Python** - –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ gRPC –≤ Python

### **–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ (—Ä–µ–∑–µ—Ä–≤):**
- **[gRPC Documentation](https://grpc.io/docs/)** - –û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
- **[Protocol Buffers](https://developers.google.com/protocol-buffers)** - –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
- **[gRPC GitHub](https://github.com/grpc/grpc)** - –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
- **[gRPC Node.js](https://grpc.io/docs/languages/node/)** - Node.js –∫–ª–∏–µ–Ω—Ç/—Å–µ—Ä–≤–µ—Ä
- **[gRPC Python](https://grpc.io/docs/languages/python/)** - Python –∫–ª–∏–µ–Ω—Ç/—Å–µ—Ä–≤–µ—Ä
- **[gRPC Web](https://grpc.io/docs/platforms/web/)** - –í–µ–±-–∫–ª–∏–µ–Ω—Ç—ã
- **[gRPC Tools](https://grpc.io/docs/tools/)** - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- **[gRPC Best Practices](https://grpc.io/docs/guides/best-practices/)** - –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏

## üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
- gRPC –¥–ª—è –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
- HTTP REST –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö API
- Protocol Buffers –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
- –°—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
- –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ API

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
```
proto/
‚îú‚îÄ‚îÄ raw-product.proto        # –û—Å–Ω–æ–≤–Ω–æ–π proto —Ñ–∞–π–ª
‚îú‚îÄ‚îÄ common/
‚îÇ   ‚îú‚îÄ‚îÄ types.proto         # –û–±—â–∏–µ —Ç–∏–ø—ã
‚îÇ   ‚îî‚îÄ‚îÄ errors.proto        # –û—à–∏–±–∫–∏
‚îî‚îÄ‚îÄ services/
    ‚îú‚îÄ‚îÄ product.proto       # –°–µ—Ä–≤–∏—Å –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    ‚îî‚îÄ‚îÄ price.proto         # –°–µ—Ä–≤–∏—Å —Ü–µ–Ω
```

## üìù Protocol Buffers

### –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
```protobuf
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ proto —Ñ–∞–π–ª–∞
syntax = "proto3";

package marketvision;

option go_package = "marketvision/proto";
option java_package = "com.marketvision.proto";

// –ò–º–ø–æ—Ä—Ç—ã
import "google/protobuf/timestamp.proto";
import "common/errors.proto";

// –°–æ–æ–±—â–µ–Ω–∏—è
message RawProduct {
  string id = 1;
  string name = 2;
  double price = 3;
  string category = 4;
  string source = 5;
  string image_url = 6;
  string product_url = 7;
  google.protobuf.Timestamp created_at = 8;
}

// –°–µ—Ä–≤–∏—Å—ã
service ProductService {
  rpc GetRawProducts(GetRawProductsRequest) returns (GetRawProductsResponse);
  rpc GetProductById(GetProductByIdRequest) returns (GetProductByIdResponse);
}
```

### –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
```protobuf
// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã
message Product {
  string id = 1;                    // UUID
  string name = 2;                  // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
  double price = 3;                 // –¶–µ–Ω–∞ (double –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏)
  int32 stock = 4;                  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
  bool is_available = 5;            // –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
  repeated string tags = 6;         // –¢–µ–≥–∏
  map<string, string> metadata = 7; // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  google.protobuf.Timestamp created_at = 8; // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
}

// ‚ùå –ò–∑–±–µ–≥–∞–π
message BadProduct {
  int32 id = 1;        // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π int32 –¥–ª—è UUID
  float price = 2;     // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π float –¥–ª—è —Ü–µ–Ω
  string created_at = 3; // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π string –¥–ª—è –¥–∞—Ç
}
```

### –ù—É–º–µ—Ä–∞—Ü–∏—è –ø–æ–ª–µ–π
```protobuf
// ‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è
message Product {
  string id = 1;
  string name = 2;
  double price = 3;
  string category = 4;
  // –ù–ï –ø—Ä–æ–ø—É—Å–∫–∞–π –Ω–æ–º–µ—Ä–∞
  google.protobuf.Timestamp created_at = 5;
}

// ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
message BadProduct {
  string id = 1;
  string name = 3;  // –ü—Ä–æ–ø—É—â–µ–Ω –Ω–æ–º–µ—Ä 2
  double price = 5; // –ü—Ä–æ–ø—É—â–µ–Ω –Ω–æ–º–µ—Ä 4
}
```

## üèóÔ∏è –°–µ—Ä–≤–∏—Å—ã

### –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
```protobuf
// ‚úÖ –ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
service ProductService {
  // CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
  rpc CreateProduct(CreateProductRequest) returns (CreateProductResponse);
  rpc GetProduct(GetProductRequest) returns (GetProductResponse);
  rpc UpdateProduct(UpdateProductRequest) returns (UpdateProductResponse);
  rpc DeleteProduct(DeleteProductRequest) returns (DeleteProductResponse);
  
  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  rpc GetProductsByCategory(GetProductsByCategoryRequest) returns (GetProductsByCategoryResponse);
  rpc SearchProducts(SearchProductsRequest) returns (SearchProductsResponse);
}

service PriceService {
  rpc GetPriceHistory(GetPriceHistoryRequest) returns (GetPriceHistoryResponse);
  rpc GetPriceStatistics(GetPriceStatisticsRequest) returns (GetPriceStatisticsResponse);
}
```

### Request/Response –ø–∞—Ç—Ç–µ—Ä–Ω
```protobuf
// ‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ request/response
message GetProductsRequest {
  int32 page = 1;
  int32 limit = 2;
  string category = 3;
  string sort_by = 4;
  bool ascending = 5;
}

message GetProductsResponse {
  repeated Product products = 1;
  int32 total_count = 2;
  int32 current_page = 3;
  int32 total_pages = 4;
  string next_page_token = 5;
}
```

## üîí –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

### Error —Å–æ–æ–±—â–µ–Ω–∏—è
```protobuf
// ‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—à–∏–±–æ–∫
message Error {
  string code = 1;
  string message = 2;
  string details = 3;
  map<string, string> metadata = 4;
}

// ‚úÖ Response —Å –æ—à–∏–±–∫–æ–π
message GetProductResponse {
  oneof result {
    Product product = 1;
    Error error = 2;
  }
}

// ‚úÖ –ò–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
message GetProductResponse {
  Product product = 1;
  Error error = 2;
  bool success = 3;
}
```

### –ö–æ–¥—ã –æ—à–∏–±–æ–∫
```protobuf
// ‚úÖ Enum –¥–ª—è –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫
enum ErrorCode {
  UNKNOWN = 0;
  NOT_FOUND = 1;
  INVALID_ARGUMENT = 2;
  PERMISSION_DENIED = 3;
  INTERNAL_ERROR = 4;
  UNAVAILABLE = 5;
  DEADLINE_EXCEEDED = 6;
}
```

## üöÄ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è

### NestJS gRPC —Å–µ—Ä–≤–µ—Ä
```typescript
// ‚úÖ –°–µ—Ä–≤–∏—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
@Injectable()
export class ProductGrpcService implements ProductService {
  constructor(
    private readonly productService: ProductService,
    private readonly logger: Logger
  ) {}

  async getRawProducts(request: GetRawProductsRequest): Promise<GetRawProductsResponse> {
    try {
      const products = await this.productService.getProducts({
        category: request.category,
        limit: request.limit || 100
      })

      return {
        products: products.map(this.mapToRawProduct),
        totalCount: products.length
      }
    } catch (error) {
      this.logger.error('Failed to get raw products', error)
      throw new RpcException({
        code: Status.INTERNAL,
        message: 'Failed to get products'
      })
    }
  }

  private mapToRawProduct(product: Product): RawProduct {
    return {
      id: product.id,
      name: product.name,
      price: product.price,
      category: product.category,
      source: product.source,
      imageUrl: product.imageUrl,
      productUrl: product.productUrl,
      createdAt: Timestamp.fromDate(product.createdAt)
    }
  }
}
```

### gRPC –∫–ª–∏–µ–Ω—Ç
```typescript
// ‚úÖ –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
@Injectable()
export class ProductGrpcClient {
  private client: ProductServiceClient

  constructor() {
    this.client = new ProductServiceClient('localhost:3000')
  }

  async getProducts(category: string): Promise<RawProduct[]> {
    try {
      const response = await this.client.getRawProducts({
        category,
        limit: 100
      })

      return response.products
    } catch (error) {
      this.logger.error('gRPC call failed', error)
      throw new Error('Failed to fetch products from gRPC service')
    }
  }

  async getProductById(id: string): Promise<RawProduct | null> {
    try {
      const response = await this.client.getProductById({ id })
      return response.product || null
    } catch (error) {
      if (error.code === Status.NOT_FOUND) {
        return null
      }
      throw error
    }
  }
}
```

## üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

### –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ gRPC –≤—ã–∑–æ–≤–æ–≤
```typescript
// ‚úÖ Interceptor –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
@Injectable()
export class GrpcLoggingInterceptor implements RpcInterceptor<any, any> {
  constructor(private readonly logger: Logger) {}

  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    const rpcContext = context.switchToRpc()
    const data = rpcContext.getData()
    const client = rpcContext.getContext()

    this.logger.log(`gRPC ${context.getHandler().name} called`, {
      method: context.getHandler().name,
      data,
      client: client.getPeer()
    })

    const startTime = Date.now()
    return next.handle().pipe(
      tap({
        next: (result) => {
          this.logger.log(`gRPC ${context.getHandler().name} completed`, {
            duration: Date.now() - startTime,
            resultSize: JSON.stringify(result).length
          })
        },
        error: (error) => {
          this.logger.error(`gRPC ${context.getHandler().name} failed`, {
            duration: Date.now() - startTime,
            error: error.message
          })
        }
      })
    )
  }
}
```

### –ú–µ—Ç—Ä–∏–∫–∏
```typescript
// ‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ gRPC –≤—ã–∑–æ–≤–æ–≤
@Injectable()
export class GrpcMetricsService {
  private requestCounter = new Counter({
    name: 'grpc_requests_total',
    help: 'Total number of gRPC requests',
    labelNames: ['service', 'method', 'status']
  })

  private requestDuration = new Histogram({
    name: 'grpc_request_duration_seconds',
    help: 'gRPC request duration in seconds',
    labelNames: ['service', 'method']
  })

  recordRequest(service: string, method: string, status: string, duration: number): void {
    this.requestCounter.inc({ service, method, status })
    this.requestDuration.observe({ service, method }, duration)
  }
}
```

## üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

### NestJS –º–æ–¥—É–ª—å
```typescript
// ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è gRPC –º–æ–¥—É–ª—è
@Module({
  imports: [
    ClientsModule.register([
      {
        name: 'PRODUCT_SERVICE',
        transport: Transport.GRPC,
        options: {
          package: 'marketvision',
          protoPath: join(__dirname, 'proto/raw-product.proto'),
          url: 'localhost:3000'
        }
      }
    ])
  ],
  providers: [
    ProductGrpcService,
    ProductGrpcClient,
    GrpcLoggingInterceptor,
    GrpcMetricsService
  ],
  exports: [ProductGrpcClient]
})
export class GrpcModule {}
```

### Environment –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
```env
# gRPC –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
GRPC_SERVER_PORT=3000
GRPC_CLIENT_TIMEOUT=30000
GRPC_MAX_RECEIVE_MESSAGE_LENGTH=4194304
GRPC_MAX_SEND_MESSAGE_LENGTH=4194304
```

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

### Unit —Ç–µ—Å—Ç—ã
```typescript
// ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ gRPC —Å–µ—Ä–≤–∏—Å–∞
describe('ProductGrpcService', () => {
  let service: ProductGrpcService
  let mockProductService: jest.Mocked<ProductService>

  beforeEach(() => {
    mockProductService = {
      getProducts: jest.fn()
    } as any

    service = new ProductGrpcService(mockProductService, new Logger())
  })

  describe('getRawProducts', () => {
    it('should return raw products', async () => {
      // Arrange
      const inputProducts = [
        { id: '1', name: 'RTX 5070', price: 50000, category: 'videocards' }
      ]
      const expectedResponse = {
        products: inputProducts.map(p => ({
          ...p,
          source: 'wb',
          imageUrl: '',
          productUrl: '',
          createdAt: expect.any(Timestamp)
        })),
        totalCount: 1
      }
      mockProductService.getProducts.mockResolvedValue(inputProducts)

      // Act
      const result = await service.getRawProducts({ category: 'videocards' })

      // Assert
      expect(result).toEqual(expectedResponse)
    })
  })
})
```

### E2E —Ç–µ—Å—Ç—ã
```typescript
// ‚úÖ E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ gRPC
describe('gRPC Product Service (e2e)', () => {
  let app: INestApplication
  let client: ProductServiceClient

  beforeEach(async () => {
    const moduleFixture = await Test.createTestingModule({
      imports: [AppModule]
    }).compile()

    app = moduleFixture.createNestApplication()
    await app.init()

    client = new ProductServiceClient('localhost:3000')
  })

  it('/grpc/products should return products', async () => {
    const response = await client.getRawProducts({ category: 'videocards' })
    expect(response.products).toBeDefined()
    expect(Array.isArray(response.products)).toBe(true)
  })
})
```

## üö® –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏

### –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –ò—Å–ø–æ–ª—å–∑—É–π streaming –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
- –ü—Ä–∏–º–µ–Ω—è–π connection pooling
- –ù–∞—Å—Ç—Ä–æ–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã
- –ú–æ–Ω–∏—Ç–æ—Ä—å —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π

### –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- –ò—Å–ø–æ–ª—å–∑—É–π TLS –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
- –í–∞–ª–∏–¥–∏—Ä—É–π –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
- –õ–æ–≥–∏—Ä—É–π –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

### –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å
- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –≤—Å–µ –æ—à–∏–±–∫–∏
- –ò—Å–ø–æ–ª—å–∑—É–π retry –º–µ—Ö–∞–Ω–∏–∑–º—ã
- –ú–æ–Ω–∏—Ç–æ—Ä—å health checks
- –ù–∞—Å—Ç—Ä–æ–π circuit breakers

## üö® –ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å

- ‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π `any` –≤ proto —Ñ–∞–π–ª–∞—Ö
- ‚ùå –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ API
- ‚ùå –ù–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
- ‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
- ‚ùå –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Ç–∞–π–º–∞—É—Ç—ã
- ‚ùå –ù–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
- ‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π string –¥–ª—è –¥–∞—Ç –∏ —á–∏—Å–µ–ª
description:
globs:
alwaysApply: false
---
