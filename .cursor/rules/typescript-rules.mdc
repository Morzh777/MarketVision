# üìò TypeScript –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

## üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

### **–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç):**
- **@TypeScript** - –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ TypeScript
- **@NestJS** - –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ NestJS –∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏

### **–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ (—Ä–µ–∑–µ—Ä–≤):**
- **[TypeScript Handbook](https://www.typescriptlang.org/docs/)** - –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
- **[TypeScript Playground](https://www.typescriptlang.org/play)** - –û–Ω–ª–∞–π–Ω —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
- **[TypeScript GitHub](https://github.com/microsoft/TypeScript)** - –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
- **[TypeScript Config](https://www.typescriptlang.org/tsconfig)** - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è tsconfig.json
- **[TypeScript Compiler API](https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API)** - API –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞
- **[TypeScript ESLint](https://typescript-eslint.io/)** - ESLint –¥–ª—è TypeScript
- **[TypeScript Performance](https://github.com/microsoft/TypeScript/wiki/Performance)** - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

## üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã

### –°—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è
- –í—Å–µ–≥–¥–∞ –æ–±—ä—è–≤–ª—è–π —Ç–∏–ø—ã –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–π
- –ò–∑–±–µ–≥–∞–π `any` - —Å–æ–∑–¥–∞–≤–∞–π –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∏–ø—ã
- –ò—Å–ø–æ–ª—å–∑—É–π `unknown` –≤–º–µ—Å—Ç–æ `any` –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
- –ü—Ä–∏–º–µ–Ω—è–π `strict` —Ä–µ–∂–∏–º –≤ `tsconfig.json`

### –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞
```typescript
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ
interface ProductData {}
type ProductStatus = 'active' | 'inactive'
class ProductService {}
const productName: string = 'RTX 5070'
const isProductAvailable: boolean = true
const handleProductCreate = (): void => {}

// ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
interface productData {}
type product_status = string
class productService {}
const ProductName = 'RTX 5070'
const product_available = true
const productCreate = () => {}
```

## üèóÔ∏è –¢–∏–ø—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã

### –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
```typescript
// ‚úÖ –û–ø–∏—Å—ã–≤–∞–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface Product {
  id: string
  name: string
  price: number
  category: ProductCategory
  createdAt: Date
  updatedAt?: Date
}

// ‚úÖ –†–∞–∑–¥–µ–ª—è–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
interface ProductCreateRequest {
  name: string
  price: number
  category: ProductCategory
}

interface ProductResponse {
  id: string
  name: string
  price: number
  category: ProductCategory
  createdAt: Date
}
```

### –¢–∏–ø—ã
```typescript
// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∏–ø—ã –¥–ª—è union –∏ intersection
type ProductCategory = 'videocards' | 'processors' | 'motherboards'
type ProductStatus = 'active' | 'inactive' | 'deleted'

// ‚úÖ –¢–∏–ø—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
type ProductValidator = (product: Product) => boolean
type ProductMapper = (product: Product) => ProductResponse

// ‚úÖ Utility —Ç–∏–ø—ã
type ProductUpdateRequest = Partial<ProductCreateRequest>
type ProductId = Pick<Product, 'id'>
type ProductWithoutId = Omit<Product, 'id'>
```

### Enum vs Union Types
```typescript
// ‚úÖ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–π union types
type ProductCategory = 'videocards' | 'processors' | 'motherboards'

// ‚ùå –ò–∑–±–µ–≥–∞–π enum –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
enum ProductCategory {
  Videocards = 'videocards',
  Processors = 'processors',
  Motherboards = 'motherboards'
}

// ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π enum —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
enum HttpStatus {
  OK = 200,
  NotFound = 404,
  InternalError = 500
}
```

## üîß –§—É–Ω–∫—Ü–∏–∏

### –°–∏–≥–Ω–∞—Ç—É—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π
```typescript
// ‚úÖ –Ø–≤–Ω—ã–µ —Ç–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
const validateProduct = (product: Product): boolean => {
  return product.name.length > 0 && product.price > 0
}

// ‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π RO-RO
interface CreateProductParams {
  name: string
  price: number
  category: ProductCategory
}

interface CreateProductResult {
  success: boolean
  product?: Product
  error?: string
}

const createProduct = (params: CreateProductParams): CreateProductResult => {
  // implementation
}
```

### Arrow —Ñ—É–Ω–∫—Ü–∏–∏
```typescript
// ‚úÖ Arrow —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (< 3 –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π)
const getProductName = (product: Product): string => product.name
const isExpensive = (product: Product): boolean => product.price > 100000

// ‚úÖ Named —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
function processProductData(products: Product[]): ProcessedData {
  // –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  return processedData
}
```

### Overloads
```typescript
// ‚úÖ Function overloads –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–≥–Ω–∞—Ç—É—Ä
function getProduct(id: string): Product | null
function getProduct(category: ProductCategory): Product[]
function getProduct(param: string | ProductCategory): Product | Product[] | null {
  if (typeof param === 'string') {
    return findProductById(param)
  }
  return findProductsByCategory(param)
}
```

## üèõÔ∏è –ö–ª–∞—Å—Å—ã

### SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã
```typescript
// ‚úÖ Single Responsibility
class ProductValidator {
  validate(product: Product): ValidationResult {
    // –¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è
  }
}

class ProductRepository {
  save(product: Product): Promise<Product> {
    // –¢–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  }
}

// ‚úÖ Dependency Inversion
interface ProductRepository {
  save(product: Product): Promise<Product>
  findById(id: string): Promise<Product | null>
}

class ProductService {
  constructor(private repository: ProductRepository) {}
  
  async createProduct(product: Product): Promise<Product> {
    return this.repository.save(product)
  }
}
```

### –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã
```typescript
// ‚úÖ –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –æ–±—â–µ–π –ª–æ–≥–∏–∫–∏
abstract class BaseValidator<T> {
  abstract validate(data: T): ValidationResult
  
  protected logValidationError(error: string): void {
    console.error(`Validation error: ${error}`)
  }
}

class ProductValidator extends BaseValidator<Product> {
  validate(product: Product): ValidationResult {
    if (!product.name) {
      this.logValidationError('Product name is required')
      return { isValid: false, errors: ['Product name is required'] }
    }
    return { isValid: true, errors: [] }
  }
}
```

## üìä Generics

### Generic —Ç–∏–ø—ã
```typescript
// ‚úÖ Generic –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface Repository<T> {
  findById(id: string): Promise<T | null>
  save(entity: T): Promise<T>
  delete(id: string): Promise<void>
}

// ‚úÖ Generic –∫–ª–∞—Å—Å—ã
class Cache<T> {
  private data: Map<string, T> = new Map()
  
  set(key: string, value: T): void {
    this.data.set(key, value)
  }
  
  get(key: string): T | undefined {
    return this.data.get(key)
  }
}

// ‚úÖ Generic —Ñ—É–Ω–∫—Ü–∏–∏
const createArray = <T>(length: number, value: T): T[] => {
  return Array(length).fill(value)
}
```

### Constraints
```typescript
// ‚úÖ Generic constraints
interface Identifiable {
  id: string
}

class EntityRepository<T extends Identifiable> {
  findById(id: string): Promise<T | null> {
    // implementation
  }
}

// ‚úÖ Multiple constraints
interface Product extends Identifiable, Timestamped {
  name: string
  price: number
}

interface Timestamped {
  createdAt: Date
  updatedAt?: Date
}
```

## üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤

### Type Guards
```typescript
// ‚úÖ Type guards –¥–ª—è runtime –ø—Ä–æ–≤–µ—Ä–æ–∫
const isProduct = (obj: unknown): obj is Product => {
  return typeof obj === 'object' && 
         obj !== null && 
         'id' in obj && 
         'name' in obj && 
         'price' in obj
}

// ‚úÖ Discriminated unions
type ProductEvent = 
  | { type: 'created'; product: Product }
  | { type: 'updated'; product: Product; changes: Partial<Product> }
  | { type: 'deleted'; productId: string }

const handleProductEvent = (event: ProductEvent): void => {
  switch (event.type) {
    case 'created':
      console.log('Product created:', event.product.name)
      break
    case 'updated':
      console.log('Product updated:', event.changes)
      break
    case 'deleted':
      console.log('Product deleted:', event.productId)
      break
  }
}
```

### Assertion Functions
```typescript
// ‚úÖ Assertion functions
function assertIsProduct(obj: unknown): asserts obj is Product {
  if (!isProduct(obj)) {
    throw new Error('Object is not a Product')
  }
}

const processData = (data: unknown): void => {
  assertIsProduct(data)
  // TypeScript –∑–Ω–∞–µ—Ç —á—Ç–æ data —ç—Ç–æ Product
  console.log(data.name)
}
```

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤

### Type Testing
```typescript
// ‚úÖ Type assertions –≤ —Ç–µ—Å—Ç–∞—Ö
type TestProduct = {
  id: string
  name: string
  price: number
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Product —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç TestProduct
type ProductTest = Product extends TestProduct ? true : false
const _test: ProductTest = true

// ‚úÖ Utility —Ç–∏–ø—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
type RequiredFields = Required<Pick<Product, 'id' | 'name'>>
type OptionalFields = Partial<Pick<Product, 'updatedAt'>>
```

## üìù JSDoc

### –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
```typescript
/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞–º
 * @param product - –ü—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –æ—à–∏–±–∫–∞–º–∏
 * @throws {ValidationError} –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é
 */
const validateProduct = (product: Product): ValidationResult => {
  // implementation
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
 */
class ProductService {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
   * @param createRequest - –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
   * @returns –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
   */
  async createProduct(createRequest: ProductCreateRequest): Promise<Product> {
    // implementation
  }
}
```

## üö® –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏

### –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –ò—Å–ø–æ–ª—å–∑—É–π `readonly` –¥–ª—è –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –ü—Ä–∏–º–µ–Ω—è–π `const assertions` –¥–ª—è –ª–∏—Ç–µ—Ä–∞–ª–æ–≤
- –ò–∑–±–µ–≥–∞–π –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö —Ç–∏–ø–æ–≤

```typescript
// ‚úÖ Readonly –¥–ª—è –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
interface ProductConfig {
  readonly maxPrice: number
  readonly categories: readonly ProductCategory[]
}

// ‚úÖ Const assertions
const PRODUCT_CATEGORIES = ['videocards', 'processors'] as const
type ProductCategory = typeof PRODUCT_CATEGORIES[number]
```

### –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å
- –ò—Å–ø–æ–ª—å–∑—É–π –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ç–∏–ø–æ–≤
- –ì—Ä—É–ø–ø–∏—Ä—É–π —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
- –î–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–ª–æ–∂–Ω—ã–º —Ç–∏–ø–∞–º

```typescript
// ‚úÖ –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞
type ProductPrice = number
type ProductName = string
type ProductId = string

// ‚úÖ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
interface Product {
  // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
  id: ProductId
  name: ProductName
  
  // –¶–µ–Ω–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  price: ProductPrice
  currency: 'RUB' | 'USD'
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  createdAt: Date
  updatedAt?: Date
}
```

## üö® –ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å

- ‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π `any` —Ç–∏–ø
- ‚ùå –ù–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π –æ—à–∏–±–∫–∏ TypeScript
- ‚ùå –ù–µ –¥–µ–ª–∞–π —Ç–∏–ø—ã —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–º–∏
- ‚ùå –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ generic constraints
- ‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π `Object` –∏ `Function` —Ç–∏–ø—ã
- ‚ùå –ù–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π strict —Ä–µ–∂–∏–º
- ‚ùå –ù–µ —Å–æ–∑–¥–∞–≤–∞–π —Ç–∏–ø—ã –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

description:
globs:
alwaysApply: false
---
