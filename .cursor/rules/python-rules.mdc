# üêç Python –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

## üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã

### –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
- Clean Architecture —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ —Å–ª–æ–∏
- Domain-Driven Design –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
- Dependency Injection –¥–ª—è —Å–ª–∞–±–æ–π —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
- Async/await –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- –°—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è —Å mypy

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
```
src/
‚îú‚îÄ‚îÄ main.py                    # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
‚îú‚îÄ‚îÄ domain/                    # –î–æ–º–µ–Ω–Ω—ã–π —Å–ª–æ–π
‚îÇ   ‚îú‚îÄ‚îÄ entities/             # –°—É—â–Ω–æ—Å—Ç–∏
‚îÇ   ‚îî‚îÄ‚îÄ services/             # –î–æ–º–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
‚îú‚îÄ‚îÄ infrastructure/           # –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —Å–ª–æ–π
‚îÇ   ‚îú‚îÄ‚îÄ grpc/                # gRPC —Å–µ—Ä–≤–∏—Å—ã
‚îÇ   ‚îú‚îÄ‚îÄ parsers/             # –ü–∞—Ä—Å–µ—Ä—ã
‚îÇ   ‚îî‚îÄ‚îÄ services/            # –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
‚îú‚îÄ‚îÄ tests/                   # –¢–µ—Å—Ç—ã
‚îî‚îÄ‚îÄ proto/                   # Protocol Buffers
```

## üìù –ö–æ–¥ –∏ —Å—Ç–∏–ª—å

### –¢–∏–ø–∏–∑–∞—Ü–∏—è
```python
# ‚úÖ –°—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –≤–µ–∑–¥–µ
from typing import List, Dict, Optional, Any, NoReturn
from dataclasses import dataclass
from datetime import datetime

@dataclass
class Product:
    """–î–æ–º–µ–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞"""
    id: str
    name: str
    price: float
    description: Optional[str] = None
    image_url: Optional[str] = None
    created_at: Optional[datetime] = None
    
    def __post_init__(self) -> None:
        if self.created_at is None:
            self.created_at = datetime.now()
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "id": self.id,
            "name": self.name,
            "price": self.price,
            "description": self.description,
            "image_url": self.image_url,
            "created_at": self.created_at.isoformat() if self.created_at else None
        }
```

### –§—É–Ω–∫—Ü–∏–∏ –∏ –º–µ—Ç–æ–¥—ã
```python
# ‚úÖ Async —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è I/O –æ–ø–µ—Ä–∞—Ü–∏–π
async def get_products(self, query: str, category: str) -> List[Product]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    start_time = time.time()
    print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
    
    try:
        products = await self._parse_products(query, category)
        processing_time = int((time.time() - start_time) * 1000)
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time}ms")
        return products
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        raise

# ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
def _parse_single_product(self, item: Dict[str, Any], query: str) -> Optional[Product]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        return Product(
            id=item.get("id", ""),
            name=item.get("name", ""),
            price=float(item.get("price", 0)),
            description=item.get("description"),
            image_url=item.get("image_url")
        )
    except (ValueError, KeyError) as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        return None
```

### –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
```python
# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
async def parse_products(self, query: str, category: str) -> List[Product]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å retry –ª–æ–≥–∏–∫–æ–π"""
    max_retries = 3
    
    for attempt in range(max_retries):
        try:
            print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_retries}")
            
            await self._init_driver()
            products = await self._get_products_from_api(query, category)
            
            if products:
                return products
                
        except TimeoutException:
            print(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
            if attempt < max_retries - 1:
                await asyncio.sleep(2 ** attempt)  # Exponential backoff
                continue
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
            if attempt < max_retries - 1:
                continue
            raise
    
    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
```

## üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

### –î–æ–º–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
```python
# ‚úÖ –ß–∏—Å—Ç—ã–µ –¥–æ–º–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
from dataclasses import dataclass, field
from typing import List, Dict, Any, Optional
from datetime import datetime

@dataclass
class Product:
    """–î–æ–º–µ–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞"""
    id: str
    name: str
    price: float
    category: str
    source: str = "ozon"
    availability: bool = True
    images: List[str] = field(default_factory=list)
    characteristics: Dict[str, Any] = field(default_factory=dict)
    created_at: datetime = field(default_factory=datetime.now)
    
    def is_expensive(self, threshold: float = 100000) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Ä–æ–≥–æ–≤–∏–∑–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
        return self.price > threshold
    
    def has_images(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        return len(self.images) > 0
```

### –°–µ—Ä–≤–∏—Å—ã
```python
# ‚úÖ –î–æ–º–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
from abc import ABC, abstractmethod
from typing import List, Optional

class ParserService(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    
    @abstractmethod
    async def parse_products(self, query: str, category: str) -> List[Product]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        pass
    
    @abstractmethod
    async def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        pass

class OzonParserService(ParserService):
    """–°–µ—Ä–≤–∏—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ Ozon"""
    
    def __init__(self) -> None:
        self.parser = OzonParser()
    
    async def parse_products(self, query: str, category: str, 
                           platform_id: Optional[str] = None,
                           exactmodels: Optional[str] = None) -> List[Product]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å Ozon"""
        return await self.parser.get_products(query, category, platform_id, exactmodels)
    
    async def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            await self.parser._init_driver()
            return True
        except Exception:
            return False
```

## üîó gRPC –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

### gRPC —Å–µ—Ä–≤–∏—Å—ã
```python
# ‚úÖ –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ gRPC —Å–µ—Ä–≤–∏—Å—ã
import grpc
import asyncio
from concurrent.futures import ThreadPoolExecutor
from typing import Any, Optional

import raw_product_pb2
import raw_product_pb2_grpc

class OzonRawProductService(raw_product_pb2_grpc.RawProductServiceServicer):
    """gRPC —Å–µ—Ä–≤–∏—Å –¥–ª—è Ozon API"""
    
    def __init__(self) -> None:
        self.parser_service = OzonParserService()

    async def GetRawProducts(
        self, 
        request: raw_product_pb2.GetRawProductsRequest, 
        context: grpc.ServicerContext
    ) -> raw_product_pb2.GetRawProductsResponse:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤"""
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not request.query or not request.query.strip():
            context.set_code(grpc.StatusCode.INVALID_ARGUMENT)
            context.set_details("Query cannot be empty")
            return raw_product_pb2.GetRawProductsResponse(
                products=[], total_count=0, source="ozon"
            )
        
        try:
            products = await self.parser_service.parse_products(
                request.query, 
                request.category,
                getattr(request, 'platform_id', None),
                getattr(request, 'exactmodels', None)
            )
            
            grpc_products = []
            for product in products:
                try:
                    grpc_product = raw_product_pb2.RawProduct(
                        id=product.id,
                        name=product.name,
                        price=int(product.price),
                        image_url=product.image_url or "",
                        product_url=product.product_url or "",
                        category=request.category,
                        source="ozon",
                        query=request.query
                    )
                    grpc_products.append(grpc_product)
                except (ValueError, TypeError) as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ {product.id}: {e}")
                    continue
            
            return raw_product_pb2.GetRawProductsResponse(
                products=grpc_products,
                total_count=len(grpc_products),
                source="ozon"
            )
            
        except Exception as e:
            print(f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {e}")
            context.set_code(grpc.StatusCode.INTERNAL)
            context.set_details(f"Internal parser error: {str(e)}")
            return raw_product_pb2.GetRawProductsResponse(
                products=[], total_count=0, source="ozon"
            )
```

### –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
```python
# ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ gRPC —Å–µ—Ä–≤–µ—Ä–∞
async def serve() -> None:
    """–ó–∞–ø—É—Å–∫ gRPC —Å–µ—Ä–≤–µ—Ä–∞"""
    server = grpc.aio.server(ThreadPoolExecutor(max_workers=10))
    raw_product_pb2_grpc.add_RawProductServiceServicer_to_server(
        OzonRawProductService(), server
    )
    
    listen_addr = '[::]:3002'
    server.add_insecure_port(listen_addr)
    
    print(f"üöÄ Ozon API gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {listen_addr}")
    
    try:
        await server.start()
        await server.wait_for_termination()
    except KeyboardInterrupt:
        print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è...")
    finally:
        print("üîÑ Graceful shutdown...")
        await server.stop(grace=5)
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")
```

## üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

### mypy.ini
```ini
# ‚úÖ –°—Ç—Ä–æ–≥–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è mypy
[mypy]
python_version = 3.11
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = True
disallow_incomplete_defs = True
check_untyped_defs = True
disallow_untyped_decorators = True
no_implicit_optional = True
warn_redundant_casts = True
warn_unused_ignores = True
warn_no_return = True
warn_unreachable = True
strict_equality = True
strict_concatenate = True

# –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–æ–∫
show_error_context = True
show_column_numbers = True
show_error_codes = True

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –±–µ–∑ —Ç–∏–ø–æ–≤
[mypy-selenium.*]
ignore_missing_imports = True

[mypy-undetected_chromedriver.*]
ignore_missing_imports = True

[mypy-raw_product_pb2.*]
ignore_missing_imports = True
```

### requirements.txt
```txt
# ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å –≤–µ—Ä—Å–∏—è–º–∏
fastapi==0.104.1
uvicorn[standard]==0.24.0
undetected-chromedriver==3.5.3
selenium==4.12.0
pydantic==2.5.0
redis==5.0.1
httpx==0.25.2

# gRPC –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
grpcio==1.59.3
grpcio-tools==1.59.3

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
pytest==7.4.3
pytest-asyncio==0.21.1
pytest-mock==3.12.0
mypy==1.7.1
```

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

### Unit —Ç–µ—Å—Ç—ã
```python
# ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å pytest
import pytest
from unittest.mock import Mock, AsyncMock
from domain.entities.product import Product
from infrastructure.services.ozon_parser_service import OzonParserService

class TestOzonParserService:
    """–¢–µ—Å—Ç—ã –¥–ª—è OzonParserService"""
    
    @pytest.fixture
    def parser_service(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        return OzonParserService()
    
    @pytest.fixture
    def mock_parser(self):
        """–ú–æ–∫ –ø–∞—Ä—Å–µ—Ä–∞"""
        parser = Mock()
        parser.get_products = AsyncMock()
        return parser
    
    @pytest.mark.asyncio
    async def test_parse_products_success(self, parser_service, mock_parser):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        # Arrange
        expected_products = [
            Product(id="1", name="RTX 5070", price=50000.0, category="videocards"),
            Product(id="2", name="RTX 5080", price=80000.0, category="videocards")
        ]
        mock_parser.get_products.return_value = expected_products
        parser_service.parser = mock_parser
        
        # Act
        result = await parser_service.parse_products("rtx 5070", "videocards")
        
        # Assert
        assert len(result) == 2
        assert result[0].name == "RTX 5070"
        assert result[1].name == "RTX 5080"
        mock_parser.get_products.assert_called_once_with("rtx 5070", "videocards", None, None)
    
    @pytest.mark.asyncio
    async def test_parse_products_empty_result(self, parser_service, mock_parser):
        """–¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        # Arrange
        mock_parser.get_products.return_value = []
        parser_service.parser = mock_parser
        
        # Act
        result = await parser_service.parse_products("–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä", "videocards")
        
        # Assert
        assert result == []
```

### Integration —Ç–µ—Å—Ç—ã
```python
# ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
import pytest
import grpc
import asyncio
from infrastructure.grpc.ozon_grpc_service import OzonRawProductService
import raw_product_pb2

class TestOzonGrpcService:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã gRPC —Å–µ—Ä–≤–∏—Å–∞"""
    
    @pytest.fixture
    def grpc_service(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ gRPC —Å–µ—Ä–≤–∏—Å–∞"""
        return OzonRawProductService()
    
    @pytest.mark.asyncio
    async def test_get_raw_products_valid_request(self, grpc_service):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ gRPC –∑–∞–ø—Ä–æ—Å–∞"""
        # Arrange
        request = raw_product_pb2.GetRawProductsRequest(
            query="rtx 5070",
            category="videocards"
        )
        context = Mock()
        
        # Act
        response = await grpc_service.GetRawProducts(request, context)
        
        # Assert
        assert response.source == "ozon"
        assert isinstance(response.products, list)
        assert response.total_count >= 0
```

## üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

### –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
```python
# ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import logging
from typing import Any, Dict

class ParserLogger:
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞"""
    
    def __init__(self, name: str) -> None:
        self.logger = logging.getLogger(name)
        self.logger.setLevel(logging.INFO)
    
    def log_parsing_start(self, query: str, category: str) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self.logger.info(f"üîç –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {query} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
    
    def log_parsing_success(self, query: str, count: int, duration: int) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self.logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {query} -> {count} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ {duration}ms")
    
    def log_parsing_error(self, query: str, error: Exception) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {query} -> {error}")
    
    def log_grpc_request(self, method: str, request_data: Dict[str, Any]) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ gRPC –∑–∞–ø—Ä–æ—Å–∞"""
        self.logger.info(f"üì° gRPC {method}: {request_data}")
```

### –ú–µ—Ç—Ä–∏–∫–∏
```python
# ‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
import time
from typing import Callable, Any
from functools import wraps

def measure_time(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    @wraps(func)
    async def wrapper(*args, **kwargs) -> Any:
        start_time = time.time()
        try:
            result = await func(*args, **kwargs)
            duration = int((time.time() - start_time) * 1000)
            print(f"‚ö° {func.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {duration}ms")
            return result
        except Exception as e:
            duration = int((time.time() - start_time) * 1000)
            print(f"‚ùå {func.__name__} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π –∑–∞ {duration}ms: {e}")
            raise
    return wrapper

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
@measure_time
async def parse_products(self, query: str, category: str) -> List[Product]:
    """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏"""
    # implementation
```

## üö® –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏

### –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –ò—Å–ø–æ–ª—å–∑—É–π async/await –¥–ª—è I/O –æ–ø–µ—Ä–∞—Ü–∏–π
- –ü—Ä–∏–º–µ–Ω—è–π connection pooling
- –ö—ç—à–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
- –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å—ã –∫ –≤–Ω–µ—à–Ω–∏–º API
- –ò—Å–ø–æ–ª—å–∑—É–π batch –æ–±—Ä–∞–±–æ—Ç–∫—É

### –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- –í–∞–ª–∏–¥–∏—Ä—É–π –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –ò—Å–ø–æ–ª—å–∑—É–π prepared statements
- –ù–µ —Ö—Ä–∞–Ω–∏ —Å–µ–∫—Ä–µ—Ç—ã –≤ –∫–æ–¥–µ
- –õ–æ–≥–∏—Ä—É–π –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤

### –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å
- –î–æ–±–∞–≤–ª—è–π retry –ª–æ–≥–∏–∫—É
- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π health checks
- –ú–æ–Ω–∏—Ç–æ—Ä—å —Ä–µ—Å—É—Ä—Å—ã
- Graceful shutdown

## üö® –ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å

- ‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π `any` —Ç–∏–ø
- ‚ùå –ù–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π –æ—à–∏–±–∫–∏ mypy
- ‚ùå –ù–µ –¥–µ–ª–∞–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º–∏
- ‚ùå –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π
- ‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
- ‚ùå –ù–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π async/await
- ‚ùå –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Ç–∏–ø–∏–∑–∞—Ü–∏—é
- ‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π `print` –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
description:
globs:
alwaysApply: false
---
