# üöÄ REST API Rules

## üìã –û–±–∑–æ—Ä

–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ REST API –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ MarketVision. –û—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã –¥–ª—è Product-Filter-Service, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –±–æ—Ç–æ–º –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º.

## üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ API

### –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
```
Frontend (Next.js:3000) ‚Üí Product-Filter-Service (NestJS:3001) ‚Üí gRPC Services
Telegram Bot ‚Üí Product-Filter-Service (NestJS:3001) ‚Üí gRPC Services
```

**‚ö†Ô∏è –í–∞–∂–Ω–æ:** Product-Filter-Service —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3001 –∫–∞–∫ HTTP API, –∞ –Ω–µ –Ω–∞ 50051 –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö docker-compose —Ñ–∞–π–ª–∞—Ö.

### –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:
- **Product-Filter-Service** (–ø–æ—Ä—Ç 3001) - –æ—Å–Ω–æ–≤–Ω–æ–π REST API –¥–ª—è –±–æ—Ç–∞ –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
- **WB API** (–ø–æ—Ä—Ç 3000) - gRPC —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ WildBerries
- **Ozon API** (–ø–æ—Ä—Ç 3002) - gRPC —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Ozon
- **DB API** (–ø–æ—Ä—Ç 50051) - gRPC —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

### üö® –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
```bash
# REST API (HTTP)
Product-Filter-Service: http://localhost:3001  # –û—Å–Ω–æ–≤–Ω–æ–π API –¥–ª—è –±–æ—Ç–∞ –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞

# gRPC —Å–µ—Ä–≤–∏—Å—ã
WB API: localhost:3000        # –ü–∞—Ä—Å–∏–Ω–≥ WildBerries
Ozon API: localhost:3002      # –ü–∞—Ä—Å–∏–Ω–≥ Ozon  
DB API: localhost:50051       # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö

# Frontend
MarketVision Frontend: http://localhost:3000  # Next.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

# –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
Redis: localhost:6379         # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
PostgreSQL: localhost:5432    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
```

## üì° –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤

### –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã
```typescript
// ‚úÖ RESTful URL —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
GET    /products/search          // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
POST   /products/search          // –ü–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
GET    /products/health          // –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
GET    /products/cache/stats     // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
DELETE /products/cache/:category // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞

// ‚úÖ –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
GET    /api/v1/products/search
GET    /api/v2/products/search
```

### –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
```typescript
// ‚úÖ –û–¥–∏–Ω –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–∞ –¥–æ–º–µ–Ω
@Controller('products')
export class ProductsController {
  constructor(private readonly productsService: ProductsService) {}

  @Post('search')
  async searchProducts(@Body() request: ProductRequestDto): Promise<ProductResponse> {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!request.queries || request.queries.length === 0) {
        throw new HttpException('–ù–µ —É–∫–∞–∑–∞–Ω—ã –∑–∞–ø—Ä–æ—Å—ã', HttpStatus.BAD_REQUEST);
      }

      // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
      return await this.productsService.getProducts(request);
    } catch (error) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (error instanceof HttpException) {
        throw error;
      }
      throw new HttpException(
        `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`,
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }

  @Get('health')
  async getHealth(): Promise<HealthResponse> {
    return {
      status: 'ok',
      timestamp: new Date().toISOString(),
      services: {
        redis: await this.checkRedisConnection(),
        wb_api: await this.checkWbApiConnection(),
        ozon_api: await this.checkOzonApiConnection()
      }
    };
  }
}
```

## üîç DTO –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è

### Request DTO
```typescript
// ‚úÖ –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export class ProductRequestDto {
  @IsString()
  @IsOptional()
  category?: string;

  @IsArray()
  @IsString({ each: true })
  @ArrayMinSize(1)
  @ArrayMaxSize(10)
  queries: string[];

  @IsOptional()
  @IsNumber()
  @Min(1)
  @Max(100)
  limit?: number;

  @IsOptional()
  @IsBoolean()
  includeStats?: boolean;
}
```

### Response DTO
```typescript
// ‚úÖ –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
export class ProductResponse {
  products: Product[];
  totalCount: number;
  category: string;
  queries: string[];
  processingTime: number;
  cacheHit: boolean;
  timestamp: string;
}

export class Product {
  id: string;
  name: string;
  price: number;
  imageUrl: string;
  productUrl: string;
  source: 'wb' | 'ozon';
  category: string;
  query: string;
  stats?: {
    min: number;
    max: number;
    mean: number;
    median: number;
  };
}
```

## üö® –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

### HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥—ã
```typescript
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–æ–≤
export class ApiException extends HttpException {
  constructor(message: string, status: HttpStatus) {
    super(
      {
        error: true,
        message,
        timestamp: new Date().toISOString(),
        path: '/api/products/search'
      },
      status
    );
  }
}

// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
throw new ApiException('–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', HttpStatus.BAD_REQUEST);
throw new ApiException('–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', HttpStatus.SERVICE_UNAVAILABLE);
throw new ApiException('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞', HttpStatus.INTERNAL_SERVER_ERROR);
```

### –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
```typescript
// ‚úÖ –ï–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—à–∏–±–æ–∫
interface ApiError {
  error: true;
  message: string;
  code?: string;
  details?: any;
  timestamp: string;
  path: string;
}

// –ü—Ä–∏–º–µ—Ä—ã –æ—à–∏–±–æ–∫
{
  "error": true,
  "message": "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
  "code": "INVALID_CATEGORY",
  "details": {
    "category": "invalid_category",
    "validCategories": ["videocards", "processors", "motherboards"]
  },
  "timestamp": "2024-01-15T10:30:00.000Z",
  "path": "/api/products/search"
}
```

## üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

### CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
```typescript
// ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –≤ main.ts
app.enableCors({
  origin: [
    'http://localhost:3000',     // Frontend (Next.js)
    'http://localhost:3001',     // Product-Filter-Service
    'https://marketvision.app'   // Production
  ],
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  credentials: true,
  allowedHeaders: ['Content-Type', 'Authorization']
});
```

### Rate Limiting
```typescript
// ‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
@UseGuards(ThrottlerGuard)
@Throttle(100, 60) // 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
@Post('search')
async searchProducts(@Body() request: ProductRequestDto) {
  // ...
}
```

### –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
```typescript
// ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
app.useGlobalPipes(new ValidationPipe({
  whitelist: true,           // –£–¥–∞–ª—è–µ—Ç –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
  forbidNonWhitelisted: true, // –í—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—è—Ö
  transform: true,           // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
  transformOptions: {
    enableImplicitConversion: true
  }
}));
```

## ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

### –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
```typescript
// ‚úÖ Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
@Injectable()
export class ProductsService {
  constructor(
    private readonly redisService: RedisService,
    private readonly logger: Logger
  ) {}

  async getProducts(request: ProductRequestDto): Promise<ProductResponse> {
    const cacheKey = this.generateCacheKey(request);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cached = await this.redisService.get(cacheKey);
    if (cached) {
      this.logger.log(`Cache hit for key: ${cacheKey}`);
      return JSON.parse(cached);
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const products = await this.fetchFromApis(request);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (5 –º–∏–Ω—É—Ç)
    await this.redisService.setex(cacheKey, 300, JSON.stringify(products));
    
    return products;
  }
}
```

### –ü–∞–≥–∏–Ω–∞—Ü–∏—è
```typescript
// ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
export class PaginatedResponse<T> {
  data: T[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
    hasNext: boolean;
    hasPrev: boolean;
  };
}

@Get()
async getProducts(
  @Query('page') page: number = 1,
  @Query('limit') limit: number = 20
): Promise<PaginatedResponse<Product>> {
  // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
}
```

## üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API

### Swagger/OpenAPI
```typescript
// ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';

const config = new DocumentBuilder()
  .setTitle('MarketVision API')
  .setDescription('API –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ')
  .setVersion('1.0')
  .addTag('products', '–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏')
  .addTag('health', '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞')
  .build();

const document = SwaggerModule.createDocument(app, config);
SwaggerModule.setup('api/docs', app, document);
```

### JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
```typescript
/**
 * –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∑–∞–ø—Ä–æ—Å–∞–º
 * 
 * @param request - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
 * @returns –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
 * 
 * @example
 * ```typescript
 * const response = await productsService.searchProducts({
 *   category: 'videocards',
 *   queries: ['rtx 5070', 'rtx 5080']
 * });
 * ```
 * 
 * @throws {HttpException} –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
 */
async searchProducts(request: ProductRequestDto): Promise<ProductResponse>
```

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

### Unit —Ç–µ—Å—Ç—ã
```typescript
// ‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
describe('ProductsController', () => {
  let controller: ProductsController;
  let service: ProductsService;

  beforeEach(async () => {
    const module = await Test.createTestingModule({
      controllers: [ProductsController],
      providers: [
        {
          provide: ProductsService,
          useValue: {
            getProducts: jest.fn(),
            getHealth: jest.fn()
          }
        }
      ]
    }).compile();

    controller = module.get<ProductsController>(ProductsController);
    service = module.get<ProductsService>(ProductsService);
  });

  describe('searchProducts', () => {
    it('should return products for valid request', async () => {
      const request = { category: 'videocards', queries: ['rtx 5070'] };
      const expected = { products: [], totalCount: 0 };
      
      jest.spyOn(service, 'getProducts').mockResolvedValue(expected);
      
      const result = await controller.searchProducts(request);
      expect(result).toEqual(expected);
    });

    it('should throw error for invalid request', async () => {
      const request = { queries: [] };
      
      await expect(controller.searchProducts(request))
        .rejects
        .toThrow(HttpException);
    });
  });
});
```

### E2E —Ç–µ—Å—Ç—ã
```typescript
// ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
describe('Products API (e2e)', () => {
  let app: INestApplication;

  beforeEach(async () => {
    const moduleFixture = await Test.createTestingModule({
      imports: [AppModule],
    }).compile();

    app = moduleFixture.createNestApplication();
    await app.init();
  });

  it('/products/search (POST)', async () => {
    const request = {
      category: 'videocards',
      queries: ['rtx 5070']
    };

    const response = await request(app.getHttpServer())
      .post('/products/search')
      .send(request)
      .expect(200);

    expect(response.body).toHaveProperty('products');
    expect(response.body).toHaveProperty('totalCount');
    expect(Array.isArray(response.body.products)).toBe(true);
  });

  it('/products/health (GET)', async () => {
    const response = await request(app.getHttpServer())
      .get('/products/health')
      .expect(200);

    expect(response.body).toHaveProperty('status');
    expect(response.body).toHaveProperty('timestamp');
    expect(response.body).toHaveProperty('services');
  });
});
```

## üîÑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏

### Telegram Bot –∫–ª–∏–µ–Ω—Ç
```typescript
// ‚úÖ HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –±–æ—Ç–∞
export class WbApiClient {
  constructor(private apiUrl: string) {}

  async getVideocards(): Promise<any[]> {
    const url = `${this.apiUrl}/products/search`;
    
    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          category: 'videocards',
          queries: ['rtx 5070', 'rtx 5080', 'rtx 5090']
        })
      });

      if (!response.ok) {
        throw new Error(`API error: ${response.status}`);
      }

      const data = await response.json();
      return data.products || [];
    } catch (error) {
      console.error('API request failed:', error);
      return [];
    }
  }
}
```

### Frontend –∫–ª–∏–µ–Ω—Ç
```typescript
// ‚úÖ –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
export class ApiClient {
  private baseUrl: string;

  constructor(baseUrl: string = '/api') {
    this.baseUrl = baseUrl;
  }

  async searchProducts(params: SearchParams): Promise<ProductResponse> {
    const response = await fetch(`${this.baseUrl}/products/search`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(params)
    });

    if (!response.ok) {
      throw new ApiError(response.status, await response.text());
    }

    return response.json();
  }

  async getHealth(): Promise<HealthResponse> {
    const response = await fetch(`${this.baseUrl}/products/health`);
    
    if (!response.ok) {
      throw new ApiError(response.status, 'Health check failed');
    }

    return response.json();
  }
}
```

## üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

### –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
```typescript
// ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤
@Injectable()
export class ApiLoggerInterceptor implements NestInterceptor {
  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    const request = context.switchToHttp().getRequest();
    const { method, url, body, query } = request;
    const startTime = Date.now();

    this.logger.log(`API Request: ${method} ${url}`, {
      method,
      url,
      body,
      query,
      userAgent: request.headers['user-agent'],
      ip: request.ip
    });

    return next.handle().pipe(
      tap((response) => {
        const duration = Date.now() - startTime;
        this.logger.log(`API Response: ${method} ${url} - ${duration}ms`, {
          method,
          url,
          duration,
          statusCode: context.switchToHttp().getResponse().statusCode
        });
      })
    );
  }
}
```

### –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
```typescript
// ‚úÖ –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
@Injectable()
export class MetricsService {
  private requestCounter = new Counter({
    name: 'api_requests_total',
    help: 'Total number of API requests',
    labelNames: ['method', 'endpoint', 'status']
  });

  private responseTime = new Histogram({
    name: 'api_response_time_seconds',
    help: 'API response time in seconds',
    labelNames: ['method', 'endpoint']
  });

  recordRequest(method: string, endpoint: string, status: number, duration: number) {
    this.requestCounter.inc({ method, endpoint, status });
    this.responseTime.observe({ method, endpoint }, duration / 1000);
  }
}
```

## üö® –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏

### –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –ò—Å–ø–æ–ª—å–∑—É–π Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
- –î–æ–±–∞–≤–ª—è–π –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤
- –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ (gzip)
- –î–æ–±–∞–≤–ª—è–π ETags –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è

### –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- –í–∞–ª–∏–¥–∏—Ä—É–π –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –ò—Å–ø–æ–ª—å–∑—É–π HTTPS –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤
- –î–æ–±–∞–≤–ª—è–π rate limiting
- –õ–æ–≥–∏—Ä—É–π –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

### –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å
- –î–æ–±–∞–≤–ª—è–π health checks
- –ò—Å–ø–æ–ª—å–∑—É–π circuit breaker –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö API
- –î–æ–±–∞–≤–ª—è–π retry –ª–æ–≥–∏–∫—É
- –ú–æ–Ω–∏—Ç–æ—Ä—å –æ—à–∏–±–∫–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –ò—Å–ø–æ–ª—å–∑—É–π graceful shutdown

### –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
- –í–µ—Ä—Å–∏–æ–Ω–∏—Ä—É–π API –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
- –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π breaking changes
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
- –î–æ–±–∞–≤–ª—è–π deprecation warnings

## üìù –ß–µ–∫-–ª–∏—Å—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

### –ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞:
- [ ] –û–ø—Ä–µ–¥–µ–ª–∏ HTTP –º–µ—Ç–æ–¥ –∏ URL
- [ ] –°–æ–∑–¥–∞–π DTO —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
- [ ] –î–æ–±–∞–≤—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
- [ ] –ù–∞–ø–∏—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
- [ ] –î–æ–±–∞–≤—å —Ç–µ—Å—Ç—ã

### –ü–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º:
- [ ] –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- [ ] –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
- [ ] –ü—Ä–æ–≤–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- [ ] –û–±–Ω–æ–≤–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
- [ ] –î–æ–±–∞–≤—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

### –ü–æ—Å–ª–µ –¥–µ–ø–ª–æ—è:
- [ ] –ú–æ–Ω–∏—Ç–æ—Ä—å –º–µ—Ç—Ä–∏–∫–∏
- [ ] –ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ –æ—à–∏–±–æ–∫
- [ ] –°–æ–±–µ—Ä–∏ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
- [ ] –ü–ª–∞–Ω–∏—Ä—É–π —É–ª—É—á—à–µ–Ω–∏—è
description:
globs:
alwaysApply: false
---
