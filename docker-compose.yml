version: '3.8'

services:
  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: product-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - product-network

  # gRPC микросервис фильтрации продуктов
  product-filter-service:
    build:
      context: ./product-filter-service
      dockerfile: Dockerfile
    container_name: product-filter-service
    ports:
      - "50051:50051"
    environment:
      - REDIS_URL=redis://redis:6379
      - GRPC_PORT=50051
      - GRPC_HOST=0.0.0.0
      - LOG_LEVEL=info
    depends_on:
      - redis
    volumes:
      - ./product-filter-service/logs:/app/logs
    networks:
      - product-network
    restart: unless-stopped

  # WB API сервис
  wb-api:
    build:
      context: ./monorepo-root/wb-api
      dockerfile: Dockerfile
    container_name: wb-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - PRODUCT_FILTER_SERVICE_URL=product-filter-service:50051
      - LOG_LEVEL=info
    depends_on:
      - redis
      - product-filter-service
    networks:
      - product-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # DB API сервис (гибридный REST + gRPC)
  db-api:
    build:
      context: ./monorepo-root/db-api
      dockerfile: Dockerfile
    container_name: db-api
    ports:
      - "3003:3003"
      - "50052:50051"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/marketvision
      - GRPC_URL=0.0.0.0:50051
      - PORT=3003
      - NODE_ENV=production
    depends_on:
      - postgres
    networks:
      - product-network
    restart: unless-stopped

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      - POSTGRES_DB=marketvision
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - product-network
    restart: unless-stopped

  # DNS API сервис (Python)
  dns-api:
    build:
      context: ./monorepo-root/dns-api
      dockerfile: Dockerfile
    container_name: dns-api
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - PRODUCT_FILTER_SERVICE_URL=product-filter-service:50051
    depends_on:
      - redis
      - product-filter-service
    networks:
      - product-network
    restart: unless-stopped

  # Telegram Bot
  telegram-bot:
    build:
      context: ./monorepo-root/bot
      dockerfile: Dockerfile
    container_name: telegram-bot
    environment:
      - NODE_ENV=production
      - WB_API_URL=http://wb-api:3000
      - DNS_API_URL=http://dns-api:8000
      - REDIS_URL=redis://redis:6379
    depends_on:
      - wb-api
      - dns-api
    networks:
      - product-network
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:

networks:
  product-network:
    driver: bridge 