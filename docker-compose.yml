version: '3.8'

services:
  # Frontend (Next.js)
  marketvision-frontend:
    build: ./monorepo-root/marketvision-api
    container_name: marketvision-frontend
    environment:
      - NODE_ENV=production
    volumes:
      - ./monorepo-root/marketvision-api/logs:/usr/src/app/logs
    restart: unless-stopped
    networks:
      - marketvision-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database API
  marketvision-database-api:
    build: ./monorepo-root/db-api
    container_name: marketvision-database-api
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://marketvision:password@postgres:5432/marketvision
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - marketvision-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Product Filter Service
  marketvision-product-aggregator:
    build: ./monorepo-root/product-filter-service
    container_name: marketvision-product-aggregator
    environment:
      - NODE_ENV=production
    depends_on:
      - marketvision-database-api
      - marketvision-wb-parser
      - marketvision-ozon-parser
    restart: unless-stopped
    networks:
      - marketvision-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WB Parser
  marketvision-wb-parser:
    build: ./monorepo-root/wb-api
    container_name: marketvision-wb-parser
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - marketvision-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ozon Parser
  marketvision-ozon-parser:
    build: ./monorepo-root/ozon-api
    container_name: marketvision-ozon-parser
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - marketvision-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: marketvision-postgres
    environment:
      POSTGRES_DB: marketvision
      POSTGRES_USER: marketvision
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - marketvision-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U marketvision"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: marketvision-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - marketvision-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Proxy
  nginx:
    image: nginx:alpine
    container_name: marketvision-nginx-proxy
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./monorepo-root/tls:/etc/nginx/certs:ro
    depends_on:
      - marketvision-frontend
      - marketvision-database-api
      - marketvision-product-aggregator
    restart: unless-stopped
    networks:
      - marketvision-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  marketvision-net:
    driver: bridge
