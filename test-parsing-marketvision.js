const fetch = require('node-fetch');
const https = require('https');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const MARKETVISION_API_URL = 'https://localhost/api';

async function testParsingThroughMarketVision() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ MarketVision API');
  console.log('='.repeat(60));

  // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å - —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
  const testRequest = {
    categoryKey: 'videocards' // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
  };

  try {
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ MarketVision API:`, testRequest);
    
    const response = await fetch(`${MARKETVISION_API_URL}/parsing/trigger`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json' 
      },
      body: JSON.stringify(testRequest),
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      agent: new https.Agent({
        rejectUnauthorized: false
      })
    });

    const result = await response.json();
    
    console.log(`üì• –û—Ç–≤–µ—Ç MarketVision API (—Å—Ç–∞—Ç—É—Å: ${response.status}):`);
    console.log(JSON.stringify(result, null, 2));
    
    if (result.success) {
      console.log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ MarketVision API!`);
      console.log(`üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${result.data?.queries_processed || 0}`);
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${result.data?.total_products_found || 0}`);
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.data?.processing_time_ms || 0}ms`);
      
      if (result.data?.results) {
        console.log(`\nüìù –î–µ—Ç–∞–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º:`);
        result.data.results.forEach((r, i) => {
          console.log(`  ${i + 1}. "${r.query}" (${r.platform}): ${r.products_found} —Ç–æ–≤–∞—Ä–æ–≤`);
        });
      }
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${result.message}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testParsingThroughMarketVision();
